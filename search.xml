<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Tidb parser test</title>
      <link href="2021/01/30/yuque/Tidb%20parser%20test/"/>
      <url>2021/01/30/yuque/Tidb%20parser%20test/</url>
      
        <content type="html"><![CDATA[<h2 id="Import-Dependencies"><a href="#Import-Dependencies" class="headerlink" title="Import Dependencies"></a>Import Dependencies</h2><blockquote><p>go get -v github.com/pingcap/tidb/types/parser_driver@328b6d0</p></blockquote><h2 id="test"><a href="#test" class="headerlink" title="test"></a>test</h2><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/pingcap/parser"</span></span><br><span class="line"><span class="string">"github.com/pingcap/parser/ast"</span></span><br><span class="line">_ <span class="string">"github.com/pingcap/tidb/types/parser_driver"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> colX <span class="keyword">struct</span> {</span><br><span class="line">colNames []<span class="keyword">string</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *colX)</span> <span class="title">Enter</span><span class="params">(in ast.Node)</span> <span class="params">(ast.Node, <span class="keyword">bool</span>)</span></span> {</span><br><span class="line"><span class="keyword">if</span> name, ok := in.(*ast.ColumnName); ok {</span><br><span class="line">v.colNames = <span class="built_in">append</span>(v.colNames, name.Name.O)</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> in, <span class="literal">false</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *colX)</span> <span class="title">Leave</span><span class="params">(in ast.Node)</span> <span class="params">(ast.Node, <span class="keyword">bool</span>)</span></span> {</span><br><span class="line"><span class="keyword">return</span> in, <span class="literal">true</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">extractColumnName</span><span class="params">(rootNode *ast.StmtNode)</span> []<span class="title">string</span></span> {</span><br><span class="line">v := &amp;colX{}</span><br><span class="line">(*rootNode).Accept(v)</span><br><span class="line"><span class="keyword">return</span> v.colNames</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">parse</span><span class="params">(sql <span class="keyword">string</span>)</span></span> {</span><br><span class="line">p := parser.New()</span><br><span class="line"></span><br><span class="line">stmtNodes, _, err := p.Parse(sql, <span class="string">""</span>, <span class="string">""</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">fmt.Printf(<span class="string">"parse error: %v\n"</span>, err.Error())</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"%v\n"</span>, extractColumnName(&amp;stmtNodes[<span class="number">0</span>]))</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">normalize</span><span class="params">(sql <span class="keyword">string</span>)</span></span> {</span><br><span class="line">fmt.Printf(<span class="string">"%v\n"</span>, parser.Normalize(sql))</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">sql := <span class="string">`SELECT a, b from t where c1=1 and c2='a' and c3='2021/01/30 0:00:00'`</span></span><br><span class="line">parse(sql)     <span class="comment">// a b c1 c2 c3 c c4</span></span><br><span class="line">normalize(sql) <span class="comment">// select a , b from t where c1 = ? and c2 = ? and c3 = ?</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h2><p><a href="https://github.com/pingcap/parser/blob/master/docs/quickstart.md">pingcap/parser/docs/quickstart.md</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>反射</title>
      <link href="2021/01/25/go/reflect/"/>
      <url>2021/01/25/go/reflect/</url>
      
        <content type="html"><![CDATA[<h2 id="byte到string转换需要拷贝内存"><a href="#byte到string转换需要拷贝内存" class="headerlink" title="[]byte到string转换需要拷贝内存"></a>[]byte到string转换需要拷贝内存</h2><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">b := []<span class="keyword">byte</span>(<span class="string">"b"</span>)</span><br><span class="line">s := <span class="keyword">string</span>(b)</span><br><span class="line">pbyte := (*reflect.SliceHeader)(unsafe.Pointer(&amp;b)</span><br><span class="line">pstring := (*reflect.StringHeader)(unsafe.Pointer(&amp;s))</span><br><span class="line">fmt.Println(pbyte.Data == pstring.Data) <span class="comment">// false</span></span><br><span class="line">b = []<span class="keyword">byte</span>(<span class="string">"ttt"</span>)</span><br><span class="line">pstring.Data = pbyte.Data</span><br><span class="line">fmt.Println(s) <span class="comment">// t</span></span><br><span class="line">pstring.Len = pbyte.Len</span><br><span class="line">fmt.Println(s) <span class="comment">// ttt</span></span><br><span class="line">ss := <span class="keyword">string</span>(s)</span><br><span class="line">psstring := (*reflect.StringHeader)(unsafe.Pointer(&amp;ss))</span><br><span class="line">   fmt.Println(psstring.Data == pbyte.Data) <span class="comment">// true</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>net poll</title>
      <link href="2020/11/23/go/net/"/>
      <url>2020/11/23/go/net/</url>
      
        <content type="html"><![CDATA[<h2 id="select-poll-epoll"><a href="#select-poll-epoll" class="headerlink" title="select / poll / epoll"></a>select / poll / epoll</h2><img src="/2020/11/23/go/net/select_poll_epoll.png" class=""><h2 id="net-Listen"><a href="#net-Listen" class="headerlink" title="net.Listen"></a>net.Listen</h2><img src="/2020/11/23/go/net/net_Listen.jpeg" class=""><ol><li><code>net.Listen</code>通过 <code>netFD.init</code> -&gt; <code>FD.Init</code> -&gt; <code>pollDesc.init</code> -&gt; 最终调用 <code>epollcreate1</code> 创建全局唯一 <strong>epfd</strong>，然后调用 <code>epollctl</code> 将 <strong>listener fd</strong>注册到epoll实例的事件队列</li><li>通过 <code>var serverInit sync.Once</code> 保证epollcreate1只在Listen时执行一次，后续Accept调用复用 <code>FD.Init</code> 时不会执行</li></ol><h2 id="net-Accept"><a href="#net-Accept" class="headerlink" title="net.Accept"></a>net.Accept</h2><img src="/2020/11/23/go/net/net_Accept.jpeg" class=""><ol><li><code>pollDesc.waitRead</code> 循环检测上层netFD的FD是否有 <strong>pdReady</strong> I/O事件，如果有I/O发生则返回，否则park当前goroutine直到对应FD可读或可写后返回。</li><li><code>FD.Accept</code> 返回后，调用 <code>newFD</code> 创建这个新的socket对应的 <strong>netFD</strong>， 然后调用 <code>netFD.init</code> 完成初始化，调用链同Listen，最终将 <strong>socket fd</strong> 注册到 <strong>listener fd</strong> 的epoll实例的事件队列中</li><li>被park的goroutine在 <code>func netpoll(delay int64) gList</code> 中调用 <code>epollwait</code> 处理可读/可写的事件fd，生成g链表返回。 <code>netpoll</code> 函数在proc的GPM逻辑中被调用</li></ol><h2 id="Conn-Read-Conn-Write"><a href="#Conn-Read-Conn-Write" class="headerlink" title="Conn.Read/Conn.Write"></a>Conn.Read/Conn.Write</h2><h2 id="net-flow"><a href="#net-flow" class="headerlink" title="net flow"></a>net flow</h2><ul><li>Listen创建epoll实例</li><li>client连接server，Listener调用Accept接收conn，每个conn开启一个goroutine处理，所有信息注册到epoll实例的事件队列</li><li>conn调用Read/Write时被park当前goroutine，在GPM逻辑中调用netpoll唤醒goroutine响应I/O事件</li></ul><p>epoll本质为系统内核顺序I/O，通过结合goroutine的GPM框架，解耦内核I/O和用户I/O，达到高并发I/O的设计</p><h2 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h2><p><a href="https://zhuanlan.zhihu.com/p/299047984">Go netpoller 网络模型之源码全面解析</a></p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cgroup</title>
      <link href="2020/11/18/k8s/cgroup/"/>
      <url>2020/11/18/k8s/cgroup/</url>
      
        <content type="html"><![CDATA[<h2 id="V1"><a href="#V1" class="headerlink" title="V1"></a>V1</h2><img src="/2020/11/18/k8s/cgroup/cgroupV1.jpg" class=""><h2 id="V2"><a href="#V2" class="headerlink" title="V2"></a>V2</h2><img src="/2020/11/18/k8s/cgroup/cgroupV2.jpg" class=""><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ls /sys/fs/cgroup/ |grep cpu</span></span><br><span class="line">cpu</span><br><span class="line">cpuacct</span><br><span class="line">cpu,cpuacct</span><br><span class="line">cpuset</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> cat /sys/fs/cgroup/cpu/user.slice/tasks</span></span><br><span class="line">4872</span><br><span class="line">21893</span><br><span class="line">21896</span><br><span class="line">21907</span><br><span class="line">21913</span><br><span class="line">21914</span><br><span class="line"><span class="meta">#</span><span class="bash"> ps -ef | grep 21896 | grep -v grep</span></span><br><span class="line">root     21896     1  0 14:15 ?        00:00:00 /usr/lib/systemd/systemd --user</span><br><span class="line">root     21907 21896  0 14:15 ?        00:00:00 (sd-pam)</span><br></pre></td></tr></tbody></table></figure><blockquote><p>tasks中记录cgroup内pid</p></blockquote><h2 id="cgroup-amp-namespace-amp-unionFS"><a href="#cgroup-amp-namespace-amp-unionFS" class="headerlink" title="cgroup &amp; namespace &amp; unionFS"></a>cgroup &amp; namespace &amp; unionFS</h2><ol><li>cgroup用于隔离物理资源： cpu，mem等</li><li>namespace用于隔离pid间资源：<br> pid namespace用于模拟容器内root用户<br> mount namespace用于模拟容器内所属目录</li><li>unionFS用于分层搭建容器FS，参见overlay2</li></ol>]]></content>
      
      
      <categories>
          
          <category> k8s </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三色标记清除法</title>
      <link href="2020/11/18/go/wgb/"/>
      <url>2020/11/18/go/wgb/</url>
      
        <content type="html"><![CDATA[<h2 id="原始标记清除法"><a href="#原始标记清除法" class="headerlink" title="原始标记清除法"></a>原始标记清除法</h2><img src="/2020/11/18/go/wgb/mark_and_sweep.jpg" class=""><ol><li>从root开始循环遍历对象，mark</li><li>对未mark对象，sweep</li></ol><h2 id="三色标记清除法"><a href="#三色标记清除法" class="headerlink" title="三色标记清除法"></a>三色标记清除法</h2><blockquote><p>白： 未标记，本次GC被sweep对象<br>灰： 待标记，最终转黑<br>黑： 标记，本次GC保留对象</p></blockquote><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><ol><li>初始所有对象为**<em>白**</em></li><li>从root开始遍历一次对象，标记为**<em>灰**</em></li><li>遍历一次*<strong>灰**<em>，标记本对象为</em></strong>黑*<strong>，标记引用对象为**<em>灰</em></strong>，重复本操作</li><li>剩余**<em>白**</em>即为待sweep对象</li></ol><h3 id="若不使用STW的问题"><a href="#若不使用STW的问题" class="headerlink" title="若不使用STW的问题"></a>若不使用STW的问题</h3><ol><li>白的(灰)引用被破坏</li><li>白被黑引用</li></ol><blockquote><p>满足以上2个条件，产生错误sweep</p></blockquote><h3 id="强三色不变式"><a href="#强三色不变式" class="headerlink" title="强三色不变式"></a>强三色不变式</h3><p>不允许白被黑引用</p><h3 id="若三色不变式"><a href="#若三色不变式" class="headerlink" title="若三色不变式"></a>若三色不变式</h3><p>允许白被黑引用的前提：白的上游链路存在灰</p><h3 id="插入写屏障"><a href="#插入写屏障" class="headerlink" title="插入写屏障"></a>插入写屏障</h3><blockquote><p>对象被引用时触发<br>满足强三色不变式</p></blockquote><p>对象被引用时，设为**<em>灰**</em></p><h4 id="插入写屏障问题"><a href="#插入写屏障问题" class="headerlink" title="插入写屏障问题"></a>插入写屏障问题</h4><p>为提高GC效率，<font color="red">栈内存</font>不执行插入写屏障</p><p>解决：</p><ol><li>三色标记完成后，栈对象统一变**<em>白**</em></li><li>启动STW</li><li>三色标记处理栈对象</li><li>停止STW</li></ol><blockquote><p>STW扫描栈对象耗时10-100ms</p></blockquote><h3 id="删除屏障"><a href="#删除屏障" class="headerlink" title="删除屏障"></a>删除屏障</h3><blockquote><p>对象被删除时触发<br>满足弱三色不变式</p></blockquote><p>标记下游引用对象为**<em>灰**</em></p><h4 id="删除屏障问题"><a href="#删除屏障问题" class="headerlink" title="删除屏障问题"></a>删除屏障问题</h4><p>删除对象下游对象最终会被标记为**<em>黑**</em>，可能无其他引用，本轮GC保留一轮，在下轮GC清除</p><h3 id="混合写屏障-结合写屏障和删除屏障"><a href="#混合写屏障-结合写屏障和删除屏障" class="headerlink" title="混合写屏障 (结合写屏障和删除屏障)"></a>混合写屏障 (结合写屏障和删除屏障)</h3><ol><li>初始扫描<font color="red">栈可达对象</font>标记为*<strong>黑**<em>，GC期间新创建的栈对象直接标记为</em></strong>黑*** (解决写屏障问题)</li><li>被删除对象为**<em>灰**</em> (删除屏障)</li><li>被添加对象为**<em>灰**</em> (写屏障)</li></ol><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>overlay2</title>
      <link href="2020/10/22/k8s/overlay2/"/>
      <url>2020/10/22/k8s/overlay2/</url>
      
        <content type="html"><![CDATA[<img src="/2020/10/22/k8s/overlay2/unionFS.png" class=""><blockquote><p>所有image层之上是<font color="red">容器层</font>，容器内修改操作仅发生在容器层<br>可通过docker外挂方式将物理机目录挂在进容器</p></blockquote><pre><code class="shell"># docker info | grep -E "Storage Driver|Root" Storage Driver: overlay2 Docker Root Dir: /var/lib/docker# pwd/var/lib/docker/image# ll总用量 0drwx------ 5 root root 81 6月  30 23:40 overlay2# docker images | grep nginx |grep 1.9.1nginx                                                             1.9.1               94ec7e53edfc        5 years ago         133MB# pwd/var/lib/docker/image/overlay2/imagedb/content/sha256# ll |grep 94ec7e53edfc-rw------- 1 root root 4520 6月  21 22:39 94ec7e53edfc793d6d8412b4748cd84270da290ce9256730eb428574f98f7c95# cat 94ec7e53edfc793d6d8412b4748cd84270da290ce9256730eb428574f98f7c95 | jq . |grep -A 20 rootfs  "rootfs": {    "type": "layers",    "diff_ids": [      "sha256:d55f823e63e3bd76ed8a77582f6701fe86bbceb674e953fc218df06d10f99da5",      "sha256:5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef",      "sha256:5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef",      ......    ]  }}# pwd/var/lib/docker/image/overlay2/layerdb/sha256# layer1 = diff_ids[0]# ll |grep d55f823e63e3bd76ed8a77582f6701fe86bbceb674e953fc218df06d10f99da5drwx------ 2 root root 71 6月  21 22:39 d55f823e63e3bd76ed8a77582f6701fe86bbceb674e953fc218df06d10f99da5# layer2 = layer1 + diff_ids[1]# echo -n "sha256:d55f823e63e3bd76ed8a77582f6701fe86bbceb674e953fc218df06d10f99da5 sha256:5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef" | sha256sumc79ce3b23816801c1c2f5a1eebd4e70b513c971670053bd0269689cb6c4c7843  -# ll |grep c79ce3b23816801c1c2f5a1eebd4e70b513c971670053bd0269689cb6c4c7843drwx------ 2 root root 85 6月  21 22:39 c79ce3b23816801c1c2f5a1eebd4e70b513c971670053bd0269689cb6c4c7843# layer3 = layer2 + diff_ids[2]# echo -n "sha256:c79ce3b23816801c1c2f5a1eebd4e70b513c971670053bd0269689cb6c4c7843 sha256:5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef" | sha256sum8f5776356fae028caf803b96e16158934f12612836f99e273eab24c60465d5b8  -# ll |grep 8f5776356fae028caf803b96e16158934f12612836f99e273eab24c60465d5b8drwx------ 2 root root 85 6月  21 22:39 8f5776356fae028caf803b96e16158934f12612836f99e273eab24c60465d5b8# layer -&gt; rootfs cache-id# cat 8f5776356fae028caf803b96e16158934f12612836f99e273eab24c60465d5b8/cache-id86ee0049958014c13786026f642b9874a679f9c32ec12bfb5f7101747e43ec1e# pwd/var/lib/docker/overlay2# ll | grep 86ee0049958014c13786026f642b9874a679f9c32ec12bfb5f7101747e43ec1edrwx------ 4 root root     72 6月  21 22:39 86ee0049958014c13786026f642b9874a679f9c32ec12bfb5f7101747e43ec1e</code></pre>]]></content>
      
      
      <categories>
          
          <category> k8s </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>innodb btree latch</title>
      <link href="2020/10/14/mysql/latch/"/>
      <url>2020/10/14/mysql/latch/</url>
      
        <content type="html"><![CDATA[<h2 id="mysql5-6-modify-leaf"><a href="#mysql5-6-modify-leaf" class="headerlink" title="mysql5.6 modify leaf"></a>mysql5.6 modify leaf</h2><img src="/2020/10/14/mysql/latch/5.6modifyleaf.jpg" class=""><h2 id="mysql5-6-modify-tree"><a href="#mysql5-6-modify-tree" class="headerlink" title="mysql5.6 modify tree"></a>mysql5.6 modify tree</h2><img src="/2020/10/14/mysql/latch/5.6modifytree.jpg" class=""><h2 id="mysql5-7-select-amp-modify-leaf"><a href="#mysql5-7-select-amp-modify-leaf" class="headerlink" title="mysql5.7 select &amp; modify leaf"></a>mysql5.7 select &amp; modify leaf</h2><img src="/2020/10/14/mysql/latch/5.7select_modifyleaf.jpg" class=""><h2 id="mysql5-7-modify-tree"><a href="#mysql5-7-modify-tree" class="headerlink" title="mysql5.7 modify tree"></a>mysql5.7 modify tree</h2><img src="/2020/10/14/mysql/latch/5.7modifytree.jpg" class=""><h2 id="5-6-gt-5-7"><a href="#5-6-gt-5-7" class="headerlink" title="5.6 -> 5.7"></a>5.6 -&gt; 5.7</h2><ul><li>引入sx lock</li><li>引入non-leaf page lock</li></ul>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式学习</title>
      <link href="2020/07/31/mysql/%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%A6%E4%B9%A0/"/>
      <url>2020/07/31/mysql/%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="2PC-数据库server层"><a href="#2PC-数据库server层" class="headerlink" title="2PC (数据库server层)"></a>2PC (数据库server层)</h2><blockquote><p>prepare/commit/rollback</p></blockquote><ul><li>Prepare 阶段(事务协调者向所有参与者发起prepare): 回滚段设置为prepare；写redolog并刷盘</li><li>Commit 阶段(所有参与者回复待提交，向所有参与者发起commit，否则发起rollback)： 写binlog；刷盘；InnoDB commit</li></ul><h3 id="2PC崩溃恢复"><a href="#2PC崩溃恢复" class="headerlink" title="2PC崩溃恢复"></a>2PC崩溃恢复</h3><ul><li>Prepare 阶段崩溃: 已写redolog，commit阶段前崩溃，回滚</li><li>commit 阶段： 写binlog前崩溃，回滚</li><li>已写binlog： InnoDB commit前崩溃，重新执行commit完成提交</li></ul><h3 id="崩溃恢复过程"><a href="#崩溃恢复过程" class="headerlink" title="崩溃恢复过程"></a>崩溃恢复过程</h3><blockquote><p>binlog日志每次rotate时，保证没有正在提交事务，并将redolog刷盘，保证rotate时旧的binlog事务为已提交状态</p></blockquote><p>通过index找到最后一个binlog日志，遍历并解析日志中每个XID-event，判断事务是否需要回滚</p><h3 id="2PC问题"><a href="#2PC问题" class="headerlink" title="2PC问题"></a>2PC问题</h3><p>commit阶段某个参与者失败或超时，其他参与者是commit还是rollback</p><h3 id="组提交"><a href="#组提交" class="headerlink" title="组提交"></a>组提交</h3><blockquote><p>5.6以前对整个2PC阶段加锁，因此每个事务需刷3次盘（写 redolog，写 binlog，写 commit），性能较低</p></blockquote><ol><li>prepare阶段：回滚段设置为prepare</li><li>commit阶段</li><li>1 flush stage：写redolog并刷盘，多个线程按进入的顺序将 binlog 从 cache 写入文件（不刷盘）</li><li>2 sync stage：对 binlog 文件做 fsync 操作（多个线程的 binlog 合并一次刷盘）</li><li>3 commit stage：各个线程按顺序做 InnoDB commit 操作</li></ol><ul><li>每个stage为一个队列，有锁保护，第一个进入队列的线程为leader，后续进入队列为follower，队列满员后，leader领导队列全员执行stage并进入下个stage。若下个stage非空，leader注册为下个stage的follower并加入。</li><li>将redo操作加入组提交，提升性能</li><li>通过将锁粒度细化，3个阶段可并行执行，提升性能</li></ul><h3 id="XA"><a href="#XA" class="headerlink" title="XA"></a>XA</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; XA START 'abc','def',2;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into t1 values(1,1);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; XA END 'abc','def',2;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; XA PREPARE 'abc','def',2;</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; XA RECOVER;</span><br><span class="line">+----------+--------------+--------------+--------+</span><br><span class="line">| formatID | gtrid_length | bqual_length | data   |</span><br><span class="line">+----------+--------------+--------------+--------+</span><br><span class="line">|        2 |            3 |            3 | abcdef |</span><br><span class="line">+----------+--------------+--------------+--------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; XA COMMIT 'abc','def',2;</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; XA START 'xatest';</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into t1 values(2,2);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; XA END 'xatest';</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; XA RECOVER;</span><br><span class="line">Empty set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; XA COMMIT 'xatest' one phase;</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; XA RECOVER;</span><br><span class="line">Empty set (0.00 sec)</span><br></pre></td></tr></tbody></table></figure><h2 id="最终一致性-应用层"><a href="#最终一致性-应用层" class="headerlink" title="最终一致性 (应用层)"></a>最终一致性 (应用层)</h2><p>A系统扣钱，发送信息给中间件，B系统接收信息加钱</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>A先update DB，后发送消息，若发送失败，B无法加钱<br>A先发送消息，后update DB，若update DB失败，已发送消息无法撤回</p><p>将网络和DB事务放在同一个事务中，导致DB长事务</p><h2 id="TCC"><a href="#TCC" class="headerlink" title="TCC"></a>TCC</h2><p>应用层2PC事务最终一致性</p><blockquote><p>Try/Confirm/Cancel</p></blockquote><ul><li>阶段1： 协调者调用所有参与者的Try</li><li>阶段2:  所有Try成功后调用Confirm，否则调用Cancel</li></ul><h3 id="TCC问题"><a href="#TCC问题" class="headerlink" title="TCC问题"></a>TCC问题</h3><p>Confirm/Cancel若失败不断重试，必须等幂操作</p><h3 id="例"><a href="#例" class="headerlink" title="例"></a>例</h3><p>A、B、C转账，A给C转30，B给C转50，最终C +80，A -30，B -50</p><ul><li>阶段1： A锁定30，B锁定50，检查C是否可以转钱</li><li>阶段2: ABC开始转钱，任意一个失败不断重试</li></ul><h3 id="事务状态表-日志流水表"><a href="#事务状态表-日志流水表" class="headerlink" title="事务状态表/日志流水表"></a>事务状态表/日志流水表</h3><p>A给C转30，如何保证AC同时转账成功</p><p>调用方维护事务状态表，每次调用前记录流水，调用成功后更新流水状态，流水事务ID全局唯一<br>后台任务不断检查流水表，若存在长时间未成功流水，尝试重试该流水事务ID的转账，根据TCC幂等性最终保证一致性</p><ol><li>若多次重试失败，状态置未错误，需人工干预</li><li>若调用方调用部分成功，此时客户端可返回未知需稍后确认，等待人工处理</li></ol><h3 id="弱一致性-状态补偿"><a href="#弱一致性-状态补偿" class="headerlink" title="弱一致性 + 状态补偿"></a>弱一致性 + 状态补偿</h3><p>电商网站下单，库存库扣减，订单库累加，如何保证2个操作的原子性</p><ul><li>最终一致性方案，容易导致超卖</li><li>TCC强同步方案，性能不足</li><li>弱一致性（允许少卖，不许超卖）</li></ul><p>先扣库存再提交订单例：</p><ol><li>扣库存失败，不提交订单，返回失败，调用方重试（多扣库存）</li><li>扣库存成功，提交订单失败，返回失败，调用方重试（多扣库存）</li><li>扣库存成功，提交订单成功，返回成功。</li></ol><p>先提交订单再扣库存同理，保证库存可以多扣不能少扣</p><p>多扣库存补偿机制：<br>每次扣库存生成流水日志，通过关联订单系统中未支付订单和流水日志，可以回收对应库存</p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>backp</title>
      <link href="2020/07/21/mysql/backup/"/>
      <url>2020/07/21/mysql/backup/</url>
      
        <content type="html"><![CDATA[<h2 id="mysqlbackup-MBE-amp-xtrabackup"><a href="#mysqlbackup-MBE-amp-xtrabackup" class="headerlink" title="mysqlbackup(MBE) &amp; xtrabackup"></a>mysqlbackup(MBE) &amp; xtrabackup</h2><p>利用mysql crash recover使用redo log恢复机制<br>FTWRL复制获取binlog点或gtid</p><h3 id="xtrabackup"><a href="#xtrabackup" class="headerlink" title="xtrabackup"></a>xtrabackup</h3><p>backup innoDB tables and files &amp; undo file<br>Executing FLUSH NO_WRITE_TO_BINLOG TABLES<br>Executing FLUSH TABLES WITH READ LOCK<br>backup non-InnoDB tables and files<br>Executing FLUSH NO_WRITE_TO_BINLOG ENGINE LOGS<br>The latest check point (for incremental): ‘68809340’<br>Executing UNLOCK TABLES<br>backup bufferpool<br>xtrabackup: Transaction log of lsn (68809340) to (68809349) was copied</p><h4 id="Executing-FLUSH-NO-WRITE-TO-BINLOG-ENGINE-LOGS"><a href="#Executing-FLUSH-NO-WRITE-TO-BINLOG-ENGINE-LOGS" class="headerlink" title="Executing FLUSH NO_WRITE_TO_BINLOG ENGINE LOGS"></a>Executing FLUSH NO_WRITE_TO_BINLOG ENGINE LOGS</h4><p>通过切换binlog并拷贝最后一个binlog，恢复时使用最后一个binlog恢复至一致点<br>若存在大事务可能无法切换binlog(flush被长时间阻塞)</p><h3 id="MBE"><a href="#MBE" class="headerlink" title="MBE"></a>MBE</h3><p>Starting log scan from lsn = 68824576 at offset = 66322432 and checkpoint = 68824590 in file /DBAASLOG/RED/ib_logfile0<br>backup innoDB tables and files &amp; undo file<br>backup bufferpool<br>FTWRL<br>backup non-innodb tables and files<br>Scanned log up to lsn 68824890<br>All tables unlocked</p><h2 id="二级备份技术"><a href="#二级备份技术" class="headerlink" title="二级备份技术"></a>二级备份技术</h2><blockquote><p>RTO: 灾难恢复时长<br>RPO: 灾难丢失数据时长</p></blockquote><table><thead><tr><th>技术点</th><th>RTO</th><th>RPO</th><th>消耗资源</th></tr></thead><tbody><tr><td>逻辑全量</td><td>小时级</td><td>天级</td><td>高</td></tr><tr><td>逻辑全量+逻辑日志</td><td>小时级</td><td>秒级</td><td>高</td></tr><tr><td>物理全量</td><td>小时级</td><td>天级</td><td>中</td></tr><tr><td>物理全量+物理增量</td><td>小时级</td><td>小时级</td><td>低</td></tr><tr><td>物理全量+物理增量+逻辑日志</td><td>小时级</td><td>秒级</td><td>低</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysqldump</title>
      <link href="2020/07/21/mysql/mysqldump/"/>
      <url>2020/07/21/mysql/mysqldump/</url>
      
        <content type="html"><![CDATA[<h2 id="默认-–lock-tables-库中不同表备份点一致，不同库备份点不一致"><a href="#默认-–lock-tables-库中不同表备份点一致，不同库备份点不一致" class="headerlink" title="默认 –lock-tables  库中不同表备份点一致，不同库备份点不一致"></a>默认 –lock-tables  库中不同表备份点一致，不同库备份点不一致</h2><ol><li>获取gtid或file postion</li><li>顺序逻辑备份每个库，不同库之间备份时间点不同</li><li>1 同时lock库中所有表READ锁，使库变为只读</li><li>2 show create table + select * from table， 导出</li><li>3 unlock tables</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2020-11-01T16:02:01.441631Z   18 QuerySHOW CREATE DATABASE IF NOT EXISTS `test`</span><br><span class="line">2020-11-01T16:02:01.441820Z   18 Queryshow tables</span><br><span class="line">2020-11-01T16:02:01.442210Z   18 QueryLOCK TABLES `employees` READ /*!32311 LOCAL */,`t1` READ /*!32311 LOCAL */,`test` READ /*!32311 LOCAL */,`test_auto` READ /*!32311 LOCAL */</span><br><span class="line">...</span><br><span class="line">2020-11-01T16:02:04.181862Z   18 QueryUNLOCK TABLES</span><br></pre></td></tr></tbody></table></figure><h2 id="–lock-all-tables-所有库备份点一致"><a href="#–lock-all-tables-所有库备份点一致" class="headerlink" title="–lock-all-tables  所有库备份点一致"></a>–lock-all-tables  所有库备份点一致</h2><p>整个数据库变为只读</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-11-01T16:16:57.678240Z   21 QueryFLUSH TABLES</span><br><span class="line">2020-11-01T16:16:58.204729Z   21 QueryFLUSH TABLES WITH READ LOCK</span><br></pre></td></tr></tbody></table></figure><h2 id="–single-transaction-所有innodb表备份点一致"><a href="#–single-transaction-所有innodb表备份点一致" class="headerlink" title="–single-transaction  所有innodb表备份点一致"></a>–single-transaction  所有innodb表备份点一致</h2><ol><li>设置会话隔离级别为RR</li><li>开启一个MVCC会话，START TRANSACTION /*!40100 WITH CONSISTENT SNAPSHOT */ ，开启会话时自带一次select保证备份点之后的读一致性</li><li>创建SAVEPOINT开始表备份，在ROLLBACK TO SAVEPOINT前对表的DDL阻塞</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">2020-11-01T16:20:35.440889Z   22 QuerySET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ</span><br><span class="line">2020-11-01T16:20:35.441080Z   22 QuerySTART TRANSACTION /*!40100 WITH CONSISTENT SNAPSHOT */</span><br><span class="line">...</span><br><span class="line">2020-11-01T16:20:35.451846Z   22 QueryUNLOCK TABLES</span><br><span class="line">...</span><br><span class="line">2020-11-01T16:20:35.471418Z   22 QuerySHOW CREATE DATABASE IF NOT EXISTS `test`</span><br><span class="line">2020-11-01T16:20:35.471499Z   22 QuerySAVEPOINT sp</span><br><span class="line">2020-11-01T16:20:35.478244Z   22 Queryshow tables</span><br><span class="line">...</span><br><span class="line">2020-11-01T16:20:35.484877Z   22 Queryshow create table `t1`</span><br><span class="line">2020-11-01T16:20:35.486464Z   22 QuerySELECT /*!40001 SQL_NO_CACHE */ * FROM `t1`</span><br><span class="line">2020-11-01T16:20:35.488296Z   22 QueryROLLBACK TO SAVEPOINT sp</span><br><span class="line">...</span><br><span class="line">2020-11-01T16:20:35.489280Z   22 Queryshow create table `test`</span><br><span class="line">2020-11-01T16:20:35.497826Z   22 QuerySELECT /*!40001 SQL_NO_CACHE */ * FROM `test`</span><br><span class="line">2020-11-01T16:20:38.400419Z   22 QueryROLLBACK TO SAVEPOINT sp</span><br><span class="line">...</span><br><span class="line">2020-11-01T16:20:38.403299Z   22 QueryRELEASE SAVEPOINT sp</span><br></pre></td></tr></tbody></table></figure><h2 id="–single-transaction-–master-data-2-需2次flush关表"><a href="#–single-transaction-–master-data-2-需2次flush关表" class="headerlink" title="–single-transaction + –master-data=2    需2次flush关表"></a>–single-transaction + –master-data=2    需2次flush关表</h2><p>–master-data需导出当前binlog位点，因此需FTWRL将数据库数据达到一致</p><ol><li>flush tables + FTWRL 整个数据库达到一致</li><li>设置RR，开启一致读会话</li><li>通过show master status获取binlog位点</li><li>UNLOCK TABLES</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">2020-11-01T16:47:40.165353Z   23 QueryFLUSH /*!40101 LOCAL */ TABLES</span><br><span class="line">2020-11-01T16:47:40.190316Z   23 QueryFLUSH TABLES WITH READ LOCK</span><br><span class="line">2020-11-01T16:47:40.190471Z   23 QuerySET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ</span><br><span class="line">2020-11-01T16:47:40.190537Z   23 QuerySTART TRANSACTION /*!40100 WITH CONSISTENT SNAPSHOT */</span><br><span class="line">2020-11-01T16:47:40.190744Z   23 QuerySHOW VARIABLES LIKE 'gtid\_mode'</span><br><span class="line">2020-11-01T16:47:40.202013Z   23 QuerySHOW MASTER STATUS</span><br><span class="line">2020-11-01T16:47:40.204813Z   23 QueryUNLOCK TABLES</span><br><span class="line">...</span><br></pre></td></tr></tbody></table></figure><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p>mysql –max-allowed-packet=16MB -BNe “SELECT SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME NOT IN (‘mysql’, ‘performance_schema’, ‘information_schema’, ‘sys’)” | tr ‘\n’ ‘ ‘ &gt; dbs.sql<br>mysqldump  –opt –add-drop-database –add-drop-table –complete-insert –default-character-set=utf8 –hex-blob –master-data=2 –quote-names –single-transaction –events –routines –triggers –databases $(cat dbs.sql) &gt; full_dump.sql</p><ul><li><p>-q, –quick   Don’t buffer query, dump directly to stdout. (Defaults to on; use –skip-quick to disable.)</p></li><li><p>–opt : Shorthand for –add-drop-table –add-locks –create-options –extended-insert –lock-tables –quick –set-charset</p></li><li><p>–lock-tables Lock all tables before dumping them</p></li><li><p>–single-transaction Issue a BEGIN SQL statement before dumping data from server</p></li><li><p>–hex-blob Dump binary columns using hexadecimal notation (for example, ‘abc’ becomes 0x616263)</p></li><li><p>–master-data=2 Write the binary log file name and position to the output as an SQL comment</p></li><li><p>–max-allowed-packet Maximum packet length to send to or receive from server</p></li><li><p>–events</p></li><li><p>–routines</p></li><li><p>–triggers</p></li><li><p>–complete-insert Use complete INSERT statements that include column names</p></li><li><p>–set-charset Add SET NAMES default_character_set to output</p></li><li><p>–add-drop-database</p></li><li><p>–add-drop-table</p></li><li><p>–add-locks</p></li><li><p>–default-character-set=utf8</p></li><li><p>–quick 流式取数据，非单次填充整个结果集到内存</p></li><li><p>–extended-insert Use multiple-row INSERT syntax</p></li><li><p>–create-options Include all MySQL-specific table options in CREATE TABLE statements</p></li><li><p>–flush-logs Flush MySQL server log files before starting dump</p></li><li><p>–lock-all-tables Lock all tables across all databases</p></li><li><p>–set-gtid-purged Whether to add SET @@GLOBAL.GTID_PURGED to output</p></li><li><p>–databases</p></li><li><p>–tables</p></li><li><p>–no-create-db</p></li><li><p>–no-create-info</p></li><li><p>–no-data</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker命令</title>
      <link href="2020/07/17/k8s/docker%E5%91%BD%E4%BB%A4/"/>
      <url>2020/07/17/k8s/docker%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><p>docker rm<br>docker rmi<br>docker pull<br>docker push<br>docker run</p><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br><span class="line">docker inspect $id</span><br><span class="line">docker stats $id</span><br><span class="line">docker top $id</span><br><span class="line"></span><br><span class="line">docker start $id</span><br><span class="line">docker stop $id</span><br><span class="line"></span><br><span class="line">docker exec -it $id bash</span><br><span class="line"></span><br><span class="line">docker kill --signal=1 $id</span><br><span class="line">docker rename $id {new_name}</span><br><span class="line">docker update --cpuset-cpus=0-3 $id</span><br><span class="line"></span><br><span class="line">docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]</span><br><span class="line">docker save -o target_image.tag.tar TARGET_IMAGE[:TAG]</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> k8s </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git</title>
      <link href="2020/06/23/git/"/>
      <url>2020/06/23/git/</url>
      
        <content type="html"><![CDATA[<h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><p>git commit –amend –no-edit</p><p>git tag<br>git tag v1.4<br>git tag -a v1.4 -m “my version 1.4” {commit_id}<br>git show v1.4<br>git push origin –delete <tagname></tagname></p><p>git log // 查找要删除的前一次提交的 commit_id<br>git rebase -i commit_id // 将 commit_id 替换成复制的值<br>git push origin HEAD –force // 强制推送到远端</p><h2 id="diff"><a href="#diff" class="headerlink" title="diff"></a>diff</h2><p><code>git diff v2.1.29 v2.1.29-updrdb --name-only | wc -l</code></p><h2 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h2><p><code>master$ git merge dev</code></p><ul><li>fast forward 不会创建新的commit</li><li>no fast forward 会创建新的commit</li><li>merge冲突 手动修改后commit</li></ul><h2 id="rebase"><a href="#rebase" class="headerlink" title="rebase"></a>rebase</h2><p><code>dev$ git rebase master</code></p><p>获取master最新修改，而不提交。rabase后未提交区内容基于最新master代码。</p><h2 id="交互rebase"><a href="#交互rebase" class="headerlink" title="交互rebase"></a>交互rebase</h2><p><code>master$ git rebase -i HEAD~3</code></p><p>默认pick。<br>修改为drop后移除对应commit，最后可push到仓库修改历史commit。<br>修改为squash将两个commit合并。</p><h2 id="reset"><a href="#reset" class="headerlink" title="reset"></a>reset</h2><p><code>dev$ git reset --soft HEAD~3</code></p><h3 id="soft"><a href="#soft" class="headerlink" title="soft"></a>soft</h3><p><code>master$ git reset --soft HEAD~3</code><br><code>master$ git status</code></p><p>HEAD指向HEAD~3，期间的提交保留在未commit区</p><h3 id="hard"><a href="#hard" class="headerlink" title="hard"></a>hard</h3><p><code>master$ git reset --soft HEAD~3</code><br><code>master$ git status</code></p><p>HEAD指向HEAD~3，期间的提交被回退</p><h2 id="revert"><a href="#revert" class="headerlink" title="revert"></a>revert</h2><p><code>dev$ git revert ec5be</code></p><p>将<strong>ec5be</strong>的修改还原，并创建新的未提交commit</p><h2 id="cherry-pick"><a href="#cherry-pick" class="headerlink" title="cherry-pick"></a>cherry-pick</h2><p><code>master$ git cherry-pick 76d12</code></p><p>从其他分支中整合某一次commit修改内容到当前分支</p><h2 id="reflog"><a href="#reflog" class="headerlink" title="reflog"></a>reflog</h2><p><code>master$ git reflog</code><br><code>master$ git reset HEAD@{1}</code><br><code>master$ git reflog</code></p><p>展示所有已执行git动作</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/132573100" title="" target="">动图展示10大Git命令</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s基础</title>
      <link href="2020/06/19/k8s/k8s%E5%9F%BA%E7%A1%80/"/>
      <url>2020/06/19/k8s/k8s%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="TODO-apiserver"><a href="#TODO-apiserver" class="headerlink" title="TODO apiserver"></a>TODO apiserver</h2><img src="/2020/06/19/k8s/k8s%E5%9F%BA%E7%A1%80/API-server-flow.png" class=""><img src="/2020/06/19/k8s/k8s%E5%9F%BA%E7%A1%80/API-server-storage-flow.png" class=""><p><a href="https://www.openshift.com/blog/kubernetes-deep-dive-api-server-part-1">https://www.openshift.com/blog/kubernetes-deep-dive-api-server-part-1</a></p><h2 id="调度"><a href="#调度" class="headerlink" title="调度"></a>调度</h2><p>有三种方式指定 Pod 只运行在指定的 Node 节点上</p><ul><li>nodeSelector：只调度到匹配指定 label 的 Node 上</li><li>nodeAffinity：功能更丰富的 Node 选择器，比如支持集合操作</li><li>podAffinity：调度到满足条件的 Pod 所在的 Node 上</li><li>Taints 和 tolerations：Taints 和 tolerations 用于保证 Pod 不被调度到不合适的 Node 上，其中 Taint 应用于 Node 上，而 toleration 则应用于 Pod 上</li><li>优先级调度</li></ul><h3 id="调度工作原理"><a href="#调度工作原理" class="headerlink" title="调度工作原理"></a>调度工作原理</h3><p>kube-scheduler 调度分为两个阶段，predicate 和 priority</p><ul><li>predicate：过滤不符合条件的节点</li><li>priority：优先级排序，选择优先级最高的节点</li></ul><p>代码入口：pkg/scheduler，cmd/kube-scheduler</p><h3 id="滚动扩容升级-TODO"><a href="#滚动扩容升级-TODO" class="headerlink" title="滚动扩容升级 TODO"></a>滚动扩容升级 TODO</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl scale --replicas=3 deployment/nginx-app</span><br><span class="line">kubectl rolling-update frontend-v1 frontend-v2 --image=image:v2</span><br><span class="line">kubectl rolling-update frontend-v1 frontend-v2 --rollback</span><br><span class="line">kubectl set image deployment/nginx-app nginx-app=nginx:1.9.1</span><br></pre></td></tr></tbody></table></figure><h2 id="Etcd，Zookeeper，Consul-比较"><a href="#Etcd，Zookeeper，Consul-比较" class="headerlink" title="Etcd，Zookeeper，Consul 比较"></a>Etcd，Zookeeper，Consul 比较</h2><p>Etcd 和 Zookeeper 提供的是分布式一致性存储能力，具体的业务场景需要用户自己实现，比如服务发现，比如配置变更。而 Consul 则以服务发现和配置变更为主要目标，同时附带了 kv 存储。</p><hr><h2 id="阿里云镜像加速"><a href="#阿里云镜像加速" class="headerlink" title="阿里云镜像加速"></a>阿里云镜像加速</h2><p><a href="https://cr.console.aliyun.com/cn/instances/images">https://cr.console.aliyun.com/cn/instances/images</a></p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li>node</li><li>pod</li><li>service<ul><li>NodePort</li></ul></li><li>Volume</li><li>Label</li><li>RC</li></ul><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><ul><li>etcd</li><li>APIServer</li><li>ControllerManager</li><li>Scheduler</li><li>Kubelet</li><li>Proxy</li></ul><h2 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h2><ul><li>申明式操作，分布式重复操作结果等幂，API接口命名描述期望如Service、Volume</li><li>互补可组合，高内聚松耦合</li><li>操作复杂度不应高于O(N)，满足水平伸缩性</li></ul><h2 id="kubectl"><a href="#kubectl" class="headerlink" title="kubectl"></a>kubectl</h2><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kubectl config set-credentials myself --username=admin --password=secret</span><br><span class="line">kubectl config set-cluster local-server --server=http://localhost:8080</span><br><span class="line">kubectl config set-context default-context --cluster=local-server --user=myself --namespace=default</span><br><span class="line">kubectl config use-context default-context</span><br><span class="line">kubectl config view</span><br></pre></td></tr></tbody></table></figure><h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><ul><li><code>journalctl -f -u kubelet.service</code></li><li>可用api: <code>kubectl api-resources</code></li><li>创建：<code>kubectl run &lt;name&gt; --image=&lt;image&gt;</code> 或者 <code>kubectl create -f manifest.yaml</code></li><li>查询：<code>kubectl get &lt;resource&gt;</code></li><li>更新 <code>kubectl set 或者 kubectl patch</code></li><li>删除：<code>kubectl delete &lt;resource&gt; &lt;name&gt;</code> 或者 <code>kubectl delete -f manifest.yaml</code></li><li>查询 <code>Pod IP：kubectl get pod &lt;pod-name&gt; -o jsonpath='{.status.podIP}'</code></li><li>容器内执行命令：<code>kubectl exec -ti &lt;pod-name&gt; sh</code></li><li>容器日志：<code>kubectl logs [-f] &lt;pod-name&gt;</code></li><li>导出服务：<code>kubectl expose deploy &lt;name&gt; --port=80</code></li><li>查看描述: <code>kubectl describe</code></li></ul><h3 id="命令自动补全"><a href="#命令自动补全" class="headerlink" title="命令自动补全"></a>命令自动补全</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">source /usr/share/bash-completion/bash_completion</span><br><span class="line">source &lt;(kubectl completion bash)</span><br></pre></td></tr></tbody></table></figure><h3 id="自定义输出列"><a href="#自定义输出列" class="headerlink" title="自定义输出列"></a>自定义输出列</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods --all-namespaces -o custom-columns=NS:.metadata.namespace,NAME:.metadata.name,"CPU(requests)":.spec.containers[*].resources.requests.cpu,"CPU(limits)":.spec.containers[*].resources.limits.cpu,"MEMORY(requests)":.spec.containers[*].resources.requests.memory,"MEMORY(limits)":.spec.containers[*].resources.limits.memory</span><br></pre></td></tr></tbody></table></figure><h3 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h3><p>kubectl port-forward</p><h2 id="Autoscaling"><a href="#Autoscaling" class="headerlink" title="Autoscaling"></a>Autoscaling</h2><p>kubectl run php-apache –image={阿里云镜像加速}/hpa-example –requests=cpu=200m –expose –port=80<br>kubectl autoscale deployment php-apache –cpu-percent=50 –min=1 –max=10<br>kubectl describe pod php-apach</p><p>kubectl delete svc php-apache<br>kubectl delete pod php-apache</p><ul><li><a href="https://kubernetes.feisky.xyz/concepts/objects/autoscaling" title="" target="">HPA</a></li></ul><h2 id="ConfigMap"><a href="#ConfigMap" class="headerlink" title="ConfigMap"></a>ConfigMap</h2><ul><li>设置环境变量</li><li>设置容器命令行参数</li><li>Volume中直接挂载文件或目录</li></ul><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">special-config</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">special.how:</span> <span class="string">very</span></span><br><span class="line">  <span class="attr">special.type:</span> <span class="string">charm</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">env-config</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">log_level:</span> <span class="string">INFO</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test-pod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test-container</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">      <span class="comment">#command: ["/bin/sh", "-c", "env"]</span></span><br><span class="line">      <span class="attr">command:</span> [<span class="string">"/bin/sh"</span>, <span class="string">"-c"</span>, <span class="string">"echo $(SPECIAL_LEVEL_KEY) $(SPECIAL_TYPE_KEY)"</span> ]</span><br><span class="line">      <span class="comment">#command: ["/bin/sh", "-c", "cat /etc/config/special.how"]</span></span><br><span class="line">      <span class="attr">volumeMounts:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config-volume</span></span><br><span class="line">        <span class="attr">mountPath:</span> <span class="string">/etc/config</span></span><br><span class="line">      <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">SPECIAL_LEVEL_KEY</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">configMapKeyRef:</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">special-config</span></span><br><span class="line">              <span class="attr">key:</span> <span class="string">special.how</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">SPECIAL_TYPE_KEY</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">configMapKeyRef:</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">special-config</span></span><br><span class="line">              <span class="attr">key:</span> <span class="string">special.type</span></span><br><span class="line">      <span class="attr">envFrom:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">configMapRef:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">env-config</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config-volume</span></span><br><span class="line">      <span class="attr">configMap:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">special-config</span></span><br><span class="line">  <span class="attr">restartPolicy:</span> <span class="string">Never</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f special-config.yaml</span><br><span class="line">kubectl create -f env-config.yaml</span><br><span class="line">kubectl create -f pod.yaml</span><br></pre></td></tr></tbody></table></figure><h2 id="CronJob"><a href="#CronJob" class="headerlink" title="CronJob"></a>CronJob</h2><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">batch/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">CronJob</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">hello</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">schedule:</span> <span class="string">"*/1 * * * *"</span></span><br><span class="line">  <span class="attr">jobTemplate:</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">template:</span></span><br><span class="line">        <span class="attr">spec:</span></span><br><span class="line">          <span class="attr">containers:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">hello</span></span><br><span class="line">            <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">            <span class="attr">args:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">/bin/sh</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">-c</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">date;</span> <span class="string">echo</span> <span class="string">Hello</span> <span class="string">from</span> <span class="string">the</span> <span class="string">Kubernetes</span> <span class="string">cluster</span></span><br><span class="line">          <span class="attr">restartPolicy:</span> <span class="string">OnFailure</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f cronjob.yaml</span><br><span class="line"></span><br><span class="line">kubectl get cronjob</span><br><span class="line">kubectl get jobs</span><br><span class="line">kubectl logs hello-1593447840-ns2z7</span><br><span class="line"></span><br><span class="line">kubectl delete cronjob hello</span><br></pre></td></tr></tbody></table></figure><h2 id="CustomResourceDefinition"><a href="#CustomResourceDefinition" class="headerlink" title="CustomResourceDefinition"></a>CustomResourceDefinition</h2><p>Kubernetes API扩展</p><h3 id="Finalizer"><a href="#Finalizer" class="headerlink" title="Finalizer"></a>Finalizer</h3><h3 id="Validation"><a href="#Validation" class="headerlink" title="Validation"></a>Validation</h3><h3 id="Subresources"><a href="#Subresources" class="headerlink" title="Subresources"></a>Subresources</h3><h3 id="Categories"><a href="#Categories" class="headerlink" title="Categories"></a>Categories</h3><h2 id="DaemonSet"><a href="#DaemonSet" class="headerlink" title="DaemonSet"></a>DaemonSet</h2><h3 id="滚动更新"><a href="#滚动更新" class="headerlink" title="滚动更新"></a>滚动更新</h3><ul><li>OnDelete：默认策略，更新模板后，只有手动删除了旧的 Pod 后才会创建新的 Pod</li><li>RollingUpdate：更新 DaemonSet 模版后，自动删除旧的 Pod 并创建新的 Pod</li></ul><h3 id="指定Node节点"><a href="#指定Node节点" class="headerlink" title="指定Node节点"></a>指定Node节点</h3><ul><li>nodeSelector</li><li>nodeAffinity</li><li>podAffinity</li></ul><h2 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h2><p>Pod和Replica Set的声明式定义</p><h3 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h3><p>kubectl scale deployment nginx-deployment –replicas 10</p><h3 id="自动扩展"><a href="#自动扩展" class="headerlink" title="自动扩展"></a>自动扩展</h3><p>kubectl autoscale deployment nginx-deployment –min=10 –max=15 –cpu-percent=80</p><h3 id="更新镜像"><a href="#更新镜像" class="headerlink" title="更新镜像"></a>更新镜像</h3><p>kubectl set image deployment/nginx-deployment nginx=nginx:1.9.1</p><h3 id="回滚"><a href="#回滚" class="headerlink" title="回滚"></a>回滚</h3><p>kubectl rollout undo deployment/nginx-deployment</p><h3 id="典型应用场景"><a href="#典型应用场景" class="headerlink" title="典型应用场景"></a>典型应用场景</h3><ul><li>定义Deployment来创建 Pod 和 ReplicaSet</li><li>滚动升级和回滚应用</li><li>扩容和缩容</li><li>暂停和继续Deployment</li></ul><blockquote><p>rs名字总是 <code>&lt;Deployment 的名字&gt;-&lt;pod template 的 hash 值 &gt;</code></p></blockquote><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">kubectl get deploy</span><br><span class="line">NAME               READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">nginx-deployment   1/1     1            1           10d</span><br><span class="line"></span><br><span class="line">kubectl get rs</span><br><span class="line">NAME                          DESIRED   CURRENT   READY   AGE</span><br><span class="line">nginx-deployment-678645bf77   1         1         1       24h</span><br><span class="line"></span><br><span class="line">kubectl get pods</span><br><span class="line">NAME                                READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx-deployment-678645bf77-zxbdq   1/1     Running   1          24h</span><br></pre></td></tr></tbody></table></figure><blockquote><p>更新</p></blockquote><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl set image deployment/nginx-deployment nginx=nginx:1.9.1</span><br><span class="line">kubectl rollout status/history deployment/nginx-deployment</span><br><span class="line">kubectl rollout undo deployment/nginx-deployment</span><br></pre></td></tr></tbody></table></figure><blockquote><p>扩容</p></blockquote><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl scale deployment nginx-deployment --replicas 10</span><br></pre></td></tr></tbody></table></figure><blockquote><p>暂停更新恢复</p></blockquote><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl rollout pause deployment/nginx-deployment</span><br><span class="line">kubectl set image deploy/nginx nginx=nginx:1.9.0</span><br><span class="line">kubectl rollout history deployment/nginx-deployment</span><br><span class="line">kubectl rollout resume deployment/nginx-deployment</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> k8s </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kubeadm上手</title>
      <link href="2020/06/15/k8s/kubeadm%E4%B8%8A%E6%89%8B/"/>
      <url>2020/06/15/k8s/kubeadm%E4%B8%8A%E6%89%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="组件安装"><a href="#组件安装" class="headerlink" title="组件安装"></a>组件安装</h2><h3 id="阿里yum源设置"><a href="#阿里yum源设置" class="headerlink" title="阿里yum源设置"></a>阿里yum源设置</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-8.repo</span><br></pre></td></tr></tbody></table></figure><h3 id="docker-ce安装"><a href="#docker-ce安装" class="headerlink" title="docker-ce安装"></a>docker-ce安装</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">yum list docker-ce.x86_64 --showduplicates | sort -r</span><br><span class="line"><span class="meta">#</span><span class="bash">yum -y install docker-ce-[VERSION]</span></span><br><span class="line">wget https://download.docker.com/linux/centos/7/x86_64/stable/Packages/containerd.io-1.2.13-3.2.el7.x86_64.rpm</span><br><span class="line">yum install -y containerd.io-1.2.13-3.2.el7.x86_64.rpm</span><br><span class="line">yum install -y docker-ce.x86_64</span><br><span class="line">systemctl start docker.service</span><br><span class="line">docker version</span><br></pre></td></tr></tbody></table></figure><h3 id="设置cgroup-driver为systemd"><a href="#设置cgroup-driver为systemd" class="headerlink" title="设置cgroup driver为systemd"></a>设置cgroup driver为systemd</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt; /etc/docker/daemon.json</span><br><span class="line">{</span><br><span class="line">  "exec-opts": ["native.cgroupdriver=systemd"]</span><br><span class="line">}</span><br><span class="line">EOF</span><br><span class="line">systemctl restart docker</span><br><span class="line">docker info | grep Cgroup</span><br></pre></td></tr></tbody></table></figure><h3 id="kubernetes安装"><a href="#kubernetes安装" class="headerlink" title="kubernetes安装"></a>kubernetes安装</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br><span class="line">yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes</span><br></pre></td></tr></tbody></table></figure><h3 id="kubeadm-init"><a href="#kubeadm-init" class="headerlink" title="kubeadm init"></a>kubeadm init</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 使用flannel网络必须设置cidr，网段自定</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --ignore-preflight-errors all 跳过之前已安装部分（出问题时，问题解决后加上继续运行）</span></span><br><span class="line">kubeadm init --image-repository=registry.aliyuncs.com/google_containers --apiserver-advertise-address=172.19.191.191 --service-cidr=10.1.0.0/16 --pod-network-cidr=10.96.0.0/16 --kubernetes-version=v1.18.3</span><br><span class="line"><span class="meta">#</span><span class="bash"> 根据init提示执行</span></span><br><span class="line">mkdir -p $HOME/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br></pre></td></tr></tbody></table></figure><h3 id="安装网络组件flannel"><a href="#安装网络组件flannel" class="headerlink" title="安装网络组件flannel"></a>安装网络组件flannel</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br><span class="line"><span class="meta">#</span><span class="bash">安装完flannel，将配置拷到node节点，否则添加节点之后状态不对</span></span><br><span class="line">scp -r /etc/cni root@{node}:/etc</span><br><span class="line"><span class="meta">#</span><span class="bash">这一步也要拷贝，否则节点看着正常，但是pod由于网络原因无法创建</span></span><br><span class="line">scp -r /run/flannel/ root@{node}:/run</span><br></pre></td></tr></tbody></table></figure><h2 id="nginx部署"><a href="#nginx部署" class="headerlink" title="nginx部署"></a>nginx部署</h2><p>nginx-deployment.yaml</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span> <span class="comment"># for versions before 1.9.0 use apps/v1beta2</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-deployment</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">2</span> <span class="comment"># tells deployment to run 2 pods matching the template</span></span><br><span class="line">  <span class="attr">template:</span> <span class="comment"># create pods using pod definition in this template</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="comment"># unlike pod-nginx.yaml, the name is not included in the meta data as a unique name is</span></span><br><span class="line">      <span class="comment"># generated from the deployment name</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span> <span class="comment">#或者使用Never，默认Always</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></tbody></table></figure><p>nginx-svc.yml</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-svc</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span> <span class="comment"># expose node port，不指定随机分配</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8080</span>  <span class="comment"># svc端口</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">80</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx</span><br><span class="line">kubectl create -f nginx-deployment.yaml</span><br><span class="line">kubectl apply -f nginx-svc.yaml</span><br><span class="line"></span><br><span class="line">kubectl get pods -o wide</span><br><span class="line">NAME                                READY   STATUS    RESTARTS   AGE   IP           NODE                      NOMINATED NODE   READINESS GATES</span><br><span class="line">nginx-deployment-558fc78868-fh5hg   1/1     Running   0          10m   10.96.0.15   izuf6h1cr4n27ctdyzruy1z   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">nginx-deployment-558fc78868-wrskf   1/1     Running   0          10m   10.96.0.16   izuf6h1cr4n27ctdyzruy1z   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br><span class="line">kubectl get svc</span><br><span class="line">NAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)          AGE</span><br><span class="line">kubernetes   ClusterIP   10.1.0.1     &lt;none&gt;        443/TCP          23h</span><br><span class="line">nginx-svc    NodePort    10.1.22.28   &lt;none&gt;        8080:30765/TCP   37m</span><br><span class="line"></span><br><span class="line">curl 10.96.0.15:80 # pod</span><br><span class="line">curl 10.96.0.16:80 # pod</span><br><span class="line">curl 10.1.22.28:8080 # 集群内</span><br><span class="line">curl 139.196.224.165:30765 # 集群外</span><br></pre></td></tr></tbody></table></figure><h2 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h2><h3 id="master节点不允许部署pod"><a href="#master节点不允许部署pod" class="headerlink" title="master节点不允许部署pod"></a>master节点不允许部署pod</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">kubectl describe pod nginx | tail -n 3</span><br><span class="line">  Type     Reason            Age                  From               Message</span><br><span class="line">  ----     ------            ----                 ----               -------</span><br><span class="line">  Warning  FailedScheduling  24s (x8 over 8m56s)  default-scheduler  0/1 nodes are available: 1 node(s) had taint {node-role.kubernetes.io/master: }, that the pod didn't tolerate.</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> k8s默认master node不允许部署pod，取消该限制</span></span><br><span class="line">kubectl taint nodes --all node-role.kubernetes.io/master-</span><br><span class="line"><span class="meta">#</span><span class="bash"> 还原命令</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> kubectl taint nodes k8s node-role.kubernetes.io/master=<span class="literal">true</span>:NoSchedule</span></span><br></pre></td></tr></tbody></table></figure><h3 id="cni0网卡已分配ip段与当前不一致"><a href="#cni0网卡已分配ip段与当前不一致" class="headerlink" title="cni0网卡已分配ip段与当前不一致"></a>cni0网卡已分配ip段与当前不一致</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods</span><br><span class="line">NAME    READY   STATUS              RESTARTS   AGE</span><br><span class="line">nginx   0/1     ContainerCreating   0          11m</span><br><span class="line"></span><br><span class="line">kubectl describe pod nginx | tail -n 1</span><br><span class="line">  Warning  FailedCreatePodSandBox  22s (x280 over 5m13s)   kubelet, izuf6h1cr4n27ctdyzruy1z  (combined from similar events): Failed to create pod sandbox: rpc error: code = Unknown desc = failed to set up sandbox container "053ca6b0dcd9801ddd6cbc6384e56e5b435ae6bacfeb96fe67f9347ca7d1aa38" network for pod "nginx": networkPlugin cni failed to set up pod "nginx_default" network: failed to set bridge addr: "cni0" already has an IP address different from 10.96.0.1/24</span><br><span class="line"></span><br><span class="line">ifconfig cni0</span><br><span class="line">cni0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1450</span><br><span class="line">        inet 10.244.0.1  netmask 255.255.255.0  broadcast 0.0.0.0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 确认无人使用，删除网卡，由pod自动重建</span></span><br><span class="line">ifconfig cni0 down</span><br><span class="line">ip link delete cni0</span><br><span class="line">ifconfig cni0</span><br><span class="line">cni0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1450</span><br><span class="line">        inet 10.96.0.1  netmask 255.255.255.0  broadcast 0.0.0.0</span><br></pre></td></tr></tbody></table></figure><h3 id="外网无法访问阿里云ECS，端口不通"><a href="#外网无法访问阿里云ECS，端口不通" class="headerlink" title="外网无法访问阿里云ECS，端口不通"></a>外网无法访问阿里云ECS，端口不通</h3><p>阿里云ECS默认安全组对入流量端口做限制，需手工添加端口策略</p>]]></content>
      
      
      <categories>
          
          <category> k8s </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go hashmap</title>
      <link href="2020/06/10/go/hashmap/"/>
      <url>2020/06/10/go/hashmap/</url>
      
        <content type="html"><![CDATA[<ul><li>hash0保存1个随机hash种子</li><li>每个桶保存8个k/v对</li><li>每个桶内存最后8位为指向下一个桶的指针</li><li>map创建时，若桶数量&gt;2^4，在extra中创建备用的溢出桶，与正常桶内存连续</li><li>插入时，若所有正常桶和溢出桶已满，使用extra中备用的next溢出桶插入key，并加到正常桶末尾的overflow指针中，调用typedmemmove内存拷贝key到桶内地址</li><li>扩容因子超过6.5，翻倍扩容</li><li>扩容因子未超过6.5，已有太多溢出桶，通常是不断插入元素后，一次delete删除所有元素，此时存在缓慢内存泄漏，采用等量扩容</li><li>扩容期间，使用oldbuckets提供查询，插入和删除操作会触发旧桶到新桶的分流，所有分流完成后清空旧桶</li></ul><img src="/2020/06/10/go/hashmap/hmap-and-buckets.png" class=""><img src="/2020/06/10/go/hashmap/overflow.jpg" class=""><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> hmap <span class="keyword">struct</span> {</span><br><span class="line">    count     <span class="keyword">int</span> <span class="comment">// 元素数量</span></span><br><span class="line">    flags     <span class="keyword">uint8</span>  <span class="comment">// 用于基本并发检测，抛出并发异常</span></span><br><span class="line">    B         <span class="keyword">uint8</span>  <span class="comment">// len(buckets) == 2^B</span></span><br><span class="line">    noverflow <span class="keyword">uint16</span></span><br><span class="line">    hash0     <span class="keyword">uint32</span> <span class="comment">// hash seed，fastrand()</span></span><br><span class="line"></span><br><span class="line">    buckets    unsafe.Pointer <span class="comment">// 当前buckets指针</span></span><br><span class="line">    oldbuckets unsafe.Pointer <span class="comment">// 扩容时保存旧buckets指针</span></span><br><span class="line">    nevacuate  <span class="keyword">uintptr</span>        <span class="comment">// progress counter for evacuation (buckets less than this have been evacuated)</span></span><br><span class="line"></span><br><span class="line">    extra *mapextra <span class="comment">// optional fields</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> mapextra <span class="keyword">struct</span> {</span><br><span class="line">    overflow    *[]*bmap</span><br><span class="line">    oldoverflow *[]*bmap</span><br><span class="line"></span><br><span class="line">    <span class="comment">// nextOverflow holds a pointer to a free overflow bucket.</span></span><br><span class="line">    nextOverflow *bmap</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1个桶保存8个k/v键值对</span></span><br><span class="line"><span class="keyword">type</span> bmap <span class="keyword">struct</span> {</span><br><span class="line">    tophash [bucketCnt]<span class="keyword">uint8</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    <span class="comment">// Maximum number of key/elem pairs a bucket can hold.</span></span><br><span class="line">    bucketCntBits = <span class="number">3</span></span><br><span class="line">    bucketCnt     = <span class="number">1</span> &lt;&lt; bucketCntBits</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><h2 id="冲突解决"><a href="#冲突解决" class="headerlink" title="冲突解决"></a>冲突解决</h2><ul><li>开放寻址法： 发生冲突时写入下一个不为空的位置，hash查询不匹配时顺序查找后面位置元素</li><li>链表/红黑树法： hash定位桶，每个桶为链表/红黑树</li></ul><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><blockquote><p>cmd/compile/internal/gc.maplit</p></blockquote><ul><li>字面变量</li><li>运行时make</li></ul><p>make流程：</p><ol><li>计算哈希占用的内存是否溢出或者超出能分配的最大值</li><li>调用 <strong>fastrand</strong> 获取一个随机的哈希种子</li><li>根据传入 hint 计算最小需要的桶的数量</li><li>创建用于保存桶的数组</li><li>1 桶数量&lt;2^4，不使用溢出桶，避免过度计算</li><li>2 桶数量&gt;=2^4，额外创建2^4-B个溢出桶，和正常buckets在内存中连续</li></ol><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v     := hash[key] <span class="comment">// =&gt; v     := *mapaccess1(maptype, hash, &amp;key)</span></span><br><span class="line">v, ok := hash[key] <span class="comment">// =&gt; v, ok := mapaccess2(maptype, hash, &amp;key)</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>NOTE: The returned pointer may keep the whole map live, so don’t hold onto it for very long.</p></blockquote><p>mapaccess1流程：</p><ol><li>高8位计算hash，与bmap的8个桶比较</li><li>循环遍历正常桶和溢出桶(内存连续)</li></ol><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// overflow指针指向下一个bmap</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *bmap)</span> <span class="title">overflow</span><span class="params">(t *maptype)</span> *<span class="title">bmap</span></span> {</span><br><span class="line">    <span class="keyword">return</span> *(**bmap)(add(unsafe.Pointer(b), <span class="keyword">uintptr</span>(t.bucketsize)-sys.PtrSize))</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>mapaccess2: 略</p><h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><p>m[k] = v，在compile阶段编译为runtime.mapassign获得v指针进行赋值</p><p>mapassign流程：</p><ol><li>根据key计算hash和桶</li><li>遍历正常桶和溢出桶，依次判断tophash和完整key</li><li>1 如果找到相同key，返回对应val地址</li><li>2 如果遍历到空key，说明没有相同key，在空key位置new新k/v对，返回val地址</li><li>3 如果所有桶已满，仍没找到相同key，从extra中取一个备用溢出桶加入正常桶末尾overflow指针。若所有备用溢出桶也用满，分配一个新bmap使用。</li></ol><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>逻辑同插入，将key设为emptyOne，略</p><h2 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h2><img src="/2020/06/10/go/hashmap/hashtable-evacuate-destination.png" class=""><p>扩容判断条件：</p><ol><li>装在因子超过6.5，翻倍扩容，通过mask将旧桶数据分流到2个新桶上</li><li>有太多溢出桶，等量扩容，evacDst结构体只会初始化1个，旧桶和新桶一对一</li></ol><p>扩容期间oldbuckets保存旧桶，查询使用oldbuckets，插入和删除会触发分流，在所有旧桶分流到新桶后，清空oldbuckets和oldoverflow</p><h2 id="JAVA-hashmap"><a href="#JAVA-hashmap" class="headerlink" title="JAVA hashmap"></a>JAVA hashmap</h2><p>TODO</p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go channel</title>
      <link href="2020/06/09/go/channel/"/>
      <url>2020/06/09/go/channel/</url>
      
        <content type="html"><![CDATA[<blockquote><p>channel底层使用ring buffer实现，通过sendx、recvx移动实现带缓存的chan，数据FIFO先入先出</p></blockquote><ul><li>dataqsiz=0表示同步chan，dataqsiz&gt;0表示异步chan</li><li>recvq / sendq其中之一必定为空，或两者都为空</li><li>qcount &gt; 0表示recvq为空</li><li>qcount &lt; dataqsiz表示sendq为空</li></ul><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> hchan <span class="keyword">struct</span> {</span><br><span class="line">    qcount   <span class="keyword">uint</span>           <span class="comment">// buffer中元素数量</span></span><br><span class="line">    dataqsiz <span class="keyword">uint</span>           <span class="comment">// make chan时候指定的buf大小</span></span><br><span class="line">    buf      unsafe.Pointer <span class="comment">// buffer</span></span><br><span class="line">    elemsize <span class="keyword">uint16</span>         <span class="comment">// 每个元素大小</span></span><br><span class="line">    elemtype *_type         <span class="comment">// 元素类型</span></span><br><span class="line">    closed   <span class="keyword">uint32</span>         <span class="comment">// chan是否已关闭，=0表示未关闭</span></span><br><span class="line">    sendx    <span class="keyword">uint</span>           <span class="comment">// send索引下标</span></span><br><span class="line">    recvx    <span class="keyword">uint</span>           <span class="comment">// recv索引下标</span></span><br><span class="line">    recvq    waitq          <span class="comment">// 接受等待队列，双向链表</span></span><br><span class="line">    sendq    waitq          <span class="comment">// 发送等待队列，双向链表</span></span><br><span class="line"></span><br><span class="line">    lock mutex</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>chansend流程：</p><ol><li>若recvq不为空，表示有等待的recv sudog，调用memmove进行数据拷贝，然后调用goready唤醒该recv sudug</li><li>若recvq为空</li><li>1 若qcount &lt; dataqsiz，表示当前chan还有缓存空间，调用memmove进行数据拷贝</li><li>2 若缓存空间满，将当前gp封装成sudog放入sendq队列，并进入休眠(在recv函数中进行数据拷贝，然后调用goready被唤醒)，唤醒后数据已被拷贝走，release释放sudog</li></ol><p>chanrecv流程：</p><ol><li>若sendq不为空，表示有等待的send sudog。若是同步chan，将send sudo拷贝到recv sudo；若是带缓存的chan，将缓存head元素传给recv sudo，将sendq取出元素传给缓存队尾，然后调用goready唤醒send sudug</li><li>若sendq为空</li><li>1 若创建时指定的buf大小&gt;0，且缓存中有数据，从缓存中取第一个元素传给recv sudo</li><li>2 若都不满足，进入recvq队列</li></ol><p>close流程：</p><ol><li>设置closed = 1</li><li>取出所有sendq和recvq中sudog，调用goready唤醒所有g</li></ol>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go 内存分配和对齐</title>
      <link href="2020/06/02/go/%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%92%8C%E5%AF%B9%E9%BD%90/"/>
      <url>2020/06/02/go/%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%92%8C%E5%AF%B9%E9%BD%90/</url>
      
        <content type="html"><![CDATA[<h2 id="栈内存"><a href="#栈内存" class="headerlink" title="栈内存"></a>栈内存</h2><ul><li><a href="https://www.bilibili.com/video/BV1WZ4y1p7JT" title="" target="">栈帧布局与函数跳转</a></li><li><a href="https://www.bilibili.com/video/BV1tZ4y1p7Rv" title="" target="">函数调用栈</a></li></ul><h2 id="内存对齐"><a href="#内存对齐" class="headerlink" title="内存对齐"></a>内存对齐</h2><ul><li>32位对齐：4</li><li>64位对齐：8</li></ul><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> T1 <span class="keyword">struct</span> {</span><br><span class="line">    a <span class="keyword">bool</span>  <span class="comment">// 占1B</span></span><br><span class="line">    b <span class="keyword">int32</span> <span class="comment">// 对齐为4，a后面需要3B padding，从第5B开始占4B</span></span><br><span class="line">    c <span class="keyword">int8</span></span><br><span class="line">    d <span class="keyword">int64</span></span><br><span class="line">    e <span class="keyword">byte</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T2 <span class="keyword">struct</span> {</span><br><span class="line">    e <span class="keyword">byte</span> <span class="comment">// 占1B</span></span><br><span class="line">    c <span class="keyword">int8</span> <span class="comment">// 占1B</span></span><br><span class="line">    a <span class="keyword">bool</span> <span class="comment">// 占1B</span></span><br><span class="line">    b <span class="keyword">int32</span> <span class="comment">// 对齐为4，a后面需1B padding，从第5B开始占4B</span></span><br><span class="line">    d <span class="keyword">int64</span> <span class="comment">// 对齐为8，无需padding，占8B</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">    fmt.Printf(<span class="string">"bool size: %d, align: %d\n"</span>, unsafe.Sizeof(<span class="keyword">bool</span>(<span class="literal">true</span>)), unsafe.Alignof(<span class="keyword">bool</span>(<span class="literal">true</span>)))</span><br><span class="line">    fmt.Printf(<span class="string">"int32 size: %d, align: %d\n"</span>, unsafe.Sizeof(<span class="keyword">int32</span>(<span class="number">0</span>)), unsafe.Alignof(<span class="keyword">int32</span>(<span class="number">0</span>)))</span><br><span class="line">    fmt.Printf(<span class="string">"int8 size: %d, align: %d\n"</span>, unsafe.Sizeof(<span class="keyword">int8</span>(<span class="number">0</span>)), unsafe.Alignof(<span class="keyword">int8</span>(<span class="number">0</span>)))</span><br><span class="line">    fmt.Printf(<span class="string">"int64 size: %d, align: %d\n"</span>, unsafe.Sizeof(<span class="keyword">int64</span>(<span class="number">0</span>)), unsafe.Alignof(<span class="keyword">int64</span>(<span class="number">0</span>)))</span><br><span class="line">    fmt.Printf(<span class="string">"byte size: %d, align: %d\n"</span>, unsafe.Sizeof(<span class="keyword">byte</span>(<span class="number">0</span>)), unsafe.Alignof(<span class="keyword">byte</span>(<span class="number">0</span>)))</span><br><span class="line">    fmt.Printf(<span class="string">"string size: %d, align: %d\n"</span>, unsafe.Sizeof(<span class="string">"EDDYCJY"</span>), unsafe.Alignof(<span class="string">"ABCD"</span>))</span><br><span class="line"></span><br><span class="line">    t1 := T1{}</span><br><span class="line">    t2 := T2{}</span><br><span class="line">    fmt.Printf(<span class="string">"T size: %d, align: %d\n"</span>, unsafe.Sizeof(t1), unsafe.Alignof(t1))</span><br><span class="line">    fmt.Printf(<span class="string">"T size: %d, align: %d\n"</span>, unsafe.Sizeof(t2), unsafe.Alignof(t2))</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight txt"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">bool size: 1, align: 1</span><br><span class="line">int32 size: 4, align: 4</span><br><span class="line">int8 size: 1, align: 1</span><br><span class="line">int64 size: 8, align: 8</span><br><span class="line">byte size: 1, align: 1</span><br><span class="line">string size: 16, align: 8</span><br><span class="line">T size: 32, align: 8</span><br><span class="line">T size: 16, align: 8</span><br></pre></td></tr></tbody></table></figure><h3 id="gctrace"><a href="#gctrace" class="headerlink" title="gctrace"></a>gctrace</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> GODEBUG=gctrace=1 go run <span class="built_in">test</span></span></span><br><span class="line">package test is not in GOROOT (/usr/local/Cellar/go/1.14/libexec/src/test)</span><br><span class="line">qiujirongdeMacBook-Air:test qiujirong$ GODEBUG=gctrace=1 go run test.go </span><br><span class="line">gc 1 @0.044s 5%: 0.020+3.8+0.070 ms clock, 0.083+7.0/3.6/0+0.28 ms cpu, 4-&gt;4-&gt;0 MB, 5 MB goal, 4 P</span><br><span class="line">gc 2 @0.112s 2%: 0.070+0.49+0.034 ms clock, 0.28+0.21/0.38/0.38+0.13 ms cpu, 4-&gt;4-&gt;0 MB, 5 MB goal, 4 P</span><br><span class="line">gc 3 @0.201s 1%: 0.026+1.0+0.038 ms clock, 0.10+0/0.42/1.7+0.15 ms cpu, 4-&gt;4-&gt;0 MB, 5 MB goal, 4 P</span><br><span class="line">gc 4 @0.311s 1%: 0.050+0.47+0.003 ms clock, 0.20+0.17/0.28/0.77+0.013 ms cpu, 4-&gt;4-&gt;0 MB, 5 MB goal, 4 P</span><br><span class="line">gc 5 @0.455s 0%: 0.070+4.2+0.009 ms clock, 0.28+0.85/3.6/1.3+0.036 ms cpu, 4-&gt;4-&gt;1 MB, 5 MB goal, 4 P</span><br><span class="line">gc 6 @0.496s 0%: 0.030+0.85+0.005 ms clock, 0.12+0/0.64/0.85+0.020 ms cpu, 4-&gt;4-&gt;0 MB, 5 MB goal, 4 P</span><br><span class="line">gc 7 @0.571s 0%: 0.025+0.87+0.022 ms clock, 0.10+0.86/0.62/0.58+0.091 ms cpu, 4-&gt;4-&gt;0 MB, 5 MB goal, 4 P</span><br><span class="line">gc 8 @0.590s 0%: 0.047+0.67+0.004 ms clock, 0.18+0.28/0.46/1.1+0.016 ms cpu, 4-&gt;4-&gt;0 MB, 5 MB goal, 4 P</span><br><span class="line"><span class="meta">#</span><span class="bash"> command-line-arguments</span></span><br><span class="line">gc 1 @0.031s 4%: 0.035+12+0.29 ms clock, 0.14+0.44/5.4/19+1.1 ms cpu, 4-&gt;5-&gt;4 MB, 5 MB goal, 4 P</span><br><span class="line"><span class="meta">#</span><span class="bash"> command-line-arguments</span></span><br><span class="line">gc 1 @0.002s 15%: 0.009+8.3+0.013 ms clock, 0.039+1.5/4.9/0.53+0.052 ms cpu, 5-&gt;6-&gt;6 MB, 6 MB goal, 4 P</span><br><span class="line">gc 2 @0.199s 1%: 0.007+8.6+0.039 ms clock, 0.029+0/6.8/13+0.15 ms cpu, 11-&gt;11-&gt;10 MB, 12 MB goal, 4 P</span><br><span class="line">gc 3 @0.447s 1%: 0.007+12+0.023 ms clock, 0.028+1.9/11/25+0.093 ms cpu, 22-&gt;22-&gt;20 MB, 23 MB goal, 4 P</span><br><span class="line">bool size: 1, align: 1</span><br><span class="line">int32 size: 4, align: 4</span><br><span class="line">int8 size: 1, align: 1</span><br><span class="line">int64 size: 8, align: 8</span><br><span class="line">byte size: 1, align: 1</span><br><span class="line">string size: 16, align: 8</span><br><span class="line">T size: 32, align: 8</span><br><span class="line">T size: 16, align: 8</span><br></pre></td></tr></tbody></table></figure><h2 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h2><h3 id="总线寻址"><a href="#总线寻址" class="headerlink" title="总线寻址"></a>总线寻址</h3><p>32位总线寻址范围最大 = 2的32次方 = 支持最大4G内存寻址<br>64为总线寻址范围最大 = 2的64次方</p><p>虚拟内存VMA(virtual memory address) -&gt; 物理地址(liner address)<br>虚拟内存划分为page，一般为4KB</p><p>内存碎片示例：</p><img src="/2020/06/02/go/%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%92%8C%E5%AF%B9%E9%BD%90/%E5%86%85%E5%AD%98%E7%A2%8E%E7%89%87%E7%A4%BA%E4%BE%8B.png" class=""><p>即使有足够内存页，由于不连续，无法满足p4内存分配，导致内存碎片</p><h3 id="内存结构"><a href="#内存结构" class="headerlink" title="内存结构"></a>内存结构</h3><p>go基于TCMalloc，将页划分为67个等级，页最小单位8K，定义在sizeclasses.go，大小从0～32K。通过定义常量数组，将内存分配时大小转换的时间复杂度降为O(1)<br>mspan是某个class页的集合，包含页起始地址、页数、页等级、已分配对象数等。mspan是一个双向链表。<br>每个P保存本地mcache，mcache是由2*67个mspan组成的数组，每个等级分为scan和noscan两种类型。为0～32K大小对象分配内存直接使用mcache池。<br>noscan类型的mspan上分配不包含指针的对象，在GC时这些对象无需遍历确认，可以直接释放回收。<br>mcentral是mspan的包装，每个mcentral包含1个mspan双向空链表和1个mspan双向非空链表，不同P请求同一个mcentral需要竞争锁。空链表包含没有空闲对象的mspan或缓存在mcache中的mspan，当mspan被释放时放进非空链表，非空链表包含至少有1个空闲对象的mspan。通过mcentral请求新mspan时，从非空链表取出mspan放入空链表。<br>arena结构是mspan的位图，目的是高效分配内存。1个arean大小为heapArenaBytes=64MB<br>mheap是全局内存对象，保存67个页等级的mcentral数组，每个级别的mcentral有自己的锁，因此P1申请2K的mspan和P2申请16K的mspan可以并行执行。</p><img src="/2020/06/02/go/%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%92%8C%E5%AF%B9%E9%BD%90/go-memory-detail.png" class=""><p>每个class的mspan含有的page数不同，具体见sizeclasses.go，比如：</p><ul><li>class 43的mspan用来分配4K大小的对象，含有1个8K page，共可以分配2个对象，全分配后内存可以全部用完</li><li>class 44的mspan用来分配4864B大小的对象，含有3个8K page，共可以分配5个对象，全分配后尾部有256B浪费</li></ul><p>mspan和mheap中的sweepgen用于标示span状态 TODO</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sweep generation:</span></span><br><span class="line"><span class="comment">// if sweepgen == h-&gt;sweepgen - 2, the span needs sweeping</span></span><br><span class="line"><span class="comment">// if sweepgen == h-&gt;sweepgen - 1, the span is currently being swept</span></span><br><span class="line"><span class="comment">// if sweepgen == h-&gt;sweepgen, the span is swept and ready to use</span></span><br><span class="line"><span class="comment">// if sweepgen == h-&gt;sweepgen + 1, the span was cached before sweep began and is still cached, and needs sweeping</span></span><br><span class="line"><span class="comment">// if sweepgen == h-&gt;sweepgen + 3, the span was swept and then cached and is still cached</span></span><br><span class="line"><span class="comment">// h-&gt;sweepgen is incremented by 2 after every GC</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> mSpanList <span class="keyword">struct</span> {</span><br><span class="line">    first *mspan <span class="comment">// first span in list, or nil if none</span></span><br><span class="line">    last  *mspan <span class="comment">// last span in list, or nil if none</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> mspan <span class="keyword">struct</span> {</span><br><span class="line">    next *mspan     <span class="comment">// next span in list, or nil if none</span></span><br><span class="line">    prev *mspan     <span class="comment">// previous span in list, or nil if none</span></span><br><span class="line">    startAddr <span class="keyword">uintptr</span> <span class="comment">// address of first byte of span aka s.base()</span></span><br><span class="line">    npages    <span class="keyword">uintptr</span> <span class="comment">// number of pages in span</span></span><br><span class="line">    allocCount  <span class="keyword">uint16</span>        <span class="comment">// number of allocated objects</span></span><br><span class="line">    sweepgen    <span class="keyword">uint32</span></span><br><span class="line">    spanclass   spanClass     <span class="comment">// size class and noscan (uint8)</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> mcentral <span class="keyword">struct</span> {</span><br><span class="line">    lock      mutex</span><br><span class="line">    spanclass spanClass</span><br><span class="line">    nonempty  mSpanList <span class="comment">// list of spans with a free object, ie a nonempty free list</span></span><br><span class="line">    empty     mSpanList <span class="comment">// list of spans with no free objects (or cached in an mcache)</span></span><br><span class="line"></span><br><span class="line">    nmalloc <span class="keyword">uint64</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> mheap <span class="keyword">struct</span> {</span><br><span class="line">    lock      mutex</span><br><span class="line">    pages     pageAlloc <span class="comment">// page allocation data structure</span></span><br><span class="line">    sweepgen  <span class="keyword">uint32</span></span><br><span class="line">    allspans []*mspan <span class="comment">// 所有2*67个mspan对象，通过锁实现并发</span></span><br><span class="line">    <span class="comment">// 67个mcentral</span></span><br><span class="line">    central [numSpanClasses]<span class="keyword">struct</span> {</span><br><span class="line">        mcentral mcentral</span><br><span class="line">        pad      [cpu.CacheLinePadSize - unsafe.Sizeof(mcentral{})%cpu.CacheLinePadSize]<span class="keyword">byte</span></span><br><span class="line">    }</span><br><span class="line">    ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="对象分配流程"><a href="#对象分配流程" class="headerlink" title="对象分配流程"></a>对象分配流程</h3><p>0值对象返回zerobase指针<br>小对象分配顺序：per-P本地mcache -&gt; mcentral -&gt; mheap -&gt; OS底层调用mmp<br>tiny对象优先从mspan.tiny分配<br>大对象直接从mheap分配</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mallocgc</span><span class="params">(size <span class="keyword">uintptr</span>, typ *_type, needzero <span class="keyword">bool</span>)</span> <span class="title">unsafe</span>.<span class="title">Pointer</span></span> {</span><br><span class="line">    <span class="keyword">if</span> size == <span class="number">0</span> {</span><br><span class="line">        <span class="keyword">return</span> unsafe.Pointer(&amp;zerobase)</span><br><span class="line">    }</span><br><span class="line">    c := getg().m.mcache</span><br><span class="line">    noscan := typ == <span class="literal">nil</span> || typ.ptrdata == <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> x unsafe.Pointer</span><br><span class="line">    <span class="keyword">if</span> size &lt;= maxSmallSize {</span><br><span class="line">        <span class="keyword">if</span> noscan &amp;&amp; size &lt; maxTinySize {</span><br><span class="line">            <span class="comment">// &lt;16B，Tiny allocator</span></span><br><span class="line">            <span class="keyword">if</span> off+size &lt;= maxTinySize &amp;&amp; c.tiny != <span class="number">0</span> {</span><br><span class="line">                <span class="comment">// The object fits into existing tiny block.</span></span><br><span class="line">                x = unsafe.Pointer(c.tiny + off)]</span><br><span class="line">                <span class="keyword">return</span> x</span><br><span class="line">            }</span><br><span class="line">            span := c.alloc[tinySpanClass]</span><br><span class="line">            v := nextFreeFast(span)</span><br><span class="line">            <span class="keyword">if</span> v == <span class="number">0</span> {</span><br><span class="line">                v, _, shouldhelpgc = c.nextFree(tinySpanClass)</span><br><span class="line">            }</span><br><span class="line">            x = unsafe.Pointer(v)</span><br><span class="line">            <span class="keyword">if</span> size &lt; c.tinyoffset || c.tiny == <span class="number">0</span> {</span><br><span class="line">                c.tiny = <span class="keyword">uintptr</span>(x)</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="comment">// 16B~32K之间</span></span><br><span class="line">            spc := makeSpanClass(sizeclass, noscan)</span><br><span class="line">            span := c.alloc[spc]</span><br><span class="line">            v := nextFreeFast(span)</span><br><span class="line">            <span class="keyword">if</span> v == <span class="number">0</span> {</span><br><span class="line">                v, span, shouldhelpgc = c.nextFree(spc)</span><br><span class="line">            }</span><br><span class="line">            x = unsafe.Pointer(v)</span><br><span class="line">        }</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="comment">// &gt; 32K，大对象</span></span><br><span class="line">        <span class="keyword">var</span> s *mspan</span><br><span class="line">        systemstack(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> {</span><br><span class="line">            s = largeAlloc(size, needzero, noscan)</span><br><span class="line">        })</span><br><span class="line">        x = unsafe.Pointer(s.base())</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol><li>从per-P的本地mcache，根据class和是否有指针分配对象</li><li>若本地相应class的mcache对象已满，调用mspan.refill从mheap相应class的central申请，需加解锁</li><li>1 从非空链表(至少有一个空闲对象)取出mspan，插入空链表，若该mspan需要sweep执行sweep</li><li>2 从空链表(没有空闲对象或在mcache中)取出状态为需sweep的mspan并执行sweep</li><li>若相应class的central满，调用central.grow从mheap获取mspan，放入空链表，从中分配对象</li><li>若mheap内存满，调用mheap.grow，从os申请内存，底层调用mmp</li></ol><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *mcache)</span> <span class="title">nextFree</span><span class="params">(spc spanClass)</span> <span class="params">(v gclinkptr, s *mspan, shouldhelpgc <span class="keyword">bool</span>)</span></span> {</span><br><span class="line">    s = c.alloc[spc]</span><br><span class="line">    freeIndex := s.nextFreeIndex()</span><br><span class="line">    <span class="keyword">if</span> freeIndex == s.nelems {</span><br><span class="line">        <span class="comment">// The span is full.</span></span><br><span class="line">        c.refill(spc)</span><br><span class="line">        s = c.alloc[spc]</span><br><span class="line">    }</span><br><span class="line">    s.allocCount++</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *mcache)</span> <span class="title">refill</span><span class="params">(spc spanClass)</span></span> {</span><br><span class="line">    s := c.alloc[spc]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> s != &amp;emptymspan {</span><br><span class="line">        <span class="comment">// Mark this span as no longer cached.</span></span><br><span class="line">        atomic.Store(&amp;s.sweepgen, mheap_.sweepgen)</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// Get a new cached span from the central lists.</span></span><br><span class="line">    s = mheap_.central[spc].mcentral.cacheSpan()</span><br><span class="line">    <span class="keyword">if</span> s == <span class="literal">nil</span> {</span><br><span class="line">        throw(<span class="string">"out of memory"</span>)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Indicate that this span is cached and prevent asynchronous</span></span><br><span class="line">    <span class="comment">// sweeping in the next sweep phase.</span></span><br><span class="line">    s.sweepgen = mheap_.sweepgen + <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    c.alloc[spc] = s</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// Allocate a span to use in an mcache.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *mcentral)</span> <span class="title">cacheSpan</span><span class="params">()</span> *<span class="title">mspan</span></span> {</span><br><span class="line">    lock(&amp;c.lock)</span><br><span class="line">    sg := mheap_.sweepgen</span><br><span class="line">retry:</span><br><span class="line">    <span class="keyword">var</span> s *mspan</span><br><span class="line">    <span class="keyword">for</span> s = c.nonempty.first; s != <span class="literal">nil</span>; s = s.next {</span><br><span class="line">        <span class="keyword">if</span> s.sweepgen == sg<span class="number">-2</span> &amp;&amp; atomic.Cas(&amp;s.sweepgen, sg<span class="number">-2</span>, sg<span class="number">-1</span>) {</span><br><span class="line">            c.nonempty.remove(s)</span><br><span class="line">            c.empty.insertBack(s)</span><br><span class="line">            unlock(&amp;c.lock)</span><br><span class="line">            s.sweep(<span class="literal">true</span>)</span><br><span class="line">            <span class="keyword">goto</span> havespan</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> s.sweepgen == sg<span class="number">-1</span> {</span><br><span class="line">            <span class="comment">// the span is being swept by background sweeper, skip</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// we have a nonempty span that does not require sweeping, allocate from it</span></span><br><span class="line">        c.nonempty.remove(s)</span><br><span class="line">        c.empty.insertBack(s)</span><br><span class="line">        unlock(&amp;c.lock)</span><br><span class="line">        <span class="keyword">goto</span> havespan</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> s = c.empty.first; s != <span class="literal">nil</span>; s = s.next {</span><br><span class="line">        <span class="keyword">if</span> s.sweepgen == sg<span class="number">-2</span> &amp;&amp; atomic.Cas(&amp;s.sweepgen, sg<span class="number">-2</span>, sg<span class="number">-1</span>) {</span><br><span class="line">            <span class="comment">// we have an empty span that requires sweeping,</span></span><br><span class="line">            <span class="comment">// sweep it and see if we can free some space in it</span></span><br><span class="line">            c.empty.remove(s)</span><br><span class="line">            <span class="comment">// swept spans are at the end of the list</span></span><br><span class="line">            c.empty.insertBack(s)</span><br><span class="line">            unlock(&amp;c.lock)</span><br><span class="line">            s.sweep(<span class="literal">true</span>)</span><br><span class="line">            freeIndex := s.nextFreeIndex()</span><br><span class="line">            <span class="keyword">if</span> freeIndex != s.nelems {</span><br><span class="line">                s.freeindex = freeIndex</span><br><span class="line">                <span class="keyword">goto</span> havespan</span><br><span class="line">            }</span><br><span class="line">            lock(&amp;c.lock)</span><br><span class="line">            <span class="comment">// the span is still empty after sweep</span></span><br><span class="line">            <span class="comment">// it is already in the empty list, so just retry</span></span><br><span class="line">            <span class="keyword">goto</span> retry</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> s.sweepgen == sg<span class="number">-1</span> {</span><br><span class="line">            <span class="comment">// the span is being swept by background sweeper, skip</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// already swept empty span,</span></span><br><span class="line">        <span class="comment">// all subsequent ones must also be either swept or in process of sweeping</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    }</span><br><span class="line">    unlock(&amp;c.lock)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Replenish central list if empty.</span></span><br><span class="line">    s = c.grow()</span><br><span class="line">    <span class="keyword">if</span> s == <span class="literal">nil</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    }</span><br><span class="line">    lock(&amp;c.lock)</span><br><span class="line">    c.empty.insertBack(s)</span><br><span class="line">    unlock(&amp;c.lock)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// At this point s is a non-empty span, queued at the end of the empty list,</span></span><br><span class="line">havespan:</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="对象回收流程"><a href="#对象回收流程" class="headerlink" title="对象回收流程"></a>对象回收流程</h3><ol><li>大对象的mspan中对象全部释放时，mspan归还给mheap</li><li>小对象的mspan从空链表移到非空链表，供mcentral.cacheSpan中获取mspan；如果mspan中对象全部释放，直接归还到mheap</li></ol><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *mspan)</span> <span class="title">sweep</span><span class="params">(preserve <span class="keyword">bool</span>)</span> <span class="title">bool</span></span> {</span><br><span class="line">    <span class="comment">// 有对象释放&amp;&amp;小对象</span></span><br><span class="line">    <span class="keyword">if</span> nfreed &gt; <span class="number">0</span> &amp;&amp; spc.sizeclass() != <span class="number">0</span> {</span><br><span class="line">        res = mheap_.central[spc].mcentral.freeSpan(s, preserve, wasempty)</span><br><span class="line">        <span class="comment">// 大对象&amp;&amp;全部释放</span></span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> freeToHeap {</span><br><span class="line">        <span class="comment">// Free large span to heap</span></span><br><span class="line">        mheap_.freeSpan(s)</span><br><span class="line">        res = <span class="literal">true</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> !res {</span><br><span class="line">        <span class="comment">// The span has been swept and is still in-use, so put it on the swept in-use list.</span></span><br><span class="line">        mheap_.sweepSpans[sweepgen/<span class="number">2</span>%<span class="number">2</span>].push(s)</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *mcentral)</span> <span class="title">freeSpan</span><span class="params">(s *mspan, preserve <span class="keyword">bool</span>, wasempty <span class="keyword">bool</span>)</span> <span class="title">bool</span></span> {</span><br><span class="line">    lock(&amp;c.lock)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> wasempty {</span><br><span class="line">        c.empty.remove(s)</span><br><span class="line">        c.nonempty.insert(s)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    atomic.Store(&amp;s.sweepgen, mheap_.sweepgen)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> s.allocCount != <span class="number">0</span> {</span><br><span class="line">        unlock(&amp;c.lock)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    c.nonempty.remove(s)</span><br><span class="line">    unlock(&amp;c.lock)</span><br><span class="line">    mheap_.freeSpan(s)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="GC"><a href="#GC" class="headerlink" title="GC"></a>GC</h3><p><strong>gcpercent</strong>通过环境变量<code>GOGC</code>设置，用于控制GC速度，若无环境变量默认100%，若环境变量为”off”，会关闭2分钟1次的强制GC<br>函数<code>gcSetTriggerRatio</code>根据当次GC的速度调整下一次GC的速度，初始速度7/8，最小0.6，最大0.95。计算方式如下：</p><blockquote><p>mark phase阈值： float64(memstats.heap_marked) * (1 + triggerRatio)，如果有p正在sweep需求更大内存，自动上调<br>next GC阈值： memstats.heap_marked + memstats.heap_marked*uint64(gcpercent)/100，内存扩大一倍启动GC，若小于mark phase阈值自动上调</p></blockquote><p>GC通过以下逻辑触发：</p><ol><li>heap上涨触发了GC，每次分配对象需要新申请mspan，触发sweep后，最后会调用<strong>test</strong>判断是到达heap阈值否需要GC</li><li>在sysmon的每一次调度中，都会调用<strong>test</strong>判断距离上一次GC是否超过2分钟达到强制GC阈值</li><li><code>gcTriggerCycle</code>为runtime.GC()手动调用GC case</li></ol><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t gcTrigger)</span> <span class="title">test</span><span class="params">()</span> <span class="title">bool</span></span> {</span><br><span class="line">    <span class="keyword">if</span> !memstats.enablegc || panicking != <span class="number">0</span> || gcphase != _GCoff {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">switch</span> t.kind {</span><br><span class="line">    <span class="keyword">case</span> gcTriggerHeap:</span><br><span class="line">        <span class="keyword">return</span> memstats.heap_live &gt;= memstats.gc_trigger</span><br><span class="line">    <span class="keyword">case</span> gcTriggerTime:</span><br><span class="line">        <span class="keyword">if</span> gcpercent &lt; <span class="number">0</span> {</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        }</span><br><span class="line">        lastgc := <span class="keyword">int64</span>(atomic.Load64(&amp;memstats.last_gc_nanotime))</span><br><span class="line">        <span class="keyword">return</span> lastgc != <span class="number">0</span> &amp;&amp; t.now-lastgc &gt; forcegcperiod</span><br><span class="line">    <span class="keyword">case</span> gcTriggerCycle:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">int32</span>(t.n-work.cycles) &gt; <span class="number">0</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>三色标记法：</p><ul><li>灰色：对象已标记，但这个对象包含的子对象未标记</li><li>黑色：对象已标记，且这个对象包含的子对象也已标记，gcmarkBits对应的位为1（该对象不会在本次GC中被清理）</li><li>白色：对象未标记，gcmarkBits对应的位为0（该对象将会在本次GC中被清理）</li></ul><img src="/2020/06/02/go/%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%92%8C%E5%AF%B9%E9%BD%90/mspan_gc.jpg" class=""><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> mspan <span class="keyword">struct</span> {</span><br><span class="line">    allocBits  *gcBits</span><br><span class="line">    gcmarkBits *gcBits</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>第一阶段：</p><ol><li>每个P启动一个goroutine，进入park，用于第二阶段调用gcDrain消费gcw</li><li>初始reset为白色，stop the world，完成未完成的sweep</li><li>启动gc write barriers，初始化root节点的扫描工作任务，在第二阶段中循环所有root节点执行<code>markroot</code></li><li>对p.mcache和p.tiny标记灰色</li><li>start the world</li></ol><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">gcStart</span><span class="params">(trigger gcTrigger)</span></span> {</span><br><span class="line">    gcBgMarkStartWorkers() <span class="comment">// 每个P启动一个goroutine，进入park，用于第二阶段调用gcDrain消费gcw</span></span><br><span class="line"></span><br><span class="line">    systemstack(gcResetMarkState) <span class="comment">// 初始reset为白色</span></span><br><span class="line"></span><br><span class="line">    systemstack(stopTheWorldWithSema) <span class="comment">// stop the world</span></span><br><span class="line">    systemstack(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> {</span><br><span class="line">        finishsweep_m()</span><br><span class="line">    })</span><br><span class="line"></span><br><span class="line">    setGCPhase(_GCmark) <span class="comment">// 启动gc write barriers</span></span><br><span class="line"></span><br><span class="line">    gcBgMarkPrepare() <span class="comment">// Must happen before assist enable.</span></span><br><span class="line">    gcMarkRootPrepare() <span class="comment">// 计算work.markrootJobs</span></span><br><span class="line"></span><br><span class="line">    gcMarkTinyAllocs() <span class="comment">// 对p.mcache和p.tiny标记灰色</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Concurrent mark.</span></span><br><span class="line">    systemstack(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> {</span><br><span class="line">        now = startTheWorldWithSema(trace.enabled) <span class="comment">// start the world</span></span><br><span class="line">    })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>第二阶段：</p><ol><li><code>markroot</code>对所有root节点做标记，包含几个特殊任务随机分配给p执行，比如：释放全局<code>sched.gFree.stack</code>的栈，该队列保存有栈的dead G，释放栈后放入全局<code>sched.gFree.noStack</code></li><li>1 默认每个p扫描自己的栈上引用对象，包括栈上的defer链表。若为noscan对象直接标记黑色，否则根据对象引用进行标记。</li></ol><p>第三阶段：</p><p><code>gcMarkDone</code>先stop the world，将写屏障记录的所有修改的指针加入到标记队列，完成后start the world</p><p>第四阶段：</p><p><code>gcSweep</code>释放内存</p><p>GC停顿时间主要在第一阶段和第三阶段，第二阶段为和用户代码并行执行。第一次停顿用于扫描root节点，第二次停顿用于追加写屏障中记录。GC停顿时间主要消耗为root节点数量，和heap总大小无直接关系。</p><p>举个栗子：</p><img src="/2020/06/02/go/%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%92%8C%E5%AF%B9%E9%BD%90/%E4%B8%89%E8%89%B2%E6%A0%87%E8%AE%B0.jpg" class=""><ol><li>初始状态下所有对象都是白色的。</li><li>接着开始扫描根对象a、b; 由于根对象引用了对象A、B,那么A、B变为灰色对象，接下来就开始分析灰色对象，分析A时，A没有引用其他对象很快就转入黑色，B引用了D，则B转入黑色的同时还需要将D转为灰色，进行接下来的分析。</li><li>灰色对象只有D，由于D没有引用其他对象，所以D转入黑色。标记过程结束</li><li>最终，黑色的对象会被保留下来，白色对象会被回收掉。</li></ol><p>每个p有写屏障buf，用于避免第二阶段中用户代码修改引用导致gc漏标记。</p><h2 id="TODO-版本差异"><a href="#TODO-版本差异" class="headerlink" title="TODO 版本差异"></a>TODO 版本差异</h2><h2 id="TODO-JAVA"><a href="#TODO-JAVA" class="headerlink" title="TODO JAVA"></a>TODO JAVA</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://tonybai.com/2020/02/20/a-visual-guide-to-golang-memory-allocator-from-ground-up/" title="" target="">图解Go内存分配器</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go mutex</title>
      <link href="2020/05/27/go/mutex/"/>
      <url>2020/05/27/go/mutex/</url>
      
        <content type="html"><![CDATA[<h2 id="mutex"><a href="#mutex" class="headerlink" title="mutex"></a>mutex</h2><ul><li>并发模型中，可能存在N个g同时竞争1个锁对象</li><li>mutexWaiterShift用于计数锁等待g数量，使用sudog结构保存在semaRoot的平衡树的叶子中</li><li>semaRoot平衡树的叶子保存每一个unique sema，一个mutex对象的sema只保存在一个叶子中，使用<strong>单向FIFO链表</strong>形式保存竞争该sema的所有sudog</li><li>若没有spin机制，锁一旦释放，当前运行g会更大概率得到锁。若锁的时间很短，没有spin机制的情况下得不到锁的g都需要休眠park，会增加调度开销，存在长尾</li><li>在默认模式下，所有g都会先spin，waiter计数，然后插入链表尾并进入休眠，底层调用park函数</li><li>解锁后从FIFO链表头唤醒1个g，若该g等待时间&gt;1ms会尝试进入饥饿模式，此时仍可能有新g竞争锁。每次循环都会尝试CAS state到饥饿模式，若CAS失败会直接插入链表头，下次第一个被唤醒。</li><li>进入饥饿模式后，所有新g竞争时不会spin也不会尝试加锁，直接插入链表尾。每次解锁后从链表头唤醒1个g消费锁，若该g等待时间不超过1ms，退出饥饿模式。</li></ul><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Mutex <span class="keyword">struct</span> {</span><br><span class="line">state <span class="keyword">int32</span></span><br><span class="line">sema  <span class="keyword">uint32</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">mutexLocked = <span class="number">1</span> &lt;&lt; <span class="literal">iota</span> <span class="comment">// 0001</span></span><br><span class="line">mutexWoken              <span class="comment">// 0010</span></span><br><span class="line">mutexStarving           <span class="comment">// 0100</span></span><br><span class="line">mutexWaiterShift = <span class="literal">iota</span> <span class="comment">// 0011</span></span><br><span class="line"></span><br><span class="line">starvationThresholdNs = <span class="number">1e6</span> <span class="comment">// 超过1ms进入饥饿模式</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Mutex)</span> <span class="title">Lock</span><span class="params">()</span></span> {</span><br><span class="line"><span class="keyword">if</span> atomic.CompareAndSwapInt32(&amp;m.state, <span class="number">0</span>, mutexLocked) {</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">m.lockSlow()</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Mutex)</span> <span class="title">lockSlow</span><span class="params">()</span></span> {</span><br><span class="line"><span class="keyword">var</span> waitStartTime <span class="keyword">int64</span></span><br><span class="line">starving := <span class="literal">false</span></span><br><span class="line">awoke := <span class="literal">false</span></span><br><span class="line">iter := <span class="number">0</span></span><br><span class="line">old := m.state</span><br><span class="line"><span class="keyword">for</span> {</span><br><span class="line"><span class="comment">// 判断是否为饥饿模式</span></span><br><span class="line"><span class="keyword">if</span> old&amp;(mutexLocked|mutexStarving) == mutexLocked &amp;&amp; runtime_canSpin(iter) {</span><br><span class="line"><span class="comment">// 如果未设置awoke且waiter计数&gt;0，说明其他m在等待锁，cas设置awoke</span></span><br><span class="line"><span class="keyword">if</span> !awoke &amp;&amp; old&amp;mutexWoken == <span class="number">0</span> &amp;&amp; old&gt;&gt;mutexWaiterShift != <span class="number">0</span> &amp;&amp;</span><br><span class="line">atomic.CompareAndSwapInt32(&amp;m.state, old, old|mutexWoken) {</span><br><span class="line">awoke = <span class="literal">true</span></span><br><span class="line">}</span><br><span class="line">runtime_doSpin() <span class="comment">// 自旋30次</span></span><br><span class="line">iter++</span><br><span class="line">old = m.state</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">}</span><br><span class="line"><span class="built_in">new</span> := old</span><br><span class="line"><span class="comment">// 非starving模式，设置new的locked</span></span><br><span class="line"><span class="keyword">if</span> old&amp;mutexStarving == <span class="number">0</span> {</span><br><span class="line"><span class="built_in">new</span> |= mutexLocked</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 已上锁或饥饿状态，waiter计数+1</span></span><br><span class="line"><span class="keyword">if</span> old&amp;(mutexLocked|mutexStarving) != <span class="number">0</span> {</span><br><span class="line"><span class="built_in">new</span> += <span class="number">1</span> &lt;&lt; mutexWaiterShift</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 处于饥饿模式并且已上锁，将starving置1</span></span><br><span class="line"><span class="keyword">if</span> starving &amp;&amp; old&amp;mutexLocked != <span class="number">0</span> {</span><br><span class="line"><span class="built_in">new</span> |= mutexStarving</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> awoke {</span><br><span class="line"><span class="built_in">new</span> &amp;^= mutexWoken <span class="comment">// 如果当前g是被唤醒的，清除woken</span></span><br><span class="line">}</span><br><span class="line"><span class="comment">// 如果state!=old，说明有其他g抢锁，重新进入for循环</span></span><br><span class="line"><span class="keyword">if</span> atomic.CompareAndSwapInt32(&amp;m.state, old, <span class="built_in">new</span>) {</span><br><span class="line"><span class="comment">// 如果old没上锁且是普通模式，抢锁成功，退出</span></span><br><span class="line"><span class="keyword">if</span> old&amp;(mutexLocked|mutexStarving) == <span class="number">0</span> {</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">}</span><br><span class="line">queueLifo := waitStartTime != <span class="number">0</span> <span class="comment">// 第一次循环固定false</span></span><br><span class="line"><span class="keyword">if</span> waitStartTime == <span class="number">0</span> {</span><br><span class="line">waitStartTime = runtime_nanotime()</span><br><span class="line">}</span><br><span class="line">runtime_SemacquireMutex(&amp;m.sema, queueLifo, <span class="number">1</span>)</span><br><span class="line">starving = starving || runtime_nanotime()-waitStartTime &gt; starvationThresholdNs</span><br><span class="line">old = m.state</span><br><span class="line"><span class="keyword">if</span> old&amp;mutexStarving != <span class="number">0</span> {</span><br><span class="line">delta := <span class="keyword">int32</span>(mutexLocked - <span class="number">1</span>&lt;&lt;mutexWaiterShift)</span><br><span class="line"><span class="comment">// 如果在饥饿模式并且自己是最后一个，清除starving标示</span></span><br><span class="line"><span class="keyword">if</span> !starving || old&gt;&gt;mutexWaiterShift == <span class="number">1</span> {</span><br><span class="line">delta -= mutexStarving</span><br><span class="line">}</span><br><span class="line">atomic.AddInt32(&amp;m.state, delta)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">}</span><br><span class="line">awoke = <span class="literal">true</span></span><br><span class="line">iter = <span class="number">0</span></span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">old = m.state</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>是否自旋判断逻辑：</p><ol><li>未超过4次for循环</li><li>多核且有其他running p</li><li>本地g队列为空</li></ol><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sync_runtime_canSpin</span><span class="params">(i <span class="keyword">int</span>)</span> <span class="title">bool</span></span> {</span><br><span class="line"><span class="keyword">if</span> i &gt;= active_spin || ncpu &lt;= <span class="number">1</span> || gomaxprocs &lt;= <span class="keyword">int32</span>(sched.npidle+sched.nmspinning)+<span class="number">1</span> {</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> p := getg().m.p.ptr(); !runqempty(p) {</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="sema"><a href="#sema" class="headerlink" title="sema"></a>sema</h3><p>略</p><h2 id="rwmutex"><a href="#rwmutex" class="headerlink" title="rwmutex"></a>rwmutex</h2><ul><li>Mutex： w之间加解锁</li><li>writerSem： w叶的FIFO链表</li><li>readerSem： r叶的FIFO链表</li><li>readerCount： r计数，w加锁时给r设置大负数阻塞r</li><li>readerWait： w加锁时已有r的计数，在最后一个r解锁后FIFO唤醒w</li></ul><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> RWMutex <span class="keyword">struct</span> {</span><br><span class="line">w           Mutex  <span class="comment">// held if there are pending writers</span></span><br><span class="line">writerSem   <span class="keyword">uint32</span> <span class="comment">// semaphore for writers to wait for completing readers</span></span><br><span class="line">readerSem   <span class="keyword">uint32</span> <span class="comment">// semaphore for readers to wait for completing writers</span></span><br><span class="line">readerCount <span class="keyword">int32</span>  <span class="comment">// number of pending readers</span></span><br><span class="line">readerWait  <span class="keyword">int32</span>  <span class="comment">// number of departing readers</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rwmutexMaxReaders = <span class="number">1</span> &lt;&lt; <span class="number">30</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(rw *RWMutex)</span> <span class="title">RLock</span><span class="params">()</span></span> {</span><br><span class="line"><span class="keyword">if</span> atomic.AddInt32(&amp;rw.readerCount, <span class="number">1</span>) &lt; <span class="number">0</span> {</span><br><span class="line"><span class="comment">// readerSem叶链表尾=当前g</span></span><br><span class="line">runtime_SemacquireMutex(&amp;rw.readerSem, <span class="literal">false</span>, <span class="number">0</span>)</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(rw *RWMutex)</span> <span class="title">RUnlock</span><span class="params">()</span></span> {</span><br><span class="line"><span class="keyword">if</span> r := atomic.AddInt32(&amp;rw.readerCount, <span class="number">-1</span>); r &lt; <span class="number">0</span> {</span><br><span class="line"><span class="comment">// 有w在等锁</span></span><br><span class="line">rw.rUnlockSlow(r)</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(rw *RWMutex)</span> <span class="title">rUnlockSlow</span><span class="params">(r <span class="keyword">int32</span>)</span></span> {</span><br><span class="line"><span class="keyword">if</span> atomic.AddInt32(&amp;rw.readerWait, <span class="number">-1</span>) == <span class="number">0</span> {</span><br><span class="line"><span class="comment">// 最后一个r锁释放，从writerSem叶链表头唤醒等待的w锁</span></span><br><span class="line">runtime_Semrelease(&amp;rw.writerSem, <span class="literal">false</span>, <span class="number">1</span>)</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(rw *RWMutex)</span> <span class="title">Lock</span><span class="params">()</span></span> {</span><br><span class="line">rw.w.Lock()</span><br><span class="line">r := atomic.AddInt32(&amp;rw.readerCount, -rwmutexMaxReaders) + rwmutexMaxReaders <span class="comment">// readerCount设一个大负数</span></span><br><span class="line"><span class="comment">// Wait for active readers.</span></span><br><span class="line"><span class="keyword">if</span> r != <span class="number">0</span> &amp;&amp; atomic.AddInt32(&amp;rw.readerWait, r) != <span class="number">0</span> {</span><br><span class="line">runtime_SemacquireMutex(&amp;rw.writerSem, <span class="literal">false</span>, <span class="number">0</span>)</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(rw *RWMutex)</span> <span class="title">Unlock</span><span class="params">()</span></span> {</span><br><span class="line">r := atomic.AddInt32(&amp;rw.readerCount, rwmutexMaxReaders) <span class="comment">// 还原readerCount设置的大负数</span></span><br><span class="line"><span class="comment">// readerSem叶链表头-&gt;尾循环唤醒等待的r</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="keyword">int</span>(r); i++ {</span><br><span class="line">runtime_Semrelease(&amp;rw.readerSem, <span class="literal">false</span>, <span class="number">0</span>)</span><br><span class="line">}</span><br><span class="line">rw.w.Unlock()</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="runtime-mutex"><a href="#runtime-mutex" class="headerlink" title="runtime.mutex"></a>runtime.mutex</h2><ul><li>lock流程</li></ul><ol><li>m.lock++</li><li>原子load key，如果没锁，尝试原子cas key-&gt;locked，cas成功则返回，否则自旋30次，多核下一共尝试4遍</li><li>其他m占着锁，此时key=locked，设置m.nextwaitm = muintptr(0)，for循环不断load key并尝试原子cas key-&gt;g.m，将自己设为等待锁的m</li><li>1 如果cas失败，可能还有其他m已将key cas为自己，继续循环；也可能是锁已释放，跳到1.重新判断锁</li><li>2 如果cas成功，m进入等待</li></ol><ul><li>unlock流程</li></ul><ol><li>如果key=locked，尝试原子cas key-&gt;0解锁，成功则返回</li><li>如果key!=locked，有其他m在等待锁，获取等待的m,尝试原子cas key-&gt;m.nextwaitm并唤醒等待的m</li><li>当前m.lock–，如果lock=0并且可抢占，设置抢占标记</li></ol><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> mutex <span class="keyword">struct</span> {</span><br><span class="line">key <span class="keyword">uintptr</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">locked <span class="keyword">uintptr</span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">active_spin     = <span class="number">4</span> <span class="comment">// 多核loop 4次</span></span><br><span class="line">active_spin_cnt = <span class="number">30</span> <span class="comment">// 每次loop自旋30次</span></span><br><span class="line">passive_spin    = <span class="number">1</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lock</span><span class="params">(l *mutex)</span></span> {</span><br><span class="line">gp := getg()</span><br><span class="line">gp.m.locks++</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> atomic.Casuintptr(&amp;l.key, <span class="number">0</span>, locked) {</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">}</span><br><span class="line">semacreate(gp.m) <span class="comment">// 创建OS信号量</span></span><br><span class="line"></span><br><span class="line">spin := <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> ncpu &gt; <span class="number">1</span> {</span><br><span class="line">spin = active_spin <span class="comment">// 多核loop 4次</span></span><br><span class="line">}</span><br><span class="line">Loop:</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; ; i++ {</span><br><span class="line">v := atomic.Loaduintptr(&amp;l.key)</span><br><span class="line"><span class="keyword">if</span> v&amp;locked == <span class="number">0</span> {</span><br><span class="line"><span class="comment">// Unlocked. Try to lock.</span></span><br><span class="line"><span class="keyword">if</span> atomic.Casuintptr(&amp;l.key, v, v|locked) {</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">}</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> i &lt; spin {</span><br><span class="line">procyield(active_spin_cnt) <span class="comment">// 自旋30次</span></span><br><span class="line">} <span class="keyword">else</span> <span class="keyword">if</span> i &lt; spin+passive_spin {</span><br><span class="line">osyield()</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">            <span class="comment">// 其他g已获得lock，gp.m.nextwaitm-&gt;muintptr(0)，l.key-&gt;gp.m</span></span><br><span class="line"><span class="keyword">for</span> {</span><br><span class="line">gp.m.nextwaitm = muintptr(v &amp;^ locked)</span><br><span class="line"><span class="keyword">if</span> atomic.Casuintptr(&amp;l.key, v, <span class="keyword">uintptr</span>(unsafe.Pointer(gp.m))|locked) {</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">}</span><br><span class="line">v = atomic.Loaduintptr(&amp;l.key)</span><br><span class="line"><span class="keyword">if</span> v&amp;locked == <span class="number">0</span> {</span><br><span class="line"><span class="keyword">continue</span> Loop</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> v&amp;locked != <span class="number">0</span> {</span><br><span class="line"><span class="comment">// Queued. Wait.</span></span><br><span class="line">semasleep(<span class="number">-1</span>)</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">unlock</span><span class="params">(l *mutex)</span></span> {</span><br><span class="line">gp := getg()</span><br><span class="line"><span class="keyword">var</span> mp *m</span><br><span class="line"><span class="keyword">for</span> {</span><br><span class="line">v := atomic.Loaduintptr(&amp;l.key)</span><br><span class="line"><span class="keyword">if</span> v == locked {</span><br><span class="line"><span class="keyword">if</span> atomic.Casuintptr(&amp;l.key, locked, <span class="number">0</span>) {</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">            }</span><br><span class="line">        <span class="comment">// l.key是其他等待m</span></span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">            <span class="comment">// 获取等待m</span></span><br><span class="line">            mp = muintptr(v &amp;^ locked).ptr()</span><br><span class="line">            <span class="comment">// key换为等待m.nextwaitm</span></span><br><span class="line"><span class="keyword">if</span> atomic.Casuintptr(&amp;l.key, v, <span class="keyword">uintptr</span>(mp.nextwaitm)) {</span><br><span class="line"><span class="comment">// Dequeued an M.  Wake it.</span></span><br><span class="line">semawakeup(mp)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">gp.m.locks--</span><br><span class="line"><span class="keyword">if</span> gp.m.locks == <span class="number">0</span> &amp;&amp; gp.preempt { <span class="comment">// 重置抢占标示，在newstack栈分配中判断</span></span><br><span class="line">gp.stackguard0 = stackPreempt</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="yield"><a href="#yield" class="headerlink" title="yield"></a>yield</h3><p><code>procyield</code>通过pause自旋</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">TEXT runtime·procyield(SB),NOSPLIT,$<span class="number">0</span><span class="number">-0</span></span><br><span class="line">MOVLcycles+<span class="number">0</span>(FP), AX</span><br><span class="line">again:</span><br><span class="line">PAUSE</span><br><span class="line">SUBL$<span class="number">1</span>, AX</span><br><span class="line">JNZagain</span><br><span class="line">    RET</span><br></pre></td></tr></tbody></table></figure><p><code>osyield</code>调用系统<strong>sched_yield</strong></p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">TEXT runtime·osyield(SB),NOSPLIT,$<span class="number">0</span></span><br><span class="line">MOVL$SYS_sched_yield, AX</span><br><span class="line">SYSCALL</span><br><span class="line">    RET</span><br></pre></td></tr></tbody></table></figure><h2 id="TODO-java"><a href="#TODO-java" class="headerlink" title="TODO java"></a>TODO java</h2>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go sync.pool</title>
      <link href="2020/05/11/go/sync.pool/"/>
      <url>2020/05/11/go/sync.pool/</url>
      
        <content type="html"><![CDATA[<p>sync.pool是用于临时取还对象的池子，对于需要频繁分配和回收的对象使用sync.pool降低GC压力<br>sync.pool是线程安全的，一般设置new函数，在pool中没有对象时创建新对象<br>fmt、encoding/json等都用到sync.pool</p><h2 id="fmt用例"><a href="#fmt用例" class="headerlink" title="fmt用例"></a>fmt用例</h2><p>fmt包print类函数使用sync.pool</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Printf</span><span class="params">(format <span class="keyword">string</span>, a ...<span class="keyword">interface</span>{})</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span> {</span><br><span class="line">    <span class="keyword">return</span> Fprintf(os.Stdout, format, a...)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Fprintf</span><span class="params">(w io.Writer, format <span class="keyword">string</span>, a ...<span class="keyword">interface</span>{})</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span> {</span><br><span class="line">    p := newPrinter()</span><br><span class="line">    p.doPrintf(format, a)</span><br><span class="line">    n, err = w.Write(p.buf)</span><br><span class="line">    p.free()</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newPrinter</span><span class="params">()</span> *<span class="title">pp</span></span> {</span><br><span class="line">    p := ppFree.Get().(*pp)</span><br><span class="line">    p.panicking = <span class="literal">false</span></span><br><span class="line">    p.erroring = <span class="literal">false</span></span><br><span class="line">    p.wrapErrs = <span class="literal">false</span></span><br><span class="line">    p.fmt.init(&amp;p.buf)</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *pp)</span> <span class="title">free</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="comment">// 初始put的大对象可能经过多个GC后才被回收，避免放回大对象</span></span><br><span class="line">    <span class="comment">// See https://golang.org/issue/23199</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">cap</span>(p.buf) &gt; <span class="number">64</span>&lt;&lt;<span class="number">10</span> {</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    p.buf = p.buf[:<span class="number">0</span>]</span><br><span class="line">    p.arg = <span class="literal">nil</span></span><br><span class="line">    p.value = reflect.Value{}</span><br><span class="line">    p.wrappedErr = <span class="literal">nil</span></span><br><span class="line">    ppFree.Put(p)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ppFree = sync.Pool{</span><br><span class="line">    New: <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">interface</span></span>{} { <span class="keyword">return</span> <span class="built_in">new</span>(pp) },</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="pool-test"><a href="#pool-test" class="headerlink" title="pool test"></a>pool test</h2><p>略</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">defer</span> debug.SetGCPercent(debug.SetGCPercent(<span class="number">-1</span>))</span><br></pre></td></tr></tbody></table></figure><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">runtime.SetFinalizer(v, <span class="function"><span class="keyword">func</span><span class="params">(vv *<span class="keyword">string</span>)</span></span> {</span><br><span class="line">    atomic.AddUint32(&amp;fin, <span class="number">1</span>)</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h2 id="pool结构"><a href="#pool结构" class="headerlink" title="pool结构"></a>pool结构</h2><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// poolDequeue是单生产多消费的ring，方法pushHead/popHead/popTail</span></span><br><span class="line"><span class="keyword">type</span> poolDequeue <span class="keyword">struct</span> {</span><br><span class="line">    <span class="comment">// head = index of next slot to fill</span></span><br><span class="line">    <span class="comment">// tail = index of oldest data in queue</span></span><br><span class="line">    headTail <span class="keyword">uint64</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 固定大小的ring，通过head/tail索引</span></span><br><span class="line">    vals []eface</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> eface <span class="keyword">struct</span> {</span><br><span class="line">    typ, val unsafe.Pointer</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// poolChain是双向链表的poolDequeue，方法pushHead/popHead/popTail</span></span><br><span class="line"><span class="comment">// 第一次pushHead创建poolDequeue初始大小8</span></span><br><span class="line"><span class="comment">// 每次pushHead若已用满，新建poolDequeue大小翻倍</span></span><br><span class="line"><span class="comment">// popHead从头到尾遍历链表，对每个poolDequeue执行popHead尝试pop</span></span><br><span class="line"><span class="comment">// popTail从尾到头遍历链表，对每个poolDequeue执行popTail尝试pop</span></span><br><span class="line"><span class="keyword">type</span> poolChain <span class="keyword">struct</span> {</span><br><span class="line">    head *poolChainElt</span><br><span class="line">    tail *poolChainElt</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> poolChainElt <span class="keyword">struct</span> {</span><br><span class="line">    poolDequeue</span><br><span class="line">    next, prev *poolChainElt</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Pool <span class="keyword">struct</span> {</span><br><span class="line">    noCopy noCopy</span><br><span class="line"></span><br><span class="line">    local     unsafe.Pointer <span class="comment">// 每个P的本地队列，实际类型为[P]poolLocal</span></span><br><span class="line">    localSize <span class="keyword">uintptr</span></span><br><span class="line"></span><br><span class="line">    victim     unsafe.Pointer <span class="comment">// local from previous cycle</span></span><br><span class="line">    victimSize <span class="keyword">uintptr</span>        <span class="comment">// size of victims array</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// pool无可用对象时调用</span></span><br><span class="line">    New <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">interface</span></span>{}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> poolLocalInternal <span class="keyword">struct</span> {</span><br><span class="line">    private <span class="keyword">interface</span>{} <span class="comment">// 每个P的私有共享，使用时无需加锁</span></span><br><span class="line">    shared  poolChain   <span class="comment">// poolChain对象，本地P可以pushHead/popHead，其他P仅能popTail</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> poolLocal <span class="keyword">struct</span> {</span><br><span class="line">    poolLocalInternal</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 伪共享，仅占位用，防止在cache line上分配多个poolLocalInternal</span></span><br><span class="line">    pad [<span class="number">128</span> - unsafe.Sizeof(poolLocalInternal{})%<span class="number">128</span>]<span class="keyword">byte</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 优先放poolLocal.private</span></span><br><span class="line"><span class="comment">// 2. 其次放poolLocal.shared</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Pool)</span> <span class="title">Put</span><span class="params">(x <span class="keyword">interface</span>{})</span></span> {</span><br><span class="line">    <span class="keyword">if</span> x == <span class="literal">nil</span> {</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> race.Enabled {</span><br><span class="line">        <span class="keyword">if</span> fastrand()%<span class="number">4</span> == <span class="number">0</span> {</span><br><span class="line">            <span class="comment">// Randomly drop x on floor.</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        }</span><br><span class="line">        race.ReleaseMerge(poolRaceAddr(x))</span><br><span class="line">        race.Disable()</span><br><span class="line">    }</span><br><span class="line">    l, _ := p.pin()</span><br><span class="line">    <span class="keyword">if</span> l.private == <span class="literal">nil</span> {</span><br><span class="line">        l.private = x</span><br><span class="line">        x = <span class="literal">nil</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> x != <span class="literal">nil</span> {</span><br><span class="line">        l.shared.pushHead(x)</span><br><span class="line">    }</span><br><span class="line">    runtime_procUnpin()</span><br><span class="line">    <span class="keyword">if</span> race.Enabled {</span><br><span class="line">        race.Enable()</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据p获取poolLocal和pid</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Pool)</span> <span class="title">pin</span><span class="params">()</span> <span class="params">(*poolLocal, <span class="keyword">int</span>)</span></span> {</span><br><span class="line">    pid := runtime_procPin() <span class="comment">// 在runtime_procUnpin前当前G和P不会被抢占，防止下面pid发生改变</span></span><br><span class="line">    s := atomic.LoadUintptr(&amp;p.localSize)</span><br><span class="line">    l := p.local</span><br><span class="line">    <span class="comment">// pid &lt; p.local数组长度时，在p.local里查找poolLocal对象</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">uintptr</span>(pid) &lt; s {</span><br><span class="line">        <span class="keyword">return</span> indexLocal(l, pid), pid</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 否则调用pinSlow创建新poolLocal</span></span><br><span class="line">    <span class="keyword">return</span> p.pinSlow()</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// pid在pool中没有对应poolLocal对象时，创建新对象</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Pool)</span> <span class="title">pinSlow</span><span class="params">()</span> <span class="params">(*poolLocal, <span class="keyword">int</span>)</span></span> {</span><br><span class="line">    runtime_procUnpin() <span class="comment">// 先解除抢占再lock</span></span><br><span class="line">    allPoolsMu.Lock()</span><br><span class="line">    <span class="keyword">defer</span> allPoolsMu.Unlock()</span><br><span class="line">    pid := runtime_procPin()</span><br><span class="line">    s := p.localSize</span><br><span class="line">    l := p.local</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">uintptr</span>(pid) &lt; s {</span><br><span class="line">        <span class="keyword">return</span> indexLocal(l, pid), pid <span class="comment">// 解除抢期间可能p.local已发生变化</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> p.local == <span class="literal">nil</span> {</span><br><span class="line">        allPools = <span class="built_in">append</span>(allPools, p)</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 创建新poolLocal数组，旧数组进入gc</span></span><br><span class="line">    size := runtime.GOMAXPROCS(<span class="number">0</span>)</span><br><span class="line">    local := <span class="built_in">make</span>([]poolLocal, size)</span><br><span class="line">    atomic.StorePointer(&amp;p.local, unsafe.Pointer(&amp;local[<span class="number">0</span>]))</span><br><span class="line">    atomic.StoreUintptr(&amp;p.localSize, <span class="keyword">uintptr</span>(size))</span><br><span class="line">    <span class="keyword">return</span> &amp;local[pid], pid</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1。调用pin获取poolLocal和pid</span></span><br><span class="line"><span class="comment">// 2. poolLocal.private为空，依次尝试以下方式</span></span><br><span class="line"><span class="comment">// 2.1 从poolLocal.shared队列中获取对象</span></span><br><span class="line"><span class="comment">// 2.2 调用getSlow从其他P偷取对象</span></span><br><span class="line"><span class="comment">// 2.3 调用new创建对象</span></span><br><span class="line"><span class="comment">// 3. poolLocal.private不为空，直接复用对象返回</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Pool)</span> <span class="title">Get</span><span class="params">()</span> <span class="title">interface</span></span>{} {</span><br><span class="line">    <span class="keyword">if</span> race.Enabled {</span><br><span class="line">        race.Disable()</span><br><span class="line">    }</span><br><span class="line">    l, pid := p.pin()</span><br><span class="line">    x := l.private <span class="comment">// poolLocal.private不为空时，复用对象返回</span></span><br><span class="line">    l.private = <span class="literal">nil</span></span><br><span class="line">    <span class="keyword">if</span> x == <span class="literal">nil</span> {</span><br><span class="line">        <span class="comment">// poolLocal.private为空，从poolLocal.shared队列中获取对象</span></span><br><span class="line">        x, _ = l.shared.popHead()</span><br><span class="line">        <span class="keyword">if</span> x == <span class="literal">nil</span> {</span><br><span class="line">            x = p.getSlow(pid)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    runtime_procUnpin()</span><br><span class="line">    <span class="keyword">if</span> race.Enabled {</span><br><span class="line">        race.Enable()</span><br><span class="line">        <span class="keyword">if</span> x != <span class="literal">nil</span> {</span><br><span class="line">            race.Acquire(poolRaceAddr(x))</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> x == <span class="literal">nil</span> &amp;&amp; p.New != <span class="literal">nil</span> {</span><br><span class="line">        x = p.New() <span class="comment">// 用new()函数创建对象</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当本地P无可用对象，从其他P偷取对象</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Pool)</span> <span class="title">getSlow</span><span class="params">(pid <span class="keyword">int</span>)</span> <span class="title">interface</span></span>{} {</span><br><span class="line">    size := atomic.LoadUintptr(&amp;p.localSize)</span><br><span class="line">    locals := p.local</span><br><span class="line">    <span class="comment">// 循环尝试从其他P偷取对象，popTail从链表尾获取</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="keyword">int</span>(size); i++ {</span><br><span class="line">        l := indexLocal(locals, (pid+i+<span class="number">1</span>)%<span class="keyword">int</span>(size))</span><br><span class="line">        <span class="keyword">if</span> x, _ := l.shared.popTail(); x != <span class="literal">nil</span> {</span><br><span class="line">            <span class="keyword">return</span> x</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    size = atomic.LoadUintptr(&amp;p.victimSize)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">uintptr</span>(pid) &gt;= size {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    }</span><br><span class="line">    locals = p.victim</span><br><span class="line">    l := indexLocal(locals, pid)</span><br><span class="line">    <span class="keyword">if</span> x := l.private; x != <span class="literal">nil</span> {</span><br><span class="line">        l.private = <span class="literal">nil</span></span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="keyword">int</span>(size); i++ {</span><br><span class="line">        l := indexLocal(locals, (pid+i)%<span class="keyword">int</span>(size))</span><br><span class="line">        <span class="keyword">if</span> x, _ := l.shared.popTail(); x != <span class="literal">nil</span> {</span><br><span class="line">            <span class="keyword">return</span> x</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Mark the victim cache as empty for future gets don't bother</span></span><br><span class="line">    <span class="comment">// with it.</span></span><br><span class="line">    atomic.StoreUintptr(&amp;p.victimSize, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="nocopy"><a href="#nocopy" class="headerlink" title="nocopy"></a>nocopy</h2><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// noCopy 用于嵌入一个结构体中来保证其第一次使用后不会被复制</span></span><br><span class="line"><span class="comment">// https://golang.org/issues/8005#issuecomment-190753527</span></span><br><span class="line"><span class="keyword">type</span> noCopy <span class="keyword">struct</span>{}</span><br><span class="line"></span><br><span class="line"><span class="comment">// Lock 是一个空操作用来给 `go vet` 的 -copylocks 静态分析</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*noCopy)</span> <span class="title">Lock</span><span class="params">()</span></span>   {}</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*noCopy)</span> <span class="title">Unlock</span><span class="params">()</span></span> {}</span><br></pre></td></tr></tbody></table></figure><h2 id="pad"><a href="#pad" class="headerlink" title="pad"></a>pad</h2><ul><li><a href="https://www.jianshu.com/p/dc4b5562aad2" title="" target="">什么是cpu cache</a></li></ul><h2 id="pin-unpin"><a href="#pin-unpin" class="headerlink" title="pin/unpin"></a>pin/unpin</h2><p><code>sync.runtime_procPin</code>和<code>sync.runtime_procUnpin</code>通过go:linkname关联到<code>runtime.procPin</code>和<code>runtime.procUnpin</code><br>pin/unpin抢占方式为对m的locks增减，实际GPM调度判断M是否能被抢占的判断就包含<code>mp.locks == 0</code></p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//go:nosplit</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">procPin</span><span class="params">()</span> <span class="title">int</span></span> {</span><br><span class="line">    _g_ := getg()</span><br><span class="line">    mp := _g_.m</span><br><span class="line"></span><br><span class="line">    mp.locks++</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">int</span>(mp.p.ptr().id)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//go:nosplit</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">procUnpin</span><span class="params">()</span></span> {</span><br><span class="line">    _g_ := getg()</span><br><span class="line">    _g_.m.locks--</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//go:linkname sync_runtime_procPin sync.runtime_procPin</span></span><br><span class="line"><span class="comment">//go:nosplit</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sync_runtime_procPin</span><span class="params">()</span> <span class="title">int</span></span> {</span><br><span class="line">    <span class="keyword">return</span> procPin()</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//go:linkname sync_runtime_procUnpin sync.runtime_procUnpin</span></span><br><span class="line"><span class="comment">//go:nosplit</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sync_runtime_procUnpin</span><span class="params">()</span></span> {</span><br><span class="line">    procUnpin()</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// preempt.go</span></span><br><span class="line"><span class="comment">// canPreemptM reports whether mp is in a state that is safe to preempt.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// It is nosplit because it has nosplit callers.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//go:nosplit</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">canPreemptM</span><span class="params">(mp *m)</span> <span class="title">bool</span></span> {</span><br><span class="line"><span class="keyword">return</span> mp.locks == <span class="number">0</span> &amp;&amp; mp.mallocing == <span class="number">0</span> &amp;&amp; mp.preemptoff == <span class="string">""</span> &amp;&amp; mp.p.ptr().status == _Prunning</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="go-linkname用例"><a href="#go-linkname用例" class="headerlink" title="go:linkname用例"></a>go:linkname用例</h3><p>go:linkname让私有方法可以跨包访问，甚至导出为公开方法</p><p>目录结构：</p><img src="/2020/05/11/go/sync.pool/go_linkname.png" class=""><p>go build 默认使用<code>-complete</code>检查方法完整性，直接build会报错：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">go build</span><br><span class="line"><span class="meta">#</span><span class="bash"> github.com/yiduoyunQ/<span class="built_in">test</span>/b</span></span><br><span class="line">b/b.go:10:6: missing function body</span><br></pre></td></tr></tbody></table></figure><p>通过在b包中添加一个汇编文件，让go build编译器突破方法完整性限制，汇编文件名称任意<br>参考： - <a href="http://sitano.github.io/2016/04/28/golang-private/" title="" target="">How to call private functions (bind to hidden symbols) in GoLang</a></p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.go</span></span><br><span class="line"><span class="keyword">package</span> a</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    _ <span class="string">"unsafe"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">func_a</span><span class="params">()</span></span> {</span><br><span class="line">    fmt.Println(<span class="string">"private func_a in package a"</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//go:linkname b_func_a github.com/yiduoyunQ/test/b.Func_b</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">b_func_a</span><span class="params">()</span></span> {</span><br><span class="line">    func_a()</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// b.go</span></span><br><span class="line"><span class="keyword">package</span> b</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    _ <span class="string">"unsafe"</span></span><br><span class="line"></span><br><span class="line">    _ <span class="string">"github.com/yiduoyunQ/test/a"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 仅有方法名，方法体通过go:linkname在a包中关联</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Func_b</span><span class="params">()</span></span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test.go</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"github.com/yiduoyunQ/test/b"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="comment">// 使用b的公开方法，在b中仅有方法名的申明</span></span><br><span class="line">    b.Func_b()</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>输出： <code>private func_a in package a</code></p><h2 id="锁竞争"><a href="#锁竞争" class="headerlink" title="锁竞争"></a>锁竞争</h2><p><code>pushHead</code>先取slot再判断是否可插入最后修改</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *poolDequeue)</span> <span class="title">pushHead</span><span class="params">(val <span class="keyword">interface</span>{})</span> <span class="title">bool</span></span> {</span><br><span class="line">    ptrs := atomic.LoadUint64(&amp;d.headTail)</span><br><span class="line">    head, tail := d.unpack(ptrs)</span><br><span class="line">    <span class="keyword">if</span> (tail+<span class="keyword">uint32</span>(<span class="built_in">len</span>(d.vals)))&amp;(<span class="number">1</span>&lt;&lt;dequeueBits<span class="number">-1</span>) == head {</span><br><span class="line">        <span class="comment">// Queue is full.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    }</span><br><span class="line">    slot := &amp;d.vals[head&amp;<span class="keyword">uint32</span>(<span class="built_in">len</span>(d.vals)<span class="number">-1</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check if the head slot has been released by popTail.</span></span><br><span class="line">    typ := atomic.LoadPointer(&amp;slot.typ)</span><br><span class="line">    <span class="keyword">if</span> typ != <span class="literal">nil</span> {</span><br><span class="line">        <span class="comment">// Another goroutine is still cleaning up the tail, so</span></span><br><span class="line">        <span class="comment">// the queue is actually still full.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The head slot is free, so we own it.</span></span><br><span class="line">    <span class="keyword">if</span> val == <span class="literal">nil</span> {</span><br><span class="line">        val = dequeueNil(<span class="literal">nil</span>)</span><br><span class="line">    }</span><br><span class="line">    *(*<span class="keyword">interface</span>{})(unsafe.Pointer(slot)) = val</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Increment head. This passes ownership of slot to popTail</span></span><br><span class="line">    <span class="comment">// and acts as a store barrier for writing the slot.</span></span><br><span class="line">    atomic.AddUint64(&amp;d.headTail, <span class="number">1</span>&lt;&lt;dequeueBits)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>popTail</code>先修改headTail再取slot然后重置slot</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *poolDequeue)</span> <span class="title">popTail</span><span class="params">()</span> <span class="params">(<span class="keyword">interface</span>{}, <span class="keyword">bool</span>)</span></span> {</span><br><span class="line">    <span class="keyword">var</span> slot *eface</span><br><span class="line">    <span class="keyword">for</span> {</span><br><span class="line">        ptrs := atomic.LoadUint64(&amp;d.headTail)</span><br><span class="line">        head, tail := d.unpack(ptrs)</span><br><span class="line">        <span class="keyword">if</span> tail == head {</span><br><span class="line">            <span class="comment">// Queue is empty.</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">false</span></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Confirm head and tail (for our speculative check</span></span><br><span class="line">        <span class="comment">// above) and increment tail. If this succeeds, then</span></span><br><span class="line">        <span class="comment">// we own the slot at tail.</span></span><br><span class="line">        ptrs2 := d.pack(head, tail+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> atomic.CompareAndSwapUint64(&amp;d.headTail, ptrs, ptrs2) {</span><br><span class="line">            <span class="comment">// Success.</span></span><br><span class="line">            slot = &amp;d.vals[tail&amp;<span class="keyword">uint32</span>(<span class="built_in">len</span>(d.vals)<span class="number">-1</span>)]</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// We now own slot.</span></span><br><span class="line">    val := *(*<span class="keyword">interface</span>{})(unsafe.Pointer(slot))</span><br><span class="line">    <span class="keyword">if</span> val == dequeueNil(<span class="literal">nil</span>) {</span><br><span class="line">        val = <span class="literal">nil</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Tell pushHead that we're done with this slot. Zeroing the</span></span><br><span class="line">    <span class="comment">// slot is also important so we don't leave behind references</span></span><br><span class="line">    <span class="comment">// that could keep this object live longer than necessary.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// We write to val first and then publish that we're done with</span></span><br><span class="line">    <span class="comment">// this slot by atomically writing to typ.</span></span><br><span class="line">    slot.val = <span class="literal">nil</span></span><br><span class="line">    atomic.StorePointer(&amp;slot.typ, <span class="literal">nil</span>)</span><br><span class="line">    <span class="comment">// At this point pushHead owns the slot.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> val, <span class="literal">true</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>考虑正常push/pop情况，head和tail指向slot不会有交集，仅需原子获取修改<strong>headTail</strong></p><img src="/2020/05/11/go/sync.pool/poolDequeue_1.png" class=""><p>考虑当发生写溢出，pop速度跟不上push速度时</p><img src="/2020/05/11/go/sync.pool/poolDequeue_2.png" class=""><ul><li>若<code>pushHead</code>先执行，在第一次计算队列时发现队列满，false退出</li><li>若<code>popTail</code>先执行，tail成功+1<ul><li>此时<code>pushHead</code>执行，在第一次计算队列时发现队列没满，接着原子判断slot.typ<ul><li>若在判断前，<code>popTail</code>先执行原子设置slot.typ为空，则<code>pushHead</code>能获得slot正常插入，pop+push后队列仍满</li><li>若<code>pushHead</code>先执行原子判断slot.typ，此时typ非空，push失败</li></ul></li></ul></li></ul><p>poolChain使用双向链表存储poolDequeue，对poolChain执行<code>popTail</code>如图</p><img src="/2020/05/11/go/sync.pool/poolDequeue_3.png" class=""><p>若pop速度很快，当前队列已空且无next队列，则保留当前队列用于下一次pushHead<br>若push速度大于pop，pool使用内存会不断扩展，不加入victime和gc机制的话会导致内存溢出</p><h2 id="oldPools-allPools，victim，gc"><a href="#oldPools-allPools，victim，gc" class="headerlink" title="oldPools, allPools，victim，gc"></a>oldPools, allPools，victim，gc</h2><p>victime作为二级缓存，用来降低GC压力并提高命中率。</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// This function is called with the world stopped, at the beginning of a garbage collection.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">poolCleanup</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="comment">// Drop victim caches from all pools.</span></span><br><span class="line">    <span class="keyword">for</span> _, p := <span class="keyword">range</span> oldPools {</span><br><span class="line">        p.victim = <span class="literal">nil</span></span><br><span class="line">        p.victimSize = <span class="number">0</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Move primary cache to victim cache.</span></span><br><span class="line">    <span class="keyword">for</span> _, p := <span class="keyword">range</span> allPools {</span><br><span class="line">        p.victim = p.local</span><br><span class="line">        p.victimSize = p.localSize</span><br><span class="line">        p.local = <span class="literal">nil</span></span><br><span class="line">        p.localSize = <span class="number">0</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The pools with non-empty primary caches now have non-empty</span></span><br><span class="line">    <span class="comment">// victim caches and no pools have primary caches.</span></span><br><span class="line">    oldPools, allPools = allPools, <span class="literal">nil</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在pool的init中注册gc时的清理函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> {</span><br><span class="line">    runtime_registerPoolCleanup(poolCleanup)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol><li>初始状态，oldPools和allPools均为nil</li><li>第1次调用<code>Get</code>，由于p.local为nil，将会在pinSlow中创建p.local，然后将p放入allPools，此时allPools长度为1，oldPools为nil</li><li>对象使用完毕，第1次调用<code>Put</code>放回对象</li><li>第1次GC STW阶段，allPools中所有p.local将值赋值给victim并置为nil，最后allPools为nil，oldPools长度为1</li><li>第2次调用<code>Get</code>，由于p.local为nil，此时会从p.victim里面尝试取对象</li><li>对象使用完毕，第2次调用<code>Put</code>放回对象，但由于p.local为nil，重新创建p.local，并将对象放回，此时allPools长度为1，oldPools长度为1</li><li>第2次GC STW阶段，oldPools中所有p.victim置nil，前一次的cache在本次GC时被回收，allPools所有p.local将值赋值给victim并置为nil，最后allPools为&nbsp;nil，oldPools长度为1</li></ol><p>Go 1.13以前poolCleanup的实现：<br>3层循环清空，时间复杂度为总长度O(n)</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">poolCleanup</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="keyword">for</span> i, p := <span class="keyword">range</span> allPools {</span><br><span class="line">        allPools[i] = <span class="literal">nil</span></span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="keyword">int</span>(p.localSize); i++ {</span><br><span class="line">            l := indexLocal(p.local, i)</span><br><span class="line">            l.private = <span class="literal">nil</span></span><br><span class="line">            <span class="keyword">for</span> j := <span class="keyword">range</span> l.shared {</span><br><span class="line">                l.shared[j] = <span class="literal">nil</span></span><br><span class="line">            }</span><br><span class="line">            l.shared = <span class="literal">nil</span></span><br><span class="line">        }</span><br><span class="line">        p.local = <span class="literal">nil</span></span><br><span class="line">        p.localSize = <span class="number">0</span></span><br><span class="line">    }</span><br><span class="line">    allPools = []*Pool{}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>Go 1.13以前每次GC遍历allPools清空所有字段，新版相比Go 1.13以前，通过引入<strong>victim</strong>拉大了GC的粒度，且减小了GC的开销。<br><strong>victim</strong>在GC时将当前对象放入其中，在下一次GC前仍可作为二级缓存获取数据，直到下一次GC时回收，即GC的粒度从原来每次GC回收空对象变为2次GC才回收空对象。同时由于从<strong>victim</strong>中获取的数据没有再次放回<strong>victim</strong>中，相应GC的开销也减小了。<br>Go 1.13通过增加缓存方式，每次对allPools对象一次性清空，相比以前使用循环遍历，GC时间复杂度由原来的O(n)变为O(1)</p><p>gc调用链：<br>在runtime包mgc.go中创建函数钩子，通过go:linkname链接到sync包pool.go中，进行注册</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pool.go</span></span><br><span class="line"><span class="comment">// Implemented in runtime.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">runtime_registerPoolCleanup</span><span class="params">(cleanup <span class="keyword">func</span>()</span>)</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mgc.go</span></span><br><span class="line"><span class="comment">// Hooks for other packages</span></span><br><span class="line"><span class="keyword">var</span> poolcleanup <span class="function"><span class="keyword">func</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//go:linkname sync_runtime_registerPoolCleanup sync.runtime_registerPoolCleanup</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sync_runtime_registerPoolCleanup</span><span class="params">(f <span class="keyword">func</span>()</span>)</span> {</span><br><span class="line">poolcleanup = f</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="无锁化"><a href="#无锁化" class="headerlink" title="无锁化"></a>无锁化</h2><h3 id="原子操作代替锁"><a href="#原子操作代替锁" class="headerlink" title="原子操作代替锁"></a>原子操作代替锁</h3><p>通过<strong>headTail</strong>和<strong>slot.type</strong>的CAS原子操作代替锁，保证并发的前提下降低开销</p><h3 id="操作行为隔离"><a href="#操作行为隔离" class="headerlink" title="操作行为隔离"></a>操作行为隔离</h3><p>通过双向链表将<code>pushHead</code>和<code>popTail</code>行为尽可能隔离开</p><h3 id="victim"><a href="#victim" class="headerlink" title="victim"></a>victim</h3><p>通过<strong>victim</strong>二级缓存降低GC开销</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/133638023" title="" target="">深度解密Go语言之sync.Pool</a></li><li><a href="https://xargin.com/lock-contention-in-go/" title="" target="">几个Go系统可能遇到的锁问题</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>goroutine</title>
      <link href="2020/05/11/go/goroutine/"/>
      <url>2020/05/11/go/goroutine/</url>
      
        <content type="html"><![CDATA[<blockquote><p>runtime/HACKING.md</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>一个goroutine是一个g对象，main也是一个g</li><li>p数量默认为cpu核线程数，通过<code>GOMAXPROCS</code>调整</li><li>m数量一般比p多一点，最大10000个</li><li>goroutine入口<code>newproc</code>，m入口<code>mstart</code></li><li>getg()获取g，g.m关联的m，g.m.p关联的p</li><li>一般getg顺序为本地pop/全局拿最多32个/其他p偷一半(timer)/network</li><li>m通过<code>schedule</code>/<code>findrunnable</code>不断找活干，处于<strong>spinning</strong>状态。如果已经没活，退出spinning状态，调用<code>stopm</code>进入全局midle，同时释放p进入全局pidle</li><li><code>newproc</code>中的g不会直接分配给m，而是由spinning的m自己找g处理。当有idle的p和非spinning的m，则将全局midle设置为<strong>spinning</strong>，然后找g处理。若m不足使用newm新创建m(比如程序刚开始启动时)</li><li><code>sysmon</code>在main方法中注册，每个10ms检查g(初始20us逐渐增加到10ms，发生抢占后重置)，设置g.stackguard0=stackPreempt，在g运行过程中分配新stack时进行判断，将g放回全局runnable g队列，并调用一次schedule。每2分钟如果没有gc过，执行gc。若开启了strace，在sysmon中输出debug信息</li><li>gc根据上一次gc动态调整</li></ul><h2 id="g状态"><a href="#g状态" class="headerlink" title="g状态"></a>g状态</h2><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    _Gidle = <span class="literal">iota</span> <span class="comment">// 0 newg默认值为iota</span></span><br><span class="line">    _Grunnable <span class="comment">// 1 分配到runq</span></span><br><span class="line">    _Grunning <span class="comment">// 2 从runq等取出，与mp绑定执行go代码</span></span><br><span class="line">    _Gsyscall <span class="comment">// 3 执行系统调用，只与m绑定</span></span><br><span class="line">    _Gwaiting <span class="comment">// 4 阻塞等待io/gc/channel等，不在runq中</span></span><br><span class="line">    _Gmoribund_unused <span class="comment">// 5 保留</span></span><br><span class="line">    _Gdead <span class="comment">// 6 未使用状态，可能在本地或全局gFree，可能有stack或nostack</span></span><br><span class="line">    _Genqueue_unused <span class="comment">// 7 保留</span></span><br><span class="line">    _Gcopystack <span class="comment">// 8 running-&gt;copystack-&gt;running，避免stack拷贝过程中被gc</span></span><br><span class="line">    _Gpreempted <span class="comment">// 9 标示竞争</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用于标示gc</span></span><br><span class="line">    _Gscan          = <span class="number">0x1000</span></span><br><span class="line">    _Gscanrunnable  = _Gscan + _Grunnable  <span class="comment">// 0x1001</span></span><br><span class="line">    _Gscanrunning   = _Gscan + _Grunning   <span class="comment">// 0x1002</span></span><br><span class="line">    _Gscansyscall   = _Gscan + _Gsyscall   <span class="comment">// 0x1003</span></span><br><span class="line">    _Gscanwaiting   = _Gscan + _Gwaiting   <span class="comment">// 0x1004</span></span><br><span class="line">    _Gscanpreempted = _Gscan + _Gpreempted <span class="comment">// 0x1009</span></span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><h2 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h2><blockquote><p>平台不同对应汇编文件不同</p></blockquote><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rt0_linux_arm64.s</span></span><br><span class="line">TEXT main(SB),NOSPLIT|NOFRAME,$<span class="number">0</span></span><br><span class="line">    MOVD    $runtime·rt0_go(SB), R2</span><br><span class="line">    BL    (R2)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// asm_arm64.s</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动顺序:</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    call osinit</span></span><br><span class="line"><span class="comment">//    call schedinit</span></span><br><span class="line"><span class="comment">//    make &amp; queue new G</span></span><br><span class="line"><span class="comment">//    call runtime·mstart</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// The new G calls runtime·main.</span></span><br><span class="line">TEXT runtime·rt0_go(SB),NOSPLIT,$<span class="number">0</span></span><br><span class="line">    <span class="comment">// 初始化g0，m0</span></span><br><span class="line"></span><br><span class="line">    CALL    runtime·args(SB)</span><br><span class="line">    CALL    runtime·osinit(SB)</span><br><span class="line">    CALL    runtime·schedinit(SB)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// create a new goroutine to start program</span></span><br><span class="line">    MOVD    $runtime·mainPC(SB), R0        <span class="comment">// mainPC是main的入口</span></span><br><span class="line">    MOVD    RSP, R7</span><br><span class="line">    MOVD.W    $<span class="number">0</span>, <span class="number">-8</span>(R7)</span><br><span class="line">    MOVD.W    R0, <span class="number">-8</span>(R7)</span><br><span class="line">    MOVD.W    $<span class="number">0</span>, <span class="number">-8</span>(R7)</span><br><span class="line">    MOVD.W    $<span class="number">0</span>, <span class="number">-8</span>(R7)</span><br><span class="line">    MOVD    R7, RSP</span><br><span class="line">    BL    runtime·newproc(SB) <span class="comment">// 调用newproc为mainPC创建goroutine</span></span><br><span class="line">    ADD    $<span class="number">32</span>, RSP</span><br><span class="line"></span><br><span class="line">    <span class="comment">// start this M</span></span><br><span class="line">    BL    runtime·mstart(SB) <span class="comment">// m的入口</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// mstart() =&gt; schedule() =&gt; execute() =&gt; xxx() =&gt; goexit()</span></span><br><span class="line">TEXT runtime·goexit(SB),NOSPLIT,$<span class="number">0</span><span class="number">-0</span></span><br><span class="line">    BYTE    $<span class="number">0x90</span>    <span class="comment">// NOP</span></span><br><span class="line">    CALL    runtime·goexit1(SB)    <span class="comment">// does not return</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>schedinit使用cpu线程数或环境变量<code>GOMAXPROCS</code>初始化全局allp</p></blockquote><ol><li>allp不够大的话进行扩容和拷贝旧p</li><li>增加procs时，对增量p初始化，当前g的p复用</li><li>减少procs且当前p比新值小时，释放当前p，使用allp[0]</li><li>调小procs时，释放nprocs～old的p资源</li><li>关联有g的p和空闲m，空g的p放入全局空p对象，并返回第一个可用p</li></ol><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">schedinit</span><span class="params">()</span></span> {</span><br><span class="line">    sched.maxmcount = <span class="number">10000</span> <span class="comment">// m最大10000个，一般比p多一点</span></span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">// cpu线程数或环境变量GOMAXPROCS设置p数量</span></span><br><span class="line">    procs := ncpu</span><br><span class="line">    <span class="keyword">if</span> n, ok := atoi32(gogetenv(<span class="string">"GOMAXPROCS"</span>)); ok &amp;&amp; n &gt; <span class="number">0</span> {</span><br><span class="line">        procs = n</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> procresize(procs) != <span class="literal">nil</span> {</span><br><span class="line">        throw(<span class="string">"unknown runnable goroutine during bootstrap"</span>)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">procresize</span><span class="params">(nprocs <span class="keyword">int32</span>)</span> *<span class="title">p</span></span> {</span><br><span class="line">    old := gomaxprocs</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. Grow allp if necessary.</span></span><br><span class="line">    <span class="keyword">if</span> nprocs &gt; <span class="keyword">int32</span>(<span class="built_in">len</span>(allp)) {</span><br><span class="line">        <span class="comment">// Synchronize with retake, which could be running</span></span><br><span class="line">        <span class="comment">// concurrently since it doesn't run on a P.</span></span><br><span class="line">        lock(&amp;allpLock)</span><br><span class="line">        <span class="keyword">if</span> nprocs &lt;= <span class="keyword">int32</span>(<span class="built_in">cap</span>(allp)) {</span><br><span class="line">            allp = allp[:nprocs]</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            nallp := <span class="built_in">make</span>([]*p, nprocs)</span><br><span class="line">            <span class="comment">// Copy everything up to allp's cap so we</span></span><br><span class="line">            <span class="comment">// never lose old allocated Ps.</span></span><br><span class="line">            <span class="built_in">copy</span>(nallp, allp[:<span class="built_in">cap</span>(allp)])</span><br><span class="line">            allp = nallp</span><br><span class="line">        }</span><br><span class="line">        unlock(&amp;allpLock)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. initialize new P's</span></span><br><span class="line">    <span class="keyword">for</span> i := old; i &lt; nprocs; i++ {</span><br><span class="line">        pp := allp[i]</span><br><span class="line">        <span class="keyword">if</span> pp == <span class="literal">nil</span> {</span><br><span class="line">            pp = <span class="built_in">new</span>(p)</span><br><span class="line">        }</span><br><span class="line">        pp.init(i)</span><br><span class="line">        atomicstorep(unsafe.Pointer(&amp;allp[i]), unsafe.Pointer(pp))</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    _g_ := getg()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 增加procs，复用g的p</span></span><br><span class="line">    <span class="keyword">if</span> _g_.m.p != <span class="number">0</span> &amp;&amp; _g_.m.p.ptr().id &lt; nprocs {</span><br><span class="line">        <span class="comment">// continue to use the current P</span></span><br><span class="line">        _g_.m.p.ptr().status = _Prunning</span><br><span class="line">        _g_.m.p.ptr().mcache.prepareForSweep()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 减少procs且当前g的p比新值小，释放当前g的p，使用allp[0]</span></span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">if</span> _g_.m.p != <span class="number">0</span> {</span><br><span class="line">            _g_.m.p.ptr().m = <span class="number">0</span></span><br><span class="line">        }</span><br><span class="line">        _g_.m.p = <span class="number">0</span></span><br><span class="line">        _g_.m.mcache = <span class="literal">nil</span></span><br><span class="line">        p := allp[<span class="number">0</span>]</span><br><span class="line">        p.m = <span class="number">0</span></span><br><span class="line">        p.status = _Pidle</span><br><span class="line">        acquirep(p)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 调小procs，释放nprocs～old的p资源</span></span><br><span class="line">    <span class="keyword">for</span> i := nprocs; i &lt; old; i++ {</span><br><span class="line">        p := allp[i]</span><br><span class="line">        p.destroy()</span><br><span class="line">        <span class="comment">// can't free P itself because it can be referenced by an M in syscall</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Trim allp.</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">int32</span>(<span class="built_in">len</span>(allp)) != nprocs {</span><br><span class="line">        lock(&amp;allpLock)</span><br><span class="line">        allp = allp[:nprocs]</span><br><span class="line">        unlock(&amp;allpLock)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 关联有g的p和空闲m，空g的p放入全局空p对象，并返回第一个可用p</span></span><br><span class="line">    <span class="keyword">var</span> runnablePs *p</span><br><span class="line">    <span class="keyword">for</span> i := nprocs - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i-- {</span><br><span class="line">        p := allp[i]</span><br><span class="line">        <span class="keyword">if</span> _g_.m.p.ptr() == p {</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        }</span><br><span class="line">        p.status = _Pidle</span><br><span class="line">        <span class="keyword">if</span> runqempty(p) {</span><br><span class="line">            pidleput(p)</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            p.m.set(mget())</span><br><span class="line">            p.link.set(runnablePs)</span><br><span class="line">            runnablePs = p</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    stealOrder.reset(<span class="keyword">uint32</span>(nprocs))</span><br><span class="line">    <span class="keyword">var</span> int32p *<span class="keyword">int32</span> = &amp;gomaxprocs <span class="comment">// make compiler check that gomaxprocs is an int32</span></span><br><span class="line">    atomic.Store((*<span class="keyword">uint32</span>)(unsafe.Pointer(int32p)), <span class="keyword">uint32</span>(nprocs))</span><br><span class="line">    <span class="keyword">return</span> runnablePs</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="newproc"><a href="#newproc" class="headerlink" title="newproc"></a>newproc</h3><blockquote><p>newproc是goroutine入口(main也是goroutine)</p></blockquote><ol><li>获取free g<br> 1.1 本地free g队列获取g<br> 1.2 若本地free g队列空，全局free g队列获取最多32个g到本地，优先取有栈g<br> 1.3 若全局free g队列空，创建新g，默认stack为2k，状态默认idle-&gt;dead，避免gc</li><li>栈信息拷贝</li><li>状态dead-&gt;runnable</li><li>从goidcache设置goid，采用了预分配id段，预分配加解锁一次，设置无需锁</li><li>保存g到p<br> 5.1 保存g到runnext，旧的runnext排到本地runnable g队列尾(大小固定256)<br> 5.2 若本地runnable g队列满，取一半放到全局runnable g队列</li><li>有空闲p，并且没有spinning状态m，调用wakep消化g。 main函数也是一个goroutine，通过mainStarted过滤，无需执行wakep<br> 6.1 wakep调用startm，首先查看有无全局midle，若有直接绑定gpm，若没有newm创建一个spinning的m，由m调用mstart找g处理</li></ol><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newproc</span><span class="params">(siz <span class="keyword">int32</span>, fn *funcval)</span></span> {</span><br><span class="line">    argp := add(unsafe.Pointer(&amp;fn), sys.PtrSize)</span><br><span class="line">    gp := getg() <span class="comment">// debug trace用</span></span><br><span class="line">    pc := getcallerpc()</span><br><span class="line">    systemstack(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> {</span><br><span class="line">        newproc1(fn, argp, siz, gp, pc)</span><br><span class="line">    })</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newproc1</span><span class="params">(fn *funcval, argp unsafe.Pointer, narg <span class="keyword">int32</span>, callergp *g, callerpc <span class="keyword">uintptr</span>)</span></span> {</span><br><span class="line">    _g_ := getg()</span><br><span class="line"></span><br><span class="line">    acquirem()</span><br><span class="line"></span><br><span class="line">    _p_ := _g_.m.p.ptr()</span><br><span class="line"></span><br><span class="line">    newg := gfget(_p_) <span class="comment">// 1. 获取free g</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果本地g和全局g都用完，创建新g，newg=new(g)</span></span><br><span class="line">    <span class="comment">// _StackMin=2048，因此默认创建出来的g栈大小为2k</span></span><br><span class="line">    <span class="keyword">if</span> newg == <span class="literal">nil</span> {</span><br><span class="line">        newg = malg(_StackMin)</span><br><span class="line">        casgstatus(newg, _Gidle, _Gdead) <span class="comment">// 状态_Gidle -&gt; _Gdead</span></span><br><span class="line">        allgadd(newg) <span class="comment">// publishes with a g-&gt;status of Gdead so GC scanner doesn't look at uninitialized stack.</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 拷贝栈信息</span></span><br><span class="line"></span><br><span class="line">    newg.ancestors = saveAncestors(callergp) <span class="comment">// 用于go trace</span></span><br><span class="line"></span><br><span class="line">    casgstatus(newg, _Gdead, _Grunnable) <span class="comment">// 3. 状态_Gdead -&gt; _Grunnable</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 防止每次访问全局计数器goidgen，采用预分配id段方式</span></span><br><span class="line">    <span class="keyword">if</span> _p_.goidcache == _p_.goidcacheend {</span><br><span class="line">        _p_.goidcache = atomic.Xadd64(&amp;sched.goidgen, _GoidCacheBatch)</span><br><span class="line">        _p_.goidcache -= _GoidCacheBatch - <span class="number">1</span></span><br><span class="line">        _p_.goidcacheend = _p_.goidcache + _GoidCacheBatch</span><br><span class="line">    }</span><br><span class="line">    newg.goid = <span class="keyword">int64</span>(_p_.goidcache)</span><br><span class="line">    _p_.goidcache++</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 保存g到p</span></span><br><span class="line">    runqput(_p_, newg, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6. 有空闲p，并且没有spinning状态m，重新唤醒p。 main函数也是一个goroutine，通过mainStarted过滤，无需执行wakep</span></span><br><span class="line">    <span class="keyword">if</span> atomic.Load(&amp;sched.npidle) != <span class="number">0</span> &amp;&amp; atomic.Load(&amp;sched.nmspinning) == <span class="number">0</span> &amp;&amp; mainStarted {</span><br><span class="line">        wakep()</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    releasem(_g_.m)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="p-runnext测试"><a href="#p-runnext测试" class="headerlink" title="p.runnext测试"></a>p.runnext测试</h4><p>单cpu下每次输出都为9012345678，9是runnext，0-8是本地runnable g队列</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">    runtime.GOMAXPROCS(<span class="number">1</span>) <span class="comment">// 如果设置为多核，不同核间顺序随机</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ {</span><br><span class="line">        <span class="keyword">go</span> fmt.Print(i, <span class="string">" "</span>)</span><br><span class="line">    }</span><br><span class="line">    runtime.Gosched()</span><br><span class="line">    time.Sleep(time.Second)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="number">9</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span></span><br></pre></td></tr></tbody></table></figure><h3 id="mstart"><a href="#mstart" class="headerlink" title="mstart"></a>mstart</h3><blockquote><p>mstart是m的入口，调用顺序mstart-&gt;schedule-&gt;execute</p></blockquote><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mstart</span><span class="params">()</span></span> {</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    mstart1()</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    mexit(osStack)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mstart1</span><span class="params">()</span></span> {</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    schedule()</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>schedule是单次调度的公共函数，找一个g放m上执行，调用excute</p></blockquote><ol><li>有locked g，直接在上面跑execute</li><li>61轮一次从全局runnable g取 (增加循环间隔，避免全局g被某几个goroutine占有)</li><li>从本地runnable g取，优先取runnext</li><li>调用findrunnable()获取runnable g，直到取到1个g为止</li><li>若当前m处于spinning，取消spinning</li><li>获取的g已有lockedm，绑定g和lockedm，从2.重新判断</li></ol><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">schedule</span><span class="params">()</span></span> {</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 有locked g，直接在上面跑execute</span></span><br><span class="line">    <span class="keyword">if</span> _g_.m.lockedg != <span class="number">0</span> {</span><br><span class="line">        stoplockedm()</span><br><span class="line">        execute(_g_.m.lockedg.ptr(), <span class="literal">false</span>) <span class="comment">// Never returns.</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">top:</span><br><span class="line">    pp := _g_.m.p.ptr()</span><br><span class="line">    pp.preempt = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> sched.gcwaiting != <span class="number">0</span> {</span><br><span class="line">        gcstopm()</span><br><span class="line">        <span class="keyword">goto</span> top</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> gp *g</span><br><span class="line">    <span class="keyword">var</span> inheritTime <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 61轮一次从全局runnable g取</span></span><br><span class="line">    <span class="keyword">if</span> gp == <span class="literal">nil</span> {</span><br><span class="line">        <span class="comment">// Check the global runnable queue once in a while to ensure fairness.</span></span><br><span class="line">        <span class="comment">// Otherwise two goroutines can completely occupy the local runqueue</span></span><br><span class="line">        <span class="comment">// by constantly respawning each other.</span></span><br><span class="line">        <span class="keyword">if</span> _g_.m.p.ptr().schedtick%<span class="number">61</span> == <span class="number">0</span> &amp;&amp; sched.runqsize &gt; <span class="number">0</span> {</span><br><span class="line">            lock(&amp;sched.lock)</span><br><span class="line">            gp = globrunqget(_g_.m.p.ptr(), <span class="number">1</span>)</span><br><span class="line">            unlock(&amp;sched.lock)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 从本地runnable g取，优先取runnext</span></span><br><span class="line">    <span class="keyword">if</span> gp == <span class="literal">nil</span> {</span><br><span class="line">        gp, inheritTime = runqget(_g_.m.p.ptr())</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 4. 调用findrunnable()获取runnable g，直到取到1个g为止</span></span><br><span class="line">    <span class="keyword">if</span> gp == <span class="literal">nil</span> {</span><br><span class="line">        gp, inheritTime = findrunnable() <span class="comment">// blocks until work is available</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 若当前m处于spinning，取消spinning</span></span><br><span class="line">    <span class="keyword">if</span> _g_.m.spinning {</span><br><span class="line">        resetspinning()</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6. 获取的g已有lockedm，绑定g和lockedm，从2.重新判断</span></span><br><span class="line">    <span class="keyword">if</span> gp.lockedm != <span class="number">0</span> {</span><br><span class="line">        <span class="comment">// Hands off own p to the locked m,</span></span><br><span class="line">        <span class="comment">// then blocks waiting for a new p.</span></span><br><span class="line">        startlockedm(gp)</span><br><span class="line">        <span class="keyword">goto</span> top</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    execute(gp, inheritTime)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>findrunnable()尝试从本地g/全局g/net poll/其他p偷取g或timer g/执行gc 各种途径find a work</p></blockquote><ol><li>再尝试从本地runnable g取</li><li>从全局runnable g取</li><li>从net poll取g</li><li>大量m已处于spinning，而非idle的p数量少，通常为代码并发度低，跳过5.</li><li>从其他p偷取一半本地runnable g，尝试4次，最后一次会尝试偷取runNext和p2的到期timer g<br> 5.1 若有timer，可能有timer g结束入队，重新从1.开始判断</li><li>gc阶段，查看有无gc工作可做</li><li>再尝试从全局runnable g取</li><li>释放p，放回全局pidle<br> 8.1 m状态变为非spinning，nmspinning计数-1</li><li>从allp重新获取idle的p，并设置spinning和nmspinning+1，重新从1.开始判断</li><li>处于gc阶段，重新从6.开始判断</li><li>再次从net poll取g</li><li>将m放入全局idle m，并与当前g关联，重新从1.开始判断</li></ol><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findrunnable</span><span class="params">()</span> <span class="params">(gp *g, inheritTime <span class="keyword">bool</span>)</span></span> {</span><br><span class="line">    _g_ := getg()</span><br><span class="line"></span><br><span class="line">top:</span><br><span class="line">    _p_ := _g_.m.p.ptr()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 再尝试从本地runnable g取</span></span><br><span class="line">    <span class="keyword">if</span> gp, inheritTime := runqget(_p_); gp != <span class="literal">nil</span> {</span><br><span class="line">        <span class="keyword">return</span> gp, inheritTime</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 从全局runnable g取</span></span><br><span class="line">    <span class="keyword">if</span> sched.runqsize != <span class="number">0</span> {</span><br><span class="line">        lock(&amp;sched.lock)</span><br><span class="line">        gp := globrunqget(_p_, <span class="number">0</span>)</span><br><span class="line">        unlock(&amp;sched.lock)</span><br><span class="line">        <span class="keyword">if</span> gp != <span class="literal">nil</span> {</span><br><span class="line">            <span class="keyword">return</span> gp, <span class="literal">false</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 从net poll取g</span></span><br><span class="line"></span><br><span class="line">    procs := <span class="keyword">uint32</span>(gomaxprocs)</span><br><span class="line">    ranTimer := <span class="literal">false</span></span><br><span class="line">    <span class="comment">// If number of spinning M's &gt;= number of busy P's, block.</span></span><br><span class="line">    <span class="comment">// 4. 大量m已处于spinning，而非idle的p数量少，通常为代码并发度低</span></span><br><span class="line">    <span class="keyword">if</span> !_g_.m.spinning &amp;&amp; <span class="number">2</span>*atomic.Load(&amp;sched.nmspinning) &gt;= procs-atomic.Load(&amp;sched.npidle) {</span><br><span class="line">        <span class="keyword">goto</span> stop</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> !_g_.m.spinning {</span><br><span class="line">        _g_.m.spinning = <span class="literal">true</span> <span class="comment">// 设置为spinning</span></span><br><span class="line">        atomic.Xadd(&amp;sched.nmspinning, <span class="number">1</span>)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 从其他p偷取一半本地runnable g，尝试4次，最后一次会尝试偷取runNext和p2的到期timer g</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">4</span>; i++ {</span><br><span class="line">        <span class="keyword">for</span> enum := stealOrder.start(fastrand()); !enum.done(); enum.next() {</span><br><span class="line">            <span class="keyword">if</span> sched.gcwaiting != <span class="number">0</span> {</span><br><span class="line">                <span class="keyword">goto</span> top</span><br><span class="line">            }</span><br><span class="line">            stealRunNextG := i &gt; <span class="number">2</span> <span class="comment">// first look for ready queues with more than 1 g</span></span><br><span class="line">            p2 := allp[enum.position()]</span><br><span class="line">            <span class="keyword">if</span> _p_ == p2 {</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> gp := runqsteal(_p_, p2, stealRunNextG); gp != <span class="literal">nil</span> {</span><br><span class="line">                <span class="keyword">return</span> gp, <span class="literal">false</span></span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 偷取p2的timer g</span></span><br><span class="line">            <span class="keyword">if</span> i &gt; <span class="number">2</span> &amp;&amp; shouldStealTimers(p2) {</span><br><span class="line">                tnow, w, ran := checkTimers(p2, now)</span><br><span class="line">                now = tnow</span><br><span class="line">                <span class="keyword">if</span> w != <span class="number">0</span> &amp;&amp; (pollUntil == <span class="number">0</span> || w &lt; pollUntil) {</span><br><span class="line">                    pollUntil = w</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">if</span> ran {</span><br><span class="line">                    <span class="comment">// p2的timer g入队，可以偷取</span></span><br><span class="line">                    <span class="keyword">if</span> gp, inheritTime := runqget(_p_); gp != <span class="literal">nil</span> {</span><br><span class="line">                        <span class="keyword">return</span> gp, inheritTime</span><br><span class="line">                    }</span><br><span class="line">                    ranTimer = <span class="literal">true</span></span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 若有timer，可能有timer g结束入队，重新从1.开始判断</span></span><br><span class="line">    <span class="keyword">if</span> ranTimer {</span><br><span class="line">        <span class="comment">// Running a timer may have made some goroutine ready.</span></span><br><span class="line">        <span class="keyword">goto</span> top</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">stop:</span><br><span class="line">    <span class="comment">// 6. gc阶段，查看有无gc工作可做</span></span><br><span class="line">    <span class="keyword">if</span> gcBlackenEnabled != <span class="number">0</span> &amp;&amp; _p_.gcBgMarkWorker != <span class="number">0</span> &amp;&amp; gcMarkWorkAvailable(_p_) {</span><br><span class="line">        _p_.gcMarkWorkerMode = gcMarkWorkerIdleMode</span><br><span class="line">        gp := _p_.gcBgMarkWorker.ptr()</span><br><span class="line">        casgstatus(gp, _Gwaiting, _Grunnable)</span><br><span class="line">        <span class="keyword">if</span> trace.enabled {</span><br><span class="line">            traceGoUnpark(gp, <span class="number">0</span>)</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> gp, <span class="literal">false</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 7. 再尝试从全局runnable g取</span></span><br><span class="line">    <span class="keyword">if</span> sched.runqsize != <span class="number">0</span> {</span><br><span class="line">        gp := globrunqget(_p_, <span class="number">0</span>)</span><br><span class="line">        unlock(&amp;sched.lock)</span><br><span class="line">        <span class="keyword">return</span> gp, <span class="literal">false</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 8. 释放m的p，放回全局pidle</span></span><br><span class="line">    <span class="keyword">if</span> releasep() != _p_ {</span><br><span class="line">        throw(<span class="string">"findrunnable: wrong p"</span>)</span><br><span class="line">    }</span><br><span class="line">    pidleput(_p_)</span><br><span class="line">    unlock(&amp;sched.lock)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 8.1 m状态变为非spinning，nmspinning-1</span></span><br><span class="line">    wasSpinning := _g_.m.spinning</span><br><span class="line">    <span class="keyword">if</span> _g_.m.spinning {</span><br><span class="line">        _g_.m.spinning = <span class="literal">false</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">int32</span>(atomic.Xadd(&amp;sched.nmspinning, <span class="number">-1</span>)) &lt; <span class="number">0</span> {</span><br><span class="line">            throw(<span class="string">"findrunnable: negative nmspinning"</span>)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 9. 从allp重新获取idle的p，并设置spinning和nmspinning+1，重新从1.开始判断</span></span><br><span class="line">    <span class="keyword">for</span> _, _p_ := <span class="keyword">range</span> allpSnapshot {</span><br><span class="line">        <span class="keyword">if</span> !runqempty(_p_) {</span><br><span class="line">            lock(&amp;sched.lock)</span><br><span class="line">            _p_ = pidleget()</span><br><span class="line">            unlock(&amp;sched.lock)</span><br><span class="line">            <span class="keyword">if</span> _p_ != <span class="literal">nil</span> {</span><br><span class="line">                acquirep(_p_)</span><br><span class="line">                <span class="keyword">if</span> wasSpinning {</span><br><span class="line">                    _g_.m.spinning = <span class="literal">true</span></span><br><span class="line">                    atomic.Xadd(&amp;sched.nmspinning, <span class="number">1</span>)</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">goto</span> top</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 10. 处于gc阶段，重新从6.开始判断</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 11. 再次从net poll取g</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 12. 将m放入全局idle m，并与当前g关联，重新从1.开始判断</span></span><br><span class="line">    stopm()</span><br><span class="line">    <span class="keyword">goto</span> top</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>execute设置g状态为running，并执行g</p></blockquote><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">execute</span><span class="params">(gp *g, inheritTime <span class="keyword">bool</span>)</span></span> {</span><br><span class="line">    _g_ := getg()</span><br><span class="line"></span><br><span class="line">    _g_.m.curg = gp</span><br><span class="line">    gp.m = _g_.m</span><br><span class="line">    casgstatus(gp, _Grunnable, _Grunning)</span><br><span class="line">    <span class="keyword">if</span> !inheritTime {</span><br><span class="line">        _g_.m.p.ptr().schedtick++</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    gogo(&amp;gp.sched) <span class="comment">// gp.sched在newproc中设置，调用asm_arm64.s汇编函数gogo执行g代码</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="抢占"><a href="#抢占" class="headerlink" title="抢占"></a>抢占</h2><blockquote><p><code>runtime/proc.go</code>的main函数中注册了sysmon</p></blockquote><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">    g := getg()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Max stack size is 1 GB on 64-bit, 250 MB on 32-bit.</span></span><br><span class="line">    <span class="keyword">if</span> sys.PtrSize == <span class="number">8</span> {</span><br><span class="line">        maxstacksize = <span class="number">1000000000</span></span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        maxstacksize = <span class="number">250000000</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Allow newproc to start new Ms.</span></span><br><span class="line">    mainStarted = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> GOARCH != <span class="string">"wasm"</span> { <span class="comment">// no threads on wasm yet, so no sysmon</span></span><br><span class="line">        systemstack(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> {</span><br><span class="line">            newm(sysmon, <span class="literal">nil</span>)</span><br><span class="line">        })</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    fn := main_main <span class="comment">// go:linkname main_main main.main</span></span><br><span class="line">    fn()</span><br><span class="line"></span><br><span class="line">    exit(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> {</span><br><span class="line">        <span class="keyword">var</span> x *<span class="keyword">int32</span></span><br><span class="line">        *x = <span class="number">0</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p><code>sysmon</code>为死循环，调用<code>retake</code>来调度长时间执行的g；调用<code>gcTrigger.test</code>方法判断2分钟没执行过gc；如果设置strace，根据设置间隔输出debug信息</p></blockquote><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sysmon</span><span class="params">()</span></span> {</span><br><span class="line">    lock(&amp;sched.lock)</span><br><span class="line">    sched.nmsys++</span><br><span class="line">    checkdead()</span><br><span class="line">    unlock(&amp;sched.lock)</span><br><span class="line"></span><br><span class="line">    lasttrace := <span class="keyword">int64</span>(<span class="number">0</span>)</span><br><span class="line">    idle := <span class="number">0</span></span><br><span class="line">    delay := <span class="keyword">uint32</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> {</span><br><span class="line">        <span class="keyword">if</span> idle == <span class="number">0</span> { <span class="comment">// start with 20us sleep...</span></span><br><span class="line">            delay = <span class="number">20</span></span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> idle &gt; <span class="number">50</span> { <span class="comment">// start doubling the sleep after 1ms...</span></span><br><span class="line">            delay *= <span class="number">2</span></span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> delay &gt; <span class="number">10</span>*<span class="number">1000</span> { <span class="comment">// up to 10ms</span></span><br><span class="line">            delay = <span class="number">10</span> * <span class="number">1000</span></span><br><span class="line">        }</span><br><span class="line">        usleep(delay)</span><br><span class="line">        now := nanotime()</span><br><span class="line">        <span class="comment">// retake P's blocked in syscalls</span></span><br><span class="line">        <span class="comment">// and preempt long running G's</span></span><br><span class="line">        <span class="keyword">if</span> retake(now) != <span class="number">0</span> {</span><br><span class="line">            idle = <span class="number">0</span></span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            idle++</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// check if we need to force a GC，判断在t.test()中</span></span><br><span class="line">        <span class="keyword">if</span> t := (gcTrigger{kind: gcTriggerTime, now: now}); t.test() &amp;&amp; atomic.Load(&amp;forcegc.idle) != <span class="number">0</span> {</span><br><span class="line">            lock(&amp;forcegc.lock)</span><br><span class="line">            forcegc.idle = <span class="number">0</span></span><br><span class="line">            <span class="keyword">var</span> list gList</span><br><span class="line">            list.push(forcegc.g)</span><br><span class="line">            injectglist(&amp;list)</span><br><span class="line">            unlock(&amp;forcegc.lock)</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> debug.schedtrace &gt; <span class="number">0</span> &amp;&amp; lasttrace+<span class="keyword">int64</span>(debug.schedtrace)*<span class="number">1000000</span> &lt;= now {</span><br><span class="line">            lasttrace = now</span><br><span class="line">            schedtrace(debug.scheddetail &gt; <span class="number">0</span>)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p><code>retake</code>遍历allp判断执行超过10ms的p，传给<code>preemptone</code></p></blockquote><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> forcePreemptNS = <span class="number">10</span> * <span class="number">1000</span> * <span class="number">1000</span> <span class="comment">// 10ms</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">retake</span><span class="params">(now <span class="keyword">int64</span>)</span> <span class="title">uint32</span></span> {</span><br><span class="line">    n := <span class="number">0</span></span><br><span class="line">    lock(&amp;allpLock)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(allp); i++ {</span><br><span class="line">        _p_ := allp[i]</span><br><span class="line">        <span class="keyword">if</span> _p_ == <span class="literal">nil</span> {</span><br><span class="line">            <span class="comment">// 在procresize代码中，还没初始化</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        }</span><br><span class="line">        pd := &amp;_p_.sysmontick</span><br><span class="line">        s := _p_.status</span><br><span class="line">        sysretake := <span class="literal">false</span></span><br><span class="line">        <span class="keyword">if</span> s == _Prunning || s == _Psyscall {</span><br><span class="line">            <span class="comment">// Preempt G if it's running for too long.</span></span><br><span class="line">            t := <span class="keyword">int64</span>(_p_.schedtick)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">int64</span>(pd.schedtick) != t {</span><br><span class="line">                pd.schedtick = <span class="keyword">uint32</span>(t)</span><br><span class="line">                pd.schedwhen = now</span><br><span class="line">            } <span class="keyword">else</span> <span class="keyword">if</span> pd.schedwhen+forcePreemptNS &lt;= now {</span><br><span class="line">                preemptone(_p_)</span><br><span class="line">                sysretake = <span class="literal">true</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    unlock(&amp;allpLock)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">uint32</span>(n)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p><code>preemptone</code>设置g.stackguard0=stackPreempt。<br>创建新g后stack默认2k，之后根据代码执行不断调整stack大小。<br>调用汇编函数<code>morestack</code>，CALL <code>newstack</code>时检查<strong>stackPreempt</strong>，将g放回全局runnable g队列，并调用schedule</p></blockquote><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">preemptone</span><span class="params">(_p_ *p)</span> <span class="title">bool</span></span> {</span><br><span class="line">    mp := _p_.m.ptr()</span><br><span class="line">    gp := mp.curg</span><br><span class="line">    gp.preempt = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Every call in a go routine checks for stack overflow by</span></span><br><span class="line">    <span class="comment">// comparing the current stack pointer to gp-&gt;stackguard0.</span></span><br><span class="line">    <span class="comment">// Setting gp-&gt;stackguard0 to StackPreempt folds</span></span><br><span class="line">    <span class="comment">// preemption into the normal stack overflow check.</span></span><br><span class="line">    gp.stackguard0 = stackPreempt</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// stack.go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newstack</span><span class="params">()</span></span> {</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    preempt := atomic.Loaduintptr(&amp;gp.stackguard0) == stackPreempt</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> preempt {</span><br><span class="line">        <span class="keyword">if</span> !canPreemptM(thisg.m) {</span><br><span class="line">            <span class="comment">// Let the goroutine keep running for now.</span></span><br><span class="line">            <span class="comment">// gp-&gt;preempt is set, so it will be preempted next time.</span></span><br><span class="line">            gp.stackguard0 = gp.stack.lo + _StackGuard</span><br><span class="line">            gogo(&amp;gp.sched) <span class="comment">// never return</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> preempt {</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将g放回全局runnable g队列，调用schedule</span></span><br><span class="line">        gopreempt_m(gp)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="schedtrace"><a href="#schedtrace" class="headerlink" title="schedtrace"></a>schedtrace</h2><ul><li>gomaxprocs:      p数量</li><li>idleprocs:       idle p数量</li><li>threads:         m数量</li><li>spinningthreads: spinning状态的m</li><li>nmidle:          idle m数量</li><li>runqueue:        全局runnable g队列长度</li><li>[x, y, z..]:     per p的本地runnable g队列长度</li></ul><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">schedtrace</span><span class="params">(detailed <span class="keyword">bool</span>)</span></span> {</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"SCHED "</span>, (now-starttime)/<span class="number">1e6</span>, <span class="string">"ms: gomaxprocs="</span>, gomaxprocs, <span class="string">" idleprocs="</span>, sched.npidle, <span class="string">" threads="</span>, mcount(), <span class="string">" spinningthreads="</span>, sched.nmspinning, <span class="string">" idlethreads="</span>, sched.nmidle, <span class="string">" runqueue="</span>, sched.runqsize)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="gc"><a href="#gc" class="headerlink" title="gc"></a>gc</h2><p>runtime/mgc.go</p><p>通过<code>gcSetTriggerRatio</code>动态调整gc速度，略</p><h2 id="tool"><a href="#tool" class="headerlink" title="tool"></a>tool</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> GODEBUG=schedtrace=1000 godoc -http=:6060</span></span><br><span class="line">SCHED 0ms: gomaxprocs=4 idleprocs=3 threads=3 spinningthreads=0 idlethreads=0 runqueue=0 [0 0 0 0]</span><br><span class="line">using module mode; GOMOD=/PATHTO/go.mod</span><br><span class="line">SCHED 0ms: gomaxprocs=4 idleprocs=1 threads=4 spinningthreads=1 idlethreads=0 runqueue=0 [1 0 0 0]</span><br><span class="line">SCHED 1005ms: gomaxprocs=4 idleprocs=4 threads=20 spinningthreads=0 idlethreads=15 runqueue=0 [0 0 0 0]</span><br><span class="line">SCHED 2013ms: gomaxprocs=4 idleprocs=4 threads=20 spinningthreads=0 idlethreads=16 runqueue=0 [0 0 0 0]</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go inferface</title>
      <link href="2020/05/07/go/interface/"/>
      <url>2020/05/07/go/interface/</url>
      
        <content type="html"><![CDATA[<h2 id="接口类型判断"><a href="#接口类型判断" class="headerlink" title="接口类型判断"></a>接口类型判断</h2><ol><li>对于S类型仅能看到S的方法，<em>S类型能看到S和</em>S的所有方法</li><li>接口类型判断方法，判断时严格匹配类型的可见函数</li></ol><blockquote><p>变量.(类型) // 判断是不是某个具体类型<br>switch 变量.(type) // 返回具体类型的值拷贝，必须搭配swith语句</p></blockquote><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> I1 <span class="keyword">interface</span> {</span><br><span class="line">    add()</span><br><span class="line">    sqr()</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> I2 <span class="keyword">interface</span> {</span><br><span class="line">    sqr()</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> S <span class="keyword">struct</span> {</span><br><span class="line">    n <span class="keyword">int</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *S)</span> <span class="title">add</span><span class="params">()</span></span> {</span><br><span class="line">    s.n++</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s S)</span> <span class="title">sqr</span><span class="params">()</span></span> {</span><br><span class="line">    s.n = s.n * s.n</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestI1</span><span class="params">(i I1)</span></span> {</span><br><span class="line">    i.add()</span><br><span class="line">    i.sqr()</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestI2</span><span class="params">(i I2)</span></span> {</span><br><span class="line">    i.sqr()</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">PrintIf</span><span class="params">(i <span class="keyword">interface</span>{})</span></span> {</span><br><span class="line">    <span class="keyword">if</span> v, ok := i.(I1); ok {</span><br><span class="line">        fmt.Printf(<span class="string">"I1 type[%T] %v\n"</span>, v, v)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> v, ok := i.(I2); ok {</span><br><span class="line">        fmt.Printf(<span class="string">"I2 type[%T] %v\n"</span>, v, v)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">PrintSwtich</span><span class="params">(i <span class="keyword">interface</span>{})</span></span> {</span><br><span class="line">    fmt.Printf(<span class="string">"%p %v\n"</span>, &amp;i, i)</span><br><span class="line">    <span class="keyword">switch</span> t := i.(<span class="keyword">type</span>) {</span><br><span class="line">    <span class="keyword">case</span> I1:</span><br><span class="line">        fmt.Printf(<span class="string">"I1 type[%T] %v\n"</span>, t, t)</span><br><span class="line">    <span class="keyword">case</span> I2:</span><br><span class="line">        fmt.Printf(<span class="string">"I2 type[%T] %v\n"</span>, t, t)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        fmt.Printf(<span class="string">"unknow\n"</span>)</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="keyword">var</span> s S</span><br><span class="line"></span><br><span class="line">    TestI1(&amp;s)</span><br><span class="line">    <span class="comment">// TestI1(s)</span></span><br><span class="line">    <span class="comment">// cannot use s (type S) as type I1 in argument to TestI1:</span></span><br><span class="line">    <span class="comment">// does not implement I1 (add method has pointer receiver)</span></span><br><span class="line"></span><br><span class="line">    TestI2(&amp;s)</span><br><span class="line">    TestI2(s)</span><br><span class="line"></span><br><span class="line">    PrintIf(s)</span><br><span class="line">    PrintIf(&amp;s)</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">"------------\n"</span>)</span><br><span class="line">    PrintSwtich(s)</span><br><span class="line">    PrintSwtich(&amp;s)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">I2 <span class="keyword">type</span>[main.S] {<span class="number">1</span>} <span class="comment">// S类型只能看到sqr方法，仅能匹配I2</span></span><br><span class="line">I1 <span class="keyword">type</span>[*main.S] &amp;{<span class="number">1</span>} <span class="comment">// *S类型可以匹配I1</span></span><br><span class="line">I2 <span class="keyword">type</span>[*main.S] &amp;{<span class="number">1</span>} <span class="comment">// 和I2</span></span><br><span class="line">------------</span><br><span class="line"><span class="number">0xc0001021e0</span> {<span class="number">1</span>}</span><br><span class="line">I2 <span class="keyword">type</span>[main.S] {<span class="number">1</span>} <span class="comment">// S类型只能看到sqr方法，仅能匹配I2</span></span><br><span class="line"><span class="number">0xc0001021f0</span> &amp;{<span class="number">1</span>}</span><br><span class="line">I1 <span class="keyword">type</span>[*main.S] &amp;{<span class="number">1</span>} <span class="comment">// *S类型可以匹配I1，switch分支退出</span></span><br></pre></td></tr></tbody></table></figure><h2 id="接口组成"><a href="#接口组成" class="headerlink" title="接口组成"></a>接口组成</h2><p>从接口源码看，接口组成为<code>类型</code>和<code>数据</code>，判断两个接口是否相等，就是看<code>类型</code>和<code>数据</code>是否相等<br><code>类型</code>和<code>数据</code>都为nil，才代表该接口为nil</p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="keyword">interface</span>{}</span><br><span class="line"><span class="keyword">var</span> b <span class="keyword">interface</span>{} = (*<span class="keyword">int</span>)(<span class="literal">nil</span>)</span><br><span class="line">fmt.Println(a == <span class="literal">nil</span>, b == <span class="literal">nil</span>) <span class="comment">//true false</span></span><br></pre></td></tr></tbody></table></figure><h2 id="接口类型转换-多态"><a href="#接口类型转换-多态" class="headerlink" title="接口类型转换(多态)"></a>接口类型转换(多态)</h2><p>不包含任何方法的空接口A，任意类型都符合转换成A<br>即使B=nil，A本身非nil，仅A.数据=nil<br>若要对A判断空，需构造B的空对象用于A的判断</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> A <span class="keyword">interface</span>{}</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> B <span class="keyword">struct</span>{}</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b_nil = B{}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span> <span class="title">A</span></span> {</span><br><span class="line">    <span class="keyword">var</span> b *B <span class="comment">// b = nil</span></span><br><span class="line">    <span class="keyword">return</span> b <span class="comment">// 函数返回触发值拷贝，A.类型=*B, A.数据=nil</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f_nil</span><span class="params">()</span> <span class="title">A</span></span> {</span><br><span class="line">    <span class="keyword">return</span> b_nil</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">    a := f() <span class="comment">// a = (A)(nil&lt;*B&gt;)，此处类型为A，数据为*B类型的nil</span></span><br><span class="line">    <span class="keyword">if</span> a == <span class="literal">nil</span> {</span><br><span class="line">        fmt.Println(<span class="string">"nil B"</span>)</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        fmt.Println(<span class="string">"non nil A"</span>)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    a = f_nil()</span><br><span class="line">    <span class="keyword">if</span> a == b_nil {</span><br><span class="line">        fmt.Println(<span class="string">"nil B"</span>)</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">non <span class="literal">nil</span> A</span><br><span class="line"><span class="literal">nil</span> B</span><br></pre></td></tr></tbody></table></figure><h2 id="interface-和-interface"><a href="#interface-和-interface" class="headerlink" title="interface{}和*interface{}"></a>interface{}和*interface{}</h2><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> S <span class="keyword">struct</span> {</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// all type is OK</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">(x <span class="keyword">interface</span>{})</span></span> {</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// only *interface{} is OK</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">g</span><span class="params">(x *<span class="keyword">interface</span>{})</span></span> {</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">    s := S{} <span class="comment">// var</span></span><br><span class="line">    p := &amp;s  <span class="comment">// point</span></span><br><span class="line">    f(s)     <span class="comment">// var -&gt; interface: OK</span></span><br><span class="line">    g(s)     <span class="comment">// error</span></span><br><span class="line">    f(p)     <span class="comment">// point -&gt; interface: OK</span></span><br><span class="line">    g(p)     <span class="comment">// error</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="接口结构"><a href="#接口结构" class="headerlink" title="接口结构"></a>接口结构</h2><p>接口分空接口和非空接口，runtime2.go:</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 空接口定义</span></span><br><span class="line"><span class="keyword">type</span> eface <span class="keyword">struct</span> {</span><br><span class="line">    _type *_type</span><br><span class="line">    data  unsafe.Pointer</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 非空接口定义</span></span><br><span class="line"><span class="keyword">type</span> iface <span class="keyword">struct</span> {</span><br><span class="line">    tab  *itab</span><br><span class="line">    data unsafe.Pointer <span class="comment">// 指向runtime申请的内存，存储实际数据</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> itab <span class="keyword">struct</span> {</span><br><span class="line">    inter *interfacetype <span class="comment">// 接口类型</span></span><br><span class="line">    _type *_type <span class="comment">// 数据类型，iface.data指向值的类型信息</span></span><br><span class="line">    hash  <span class="keyword">uint32</span> <span class="comment">// copy of _type.hash. Used for type switches. golang Duck-typing机制</span></span><br><span class="line">    _     [<span class="number">4</span>]<span class="keyword">byte</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 函数地址占位符</span></span><br><span class="line">    <span class="comment">// fun[0]==0 means _type does not implement inter.</span></span><br><span class="line">    <span class="comment">// fun[0]!=0，fun存放第一个接口方法的地址，其他方法依次向后存放，空间换时间，对应_type中也可以查到方法，使用时不用再动态查找</span></span><br><span class="line">    fun   [<span class="number">1</span>]<span class="keyword">uintptr</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> interfacetype <span class="keyword">struct</span> {</span><br><span class="line">    typ     _type</span><br><span class="line">    pkgpath name <span class="comment">// 接口包名</span></span><br><span class="line">    mhdr    []imethod <span class="comment">// 接口中定义的函数，由连接器嵌入</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> imethod <span class="keyword">struct</span> {</span><br><span class="line">    name nameOff <span class="comment">// name of method</span></span><br><span class="line">    ityp typeOff <span class="comment">// .(*FuncType) underneath</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> _type <span class="keyword">struct</span> {</span><br><span class="line">    size       <span class="keyword">uintptr</span></span><br><span class="line">    ptrdata    <span class="keyword">uintptr</span> <span class="comment">// size of memory prefix holding all pointers</span></span><br><span class="line">    hash       <span class="keyword">uint32</span></span><br><span class="line">    tflag      tflag</span><br><span class="line">    align      <span class="keyword">uint8</span></span><br><span class="line">    fieldAlign <span class="keyword">uint8</span></span><br><span class="line">    kind       <span class="keyword">uint8</span></span><br><span class="line">    <span class="comment">// function for comparing objects of this type</span></span><br><span class="line">    <span class="comment">// (ptr to object A, ptr to object B) -&gt; ==?</span></span><br><span class="line">    equal <span class="function"><span class="keyword">func</span><span class="params">(unsafe.Pointer, unsafe.Pointer)</span> <span class="title">bool</span></span></span><br><span class="line">    <span class="comment">// gcdata stores the GC type data for the garbage collector.</span></span><br><span class="line">    <span class="comment">// If the KindGCProg bit is set in kind, gcdata is a GC program.</span></span><br><span class="line">    <span class="comment">// Otherwise it is a ptrmask bitmap. See mbitmap.go for details.</span></span><br><span class="line">    gcdata    *<span class="keyword">byte</span></span><br><span class="line">    str       nameOff</span><br><span class="line">    ptrToThis typeOff</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="全局itab"><a href="#全局itab" class="headerlink" title="全局itab"></a>全局itab</h2><p>全局itab使用数组保存，iface.go:</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> itabInitSize = <span class="number">512</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    itabLock      mutex                               <span class="comment">// lock for accessing itab table</span></span><br><span class="line">    itabTable     = &amp;itabTableInit                    <span class="comment">// pointer to current table</span></span><br><span class="line">    itabTableInit = itabTableType{size: itabInitSize} <span class="comment">// starter table</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Note: change the formula in the mallocgc call in itabAdd if you change these fields.</span></span><br><span class="line"><span class="keyword">type</span> itabTableType <span class="keyword">struct</span> {</span><br><span class="line">    size    <span class="keyword">uintptr</span>             <span class="comment">// 数组大小，2的幂次方</span></span><br><span class="line">    count   <span class="keyword">uintptr</span>             <span class="comment">// 已保存记录数</span></span><br><span class="line">    entries [itabInitSize]*itab <span class="comment">// *itab数组，初始大小512</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="接口转换函数"><a href="#接口转换函数" class="headerlink" title="接口转换函数"></a>接口转换函数</h2><p>接口转换调用conv系列函数</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类型转为空接口，</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">convT2E</span><span class="params">(t *_type, elem unsafe.Pointer)</span> <span class="params">(e eface)</span></span> {</span><br><span class="line">    <span class="keyword">if</span> raceenabled {</span><br><span class="line">        raceReadObjectPC(t, elem, getcallerpc(), funcPC(convT2E))</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> msanenabled {</span><br><span class="line">        msanread(elem, t.size)</span><br><span class="line">    }</span><br><span class="line">    x := mallocgc(t.size, t, <span class="literal">true</span>) <span class="comment">// mallocgc内存用于拷贝源值</span></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> We allocate a zeroed object only to overwrite it with actual data.</span></span><br><span class="line">    <span class="comment">// Figure out how to avoid zeroing. Also below in convT2Eslice, convT2I, convT2Islice.</span></span><br><span class="line">    typedmemmove(t, x, elem)</span><br><span class="line">    e._type = t <span class="comment">// type直接复制源type</span></span><br><span class="line">    e.data = x <span class="comment">// data指针指向mallocgc内存</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类型转为非空接口</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">convT2I</span><span class="params">(tab *itab, elem unsafe.Pointer)</span> <span class="params">(i iface)</span></span> {</span><br><span class="line">    t := tab._type</span><br><span class="line">    <span class="keyword">if</span> raceenabled {</span><br><span class="line">        raceReadObjectPC(t, elem, getcallerpc(), funcPC(convT2I))</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> msanenabled {</span><br><span class="line">        msanread(elem, t.size)</span><br><span class="line">    }</span><br><span class="line">    x := mallocgc(t.size, t, <span class="literal">true</span>) <span class="comment">// // mallocgc内存用于拷贝源值</span></span><br><span class="line">    typedmemmove(t, x, elem)</span><br><span class="line">    i.tab = tab <span class="comment">// tab指向类型T的同一个tab，由编译器生成</span></span><br><span class="line">    i.data = x <span class="comment">// data指针指向mallocgc内存</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接口转为接口</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">convI2I</span><span class="params">(inter *interfacetype, i iface)</span> <span class="params">(r iface)</span></span> {</span><br><span class="line">    tab := i.tab</span><br><span class="line">    <span class="keyword">if</span> tab == <span class="literal">nil</span> {</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> tab.inter == inter {</span><br><span class="line">        r.tab = tab</span><br><span class="line">        r.data = i.data</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    }</span><br><span class="line">    r.tab = getitab(inter, tab._type, <span class="literal">false</span>) <span class="comment">// 调用getitab函数获取tab</span></span><br><span class="line">    r.data = i.data</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 其他特定类型转换，如果是0值指向zeroVal[0]，非0值使用mallocgc开辟内存空间</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">convTstring</span><span class="params">(val <span class="keyword">string</span>)</span> <span class="params">(x unsafe.Pointer)</span></span> {</span><br><span class="line">    <span class="keyword">if</span> val == <span class="string">""</span> {</span><br><span class="line">        x = unsafe.Pointer(&amp;zeroVal[<span class="number">0</span>])</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        x = mallocgc(unsafe.Sizeof(val), stringType, <span class="literal">true</span>)</span><br><span class="line">        *(*<span class="keyword">string</span>)(x) = val</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="getitab流程"><a href="#getitab流程" class="headerlink" title="getitab流程"></a>getitab流程</h2><ol><li>t=itabTable地址，保存地址避免执行find时地址被改变，t.find查找，不加锁</li><li>加锁使用itabTable.find，在itabAdd函数中新添加的itab在此处查到</li><li>加锁后没查到，新建m，调用itabAdd函数添加到itabTable</li><li>itabAdd函数中，容量超过3/4会进行翻倍扩容</li></ol><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getitab</span><span class="params">(inter *interfacetype, typ *_type, canfail <span class="keyword">bool</span>)</span> *<span class="title">itab</span></span> {</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(inter.mhdr) == <span class="number">0</span> {</span><br><span class="line">        throw(<span class="string">"internal error - misuse of itab"</span>)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// easy case</span></span><br><span class="line">    <span class="keyword">if</span> typ.tflag&amp;tflagUncommon == <span class="number">0</span> {</span><br><span class="line">        <span class="keyword">if</span> canfail {</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        }</span><br><span class="line">        name := inter.typ.nameOff(inter.mhdr[<span class="number">0</span>].name)</span><br><span class="line">        <span class="built_in">panic</span>(&amp;TypeAssertionError{<span class="literal">nil</span>, typ, &amp;inter.typ, name.name()})</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> m *itab</span><br><span class="line"></span><br><span class="line">    <span class="comment">// First, look in the existing table to see if we can find the itab we need.</span></span><br><span class="line">    <span class="comment">// This is by far the most common case, so do it without locks.</span></span><br><span class="line">    <span class="comment">// Use atomic to ensure we see any previous writes done by the thread</span></span><br><span class="line">    <span class="comment">// that updates the itabTable field (with atomic.Storep in itabAdd).</span></span><br><span class="line">    t := (*itabTableType)(atomic.Loadp(unsafe.Pointer(&amp;itabTable)))</span><br><span class="line">    <span class="keyword">if</span> m = t.find(inter, typ); m != <span class="literal">nil</span> {</span><br><span class="line">        <span class="keyword">goto</span> finish</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Not found.  Grab the lock and try again.</span></span><br><span class="line">    lock(&amp;itabLock)</span><br><span class="line">    <span class="keyword">if</span> m = itabTable.find(inter, typ); m != <span class="literal">nil</span> {</span><br><span class="line">        unlock(&amp;itabLock)</span><br><span class="line">        <span class="keyword">goto</span> finish</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Entry doesn't exist yet. Make a new entry &amp; add it.</span></span><br><span class="line">    m = (*itab)(persistentalloc(unsafe.Sizeof(itab{})+<span class="keyword">uintptr</span>(<span class="built_in">len</span>(inter.mhdr)<span class="number">-1</span>)*sys.PtrSize, <span class="number">0</span>, &amp;memstats.other_sys))</span><br><span class="line">    m.inter = inter</span><br><span class="line">    m._type = typ</span><br><span class="line">    <span class="comment">// The hash is used in type switches. However, compiler statically generates itab's</span></span><br><span class="line">    <span class="comment">// for all interface/type pairs used in switches (which are added to itabTable</span></span><br><span class="line">    <span class="comment">// in itabsinit). The dynamically-generated itab's never participate in type switches,</span></span><br><span class="line">    <span class="comment">// and thus the hash is irrelevant.</span></span><br><span class="line">    <span class="comment">// Note: m.hash is _not_ the hash used for the runtime itabTable hash table.</span></span><br><span class="line">    m.hash = <span class="number">0</span></span><br><span class="line">    m.init()</span><br><span class="line">    itabAdd(m)</span><br><span class="line">    unlock(&amp;itabLock)</span><br><span class="line">finish:</span><br><span class="line">    <span class="keyword">if</span> m.fun[<span class="number">0</span>] != <span class="number">0</span> {</span><br><span class="line">        <span class="keyword">return</span> m</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> canfail {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// this can only happen if the conversion</span></span><br><span class="line">    <span class="comment">// was already done once using the , ok form</span></span><br><span class="line">    <span class="comment">// and we have a cached negative result.</span></span><br><span class="line">    <span class="comment">// The cached result doesn't record which</span></span><br><span class="line">    <span class="comment">// interface function was missing, so initialize</span></span><br><span class="line">    <span class="comment">// the itab again to get the missing function name.</span></span><br><span class="line">    <span class="built_in">panic</span>(&amp;TypeAssertionError{concrete: typ, asserted: &amp;inter.typ, missingMethod: m.init()})</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/125488954" title="" target="">Golang中interface内部构造</a></li><li><a href="https://www.jianshu.com/p/5f8ecbe4f6af" title="" target="">剖析golang interface实现</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go defer</title>
      <link href="2020/05/07/go/defer/"/>
      <url>2020/05/07/go/defer/</url>
      
        <content type="html"><![CDATA[<h2 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h2><h3 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h3><p>先进后出的栈，在return后倒序执行</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="keyword">defer</span> func1()</span><br><span class="line">    <span class="keyword">defer</span> func2()</span><br><span class="line">    <span class="keyword">defer</span> func3()</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">func1</span><span class="params">()</span></span> {</span><br><span class="line">    fmt.Println(<span class="string">"A"</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">func2</span><span class="params">()</span></span> {</span><br><span class="line">    fmt.Println(<span class="string">"B"</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">func3</span><span class="params">()</span></span> {</span><br><span class="line">    fmt.Println(<span class="string">"C"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C</span><br><span class="line">B</span><br><span class="line">A</span><br></pre></td></tr></tbody></table></figure><h3 id="作用于函数返回值参数"><a href="#作用于函数返回值参数" class="headerlink" title="作用于函数返回值参数"></a>作用于函数返回值参数</h3><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">returnWithDefer</span><span class="params">()</span> <span class="params">(t <span class="keyword">int</span>)</span></span> {</span><br><span class="line">    <span class="comment">// 1. t = 0</span></span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> {</span><br><span class="line">        t = t * <span class="number">10</span> <span class="comment">// 3. t= 1*10</span></span><br><span class="line">    }()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> <span class="comment">// 2. t = 1</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">    fmt.Println(returnWithDefer())</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span></span><br></pre></td></tr></tbody></table></figure><h3 id="panic和recover执行顺序"><a href="#panic和recover执行顺序" class="headerlink" title="panic和recover执行顺序"></a>panic和recover执行顺序</h3><p>根据出栈顺序先执行defer后输出panic，如不捕获panic直接异常退出</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">    f()</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">"main return"</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span> <span class="title">int</span></span> {</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> {</span><br><span class="line">        fmt.Println(<span class="string">"defer1 before panic, with recover"</span>)</span><br><span class="line">        <span class="keyword">if</span> err := <span class="built_in">recover</span>(); err != <span class="literal">nil</span> {</span><br><span class="line">            fmt.Println(err)</span><br><span class="line">        }</span><br><span class="line">    }()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> {</span><br><span class="line">        fmt.Println(<span class="string">"defer2 before panic, without recover"</span>)</span><br><span class="line">    }()</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">"normal message before panic"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">panic</span>(<span class="string">"panic message"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> { fmt.Println(<span class="string">"defer after panic is unreachable"</span>) }()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">normal message before <span class="built_in">panic</span></span><br><span class="line">defer2 before <span class="built_in">panic</span>, without <span class="built_in">recover</span></span><br><span class="line">defer1 before <span class="built_in">panic</span>, with <span class="built_in">recover</span></span><br><span class="line"><span class="built_in">panic</span> message</span><br><span class="line">main <span class="keyword">return</span></span><br></pre></td></tr></tbody></table></figure><h3 id="panic捕获顺序"><a href="#panic捕获顺序" class="headerlink" title="panic捕获顺序"></a>panic捕获顺序</h3><p>根据出栈顺序捕获最后一个panic</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> {</span><br><span class="line">        <span class="keyword">if</span> err := <span class="built_in">recover</span>(); err != <span class="literal">nil</span> {</span><br><span class="line">            fmt.Println(err)</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            fmt.Println(<span class="string">"fatal"</span>)</span><br><span class="line">        }</span><br><span class="line">    }()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> {</span><br><span class="line">        <span class="built_in">panic</span>(<span class="string">"defer1 panic message"</span>)</span><br><span class="line">    }()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> {</span><br><span class="line">        <span class="built_in">panic</span>(<span class="string">"defer2 panic message"</span>)</span><br><span class="line">    }()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">panic</span>(<span class="string">"panic message"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">defer</span> <span class="built_in">panic</span> message</span><br></pre></td></tr></tbody></table></figure><h3 id="参数包含子函数"><a href="#参数包含子函数" class="headerlink" title="参数包含子函数"></a>参数包含子函数</h3><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">(src <span class="keyword">string</span>)</span> <span class="params">(dst <span class="keyword">string</span>)</span></span> {</span><br><span class="line">    fmt.Println(src)</span><br><span class="line">    dst = src + <span class="string">"'"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="keyword">defer</span> f(f(<span class="string">"a"</span>))</span><br><span class="line">    <span class="keyword">defer</span> f(f(<span class="string">"b"</span>))</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a <span class="comment">// f(f("a"))入栈，执行f("a")结果作为参数传入f(f("a"))</span></span><br><span class="line">b <span class="comment">// f(f("b"))入栈，执行f("b")结果作为参数传入f(f("b"))</span></span><br><span class="line">b<span class="string">' // f(f("b")</span></span><br><span class="line"><span class="string">a'</span> <span class="comment">// f(f("a")</span></span><br></pre></td></tr></tbody></table></figure><h2 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h2><p>defer在编译阶段转换为<code>runtime.deferproc</code>，创建defer函数并注册到原函数中，使用单向链表保存，新注册defer添加到链表头<br>原函数的exit中插入<code>runtime.deferreturn</code>，负责函数exit返回前执行链表中的defer函数<br>per-P保存本地defer池，sched保存全局defer池，一般defer创建每次先从本地取，若本地池空，从全局池取到本地填满一半，用完后返回池子。如果是大空间defer使用mallocgc新分配空间，用完释放空间，不返回池子。</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> _defer <span class="keyword">struct</span> {</span><br><span class="line">    siz     <span class="keyword">int32</span> <span class="comment">// 参数+返回</span></span><br><span class="line">    sp        <span class="keyword">uintptr</span>  <span class="comment">// 栈指针</span></span><br><span class="line">    pc        <span class="keyword">uintptr</span>  <span class="comment">// 返回地址</span></span><br><span class="line">    fn        *funcval <span class="comment">// 传入函数</span></span><br><span class="line">    _panic    *_panic  <span class="comment">// panic that is running defer</span></span><br><span class="line">    link      *_defer <span class="comment">// 单向链表指针，指向下一个defer</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deferproc</span><span class="params">(siz <span class="keyword">int32</span>, fn *funcval)</span></span> {</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    d := newdefer(siz)</span><br><span class="line">    d.fn = fn</span><br><span class="line">    d.pc = callerpc</span><br><span class="line">    d.sp = sp</span><br><span class="line">    <span class="keyword">switch</span> siz {</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        <span class="comment">// Do nothing.</span></span><br><span class="line">    <span class="keyword">case</span> sys.PtrSize:</span><br><span class="line">        *(*<span class="keyword">uintptr</span>)(deferArgs(d)) = *(*<span class="keyword">uintptr</span>)(unsafe.Pointer(argp))</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        memmove(deferArgs(d), unsafe.Pointer(argp), <span class="keyword">uintptr</span>(siz))</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    return0()</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newdefer</span><span class="params">(siz <span class="keyword">int32</span>)</span> *_<span class="title">defer</span></span> {</span><br><span class="line">    <span class="keyword">var</span> d *_defer</span><br><span class="line">    sc := deferclass(<span class="keyword">uintptr</span>(siz))</span><br><span class="line">    gp := getg()</span><br><span class="line">    <span class="keyword">if</span> sc &lt; <span class="keyword">uintptr</span>(<span class="built_in">len</span>(p{}.deferpool)) {</span><br><span class="line">        <span class="comment">// 普通defer使用per-P本地池，如果为空从全局池取，取满到本地池一半的量</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> d == <span class="literal">nil</span> {</span><br><span class="line">        <span class="comment">// Allocate new defer+args.</span></span><br><span class="line">        systemstack(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> {</span><br><span class="line">            total := roundupsize(totaldefersize(<span class="keyword">uintptr</span>(siz)))</span><br><span class="line">            d = (*_defer)(mallocgc(total, deferType, <span class="literal">true</span>))</span><br><span class="line">        })</span><br><span class="line">    }</span><br><span class="line">    d.siz = siz</span><br><span class="line">    d.heap = <span class="literal">true</span></span><br><span class="line">    d.link = gp._defer</span><br><span class="line">    gp._defer = d</span><br><span class="line">    <span class="keyword">return</span> d</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deferreturn</span><span class="params">(arg0 <span class="keyword">uintptr</span>)</span></span> {</span><br><span class="line">    gp := getg()</span><br><span class="line">    d := gp._defer</span><br><span class="line">    <span class="keyword">if</span> d == <span class="literal">nil</span> {</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    }</span><br><span class="line">    sp := getcallersp()</span><br><span class="line">    <span class="keyword">if</span> d.sp != sp { <span class="comment">// 判断是否为caller注册的defer，用于函数返回</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> d.siz {</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        <span class="comment">// Do nothing.</span></span><br><span class="line">    <span class="keyword">case</span> sys.PtrSize:</span><br><span class="line">        *(*<span class="keyword">uintptr</span>)(unsafe.Pointer(&amp;arg0)) = *(*<span class="keyword">uintptr</span>)(deferArgs(d))</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        memmove(unsafe.Pointer(&amp;arg0), deferArgs(d), <span class="keyword">uintptr</span>(d.siz))</span><br><span class="line">    }</span><br><span class="line">    fn := d.fn</span><br><span class="line">    d.fn = <span class="literal">nil</span></span><br><span class="line">    gp._defer = d.link</span><br><span class="line">    freedefer(d)</span><br><span class="line">    _ = fn.fn</span><br><span class="line">    jmpdefer(fn, <span class="keyword">uintptr</span>(unsafe.Pointer(&amp;arg0))) <span class="comment">// 实现defer循环</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">freedefer</span><span class="params">(d *_defer)</span></span> {</span><br><span class="line">    <span class="keyword">if</span> !d.heap {</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    }</span><br><span class="line">    sc := deferclass(<span class="keyword">uintptr</span>(d.siz))</span><br><span class="line">    <span class="keyword">if</span> sc &gt;= <span class="keyword">uintptr</span>(<span class="built_in">len</span>(p{}.deferpool)) { <span class="comment">// 大空间defer不返回池子中</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    }</span><br><span class="line">    pp := getg().m.p.ptr()</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(pp.deferpool[sc]) == <span class="built_in">cap</span>(pp.deferpool[sc]) {</span><br><span class="line">        <span class="comment">// 本地per-P的defer池子满，先放一半到全局defer池</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清空d信息</span></span><br><span class="line"></span><br><span class="line">    pp.deferpool[sc] = <span class="built_in">append</span>(pp.deferpool[sc], d) <span class="comment">// 加入本地池</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="嵌套defer"><a href="#嵌套defer" class="headerlink" title="嵌套defer"></a>嵌套defer</h3><ol><li>A的defer链表为A2-&gt;A1</li><li>A返回前，A2.sp==sp of A，将A2从链表删除，同时执行A2的函数<code>_ = fn.fn</code>，<br>链表变为B2-&gt;B1-&gt;A1，执行<code>jmpdefer</code>跳转到A2</li><li>A2返回前，B2.s==sp of A2，将B2从链表删除，链表变为B1-&gt;A1</li><li>A2返回前，B1.s==sp of A2，将B1从链表删除，链表变为A1</li><li>此时A1.sp!=sp of A2，退出A2 defer的deferreturn，A2执行结束</li><li>A返回前，A1.sp==sp of A，将A1从链表删除</li><li>A返回</li></ol><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">A</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="keyword">defer</span> A1()</span><br><span class="line">    <span class="keyword">defer</span> A2()</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">A2</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="keyword">defer</span> B1()</span><br><span class="line">    <span class="keyword">defer</span> B2()</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="panic-recover"><a href="#panic-recover" class="headerlink" title="panic / recover"></a>panic / recover</h2><p>panic时，如果g有注册defer链表，使用<code>reflectcall</code>调用defer函数<br>若无recover，调用<code>fatalpanic</code>终止程序<br>若有recover，通过设置<strong>recovered</strong>字段标示，最后调用<code>recovery</code>恢复程序执行</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> _panic <span class="keyword">struct</span> {</span><br><span class="line">  argp unsafe.Pointer <span class="comment">// defer函数指针</span></span><br><span class="line">  arg <span class="keyword">interface</span>{} <span class="comment">// panic参数</span></span><br><span class="line">  link *_panic <span class="comment">// panic的单向链表指针</span></span><br><span class="line">  pc <span class="keyword">uintptr</span></span><br><span class="line">  sp unsafe.Pointer</span><br><span class="line">  recovered <span class="keyword">bool</span> <span class="comment">// recover标示</span></span><br><span class="line">  aborted <span class="keyword">bool</span></span><br><span class="line">  goexit <span class="keyword">bool</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">gopanic</span><span class="params">(e <span class="keyword">interface</span>{})</span></span> {</span><br><span class="line">    gp := getg()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> p _panic</span><br><span class="line">    p.arg = e</span><br><span class="line">    p.link = gp._panic</span><br><span class="line">    gp._panic = (*_panic)(noescape(unsafe.Pointer(&amp;p)))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> {</span><br><span class="line">        d := gp._defer</span><br><span class="line">        <span class="keyword">if</span> d == <span class="literal">nil</span> {</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行reflectcall调用注册的defer函数</span></span><br><span class="line">        <span class="keyword">if</span> d.openDefer {</span><br><span class="line">            done = runOpenDeferFrame(gp, d)</span><br><span class="line">            <span class="keyword">if</span> done &amp;&amp; !d._panic.recovered {</span><br><span class="line">                addOneOpenDeferFrame(gp, <span class="number">0</span>, <span class="literal">nil</span>)</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            p.argp = unsafe.Pointer(getargp(<span class="number">0</span>))</span><br><span class="line">            reflectcall(<span class="literal">nil</span>, unsafe.Pointer(d.fn), deferArgs(d), <span class="keyword">uint32</span>(d.siz), <span class="keyword">uint32</span>(d.siz))</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> p.recovered {</span><br><span class="line">            gp._panic = p.link</span><br><span class="line">            <span class="keyword">for</span> gp._panic != <span class="literal">nil</span> &amp;&amp; gp._panic.aborted {</span><br><span class="line">                gp._panic = gp._panic.link</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> gp._panic == <span class="literal">nil</span> { <span class="comment">// must be done with signal</span></span><br><span class="line">                gp.sig = <span class="number">0</span></span><br><span class="line">            }</span><br><span class="line">            gp.sigcode0 = <span class="keyword">uintptr</span>(sp)</span><br><span class="line">            gp.sigcode1 = pc</span><br><span class="line">            mcall(recovery) <span class="comment">// 调用recovery恢复程序</span></span><br><span class="line">            throw(<span class="string">"recovery failed"</span>) <span class="comment">// mcall should not return</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    preprintpanics(gp._panic)</span><br><span class="line"></span><br><span class="line">    fatalpanic(gp._panic) <span class="comment">// 终止程序</span></span><br><span class="line">    *(*<span class="keyword">int</span>)(<span class="literal">nil</span>) = <span class="number">0</span>      <span class="comment">// not reached</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">gorecover</span><span class="params">(argp <span class="keyword">uintptr</span>)</span> <span class="title">interface</span></span>{} {</span><br><span class="line">    gp := getg()</span><br><span class="line">    p := gp._panic</span><br><span class="line">    <span class="keyword">if</span> p != <span class="literal">nil</span> &amp;&amp; !p.goexit &amp;&amp; !p.recovered &amp;&amp; argp == <span class="keyword">uintptr</span>(p.argp) {</span><br><span class="line">        p.recovered = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">return</span> p.arg</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">recovery</span><span class="params">(gp *g)</span></span> {</span><br><span class="line">    sp := gp.sigcode0</span><br><span class="line">    pc := gp.sigcode1</span><br><span class="line"></span><br><span class="line">    gp.sched.sp = sp</span><br><span class="line">    gp.sched.pc = pc</span><br><span class="line">    gp.sched.lr = <span class="number">0</span></span><br><span class="line">    gp.sched.ret = <span class="number">1</span></span><br><span class="line">    gogo(&amp;gp.sched)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/115472856" title="" target="">Golang中的Defer必掌握的7知识点</a></li><li><a href="https://www.bilibili.com/video/BV1E5411x7NC" title="" target="">defer1.12</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dlv调试</title>
      <link href="2020/05/05/go/dlv/"/>
      <url>2020/05/05/go/dlv/</url>
      
        <content type="html"><![CDATA[<h2 id="dlv安装"><a href="#dlv安装" class="headerlink" title="dlv安装"></a>dlv安装</h2><p><a href="https://github.com/go-delve/delve/blob/master/Documentation/installation/osx/install.md">https://github.com/go-delve/delve/blob/master/Documentation/installation/osx/install.md</a></p><p>使用<code>make install</code>安装</p><h2 id="vscode调试"><a href="#vscode调试" class="headerlink" title="vscode调试"></a>vscode调试</h2><p><a href="https://github.com/Microsoft/vscode-go/wiki/Debugging-Go-code-using-VS-Code">https://github.com/Microsoft/vscode-go/wiki/Debugging-Go-code-using-VS-Code</a></p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go module</title>
      <link href="2020/05/04/go/modules/"/>
      <url>2020/05/04/go/modules/</url>
      
        <content type="html"><![CDATA[<h2 id="go-module"><a href="#go-module" class="headerlink" title="go_module"></a>go_module</h2><h3 id="1-11之前"><a href="#1-11之前" class="headerlink" title="1.11之前"></a>1.11之前</h3><ul><li>依赖<code>$GOPATH</code></li><li>版本使用克隆时分支代码</li><li>采用 vendor手动版本管理 / godep锁定版本管理</li></ul><h3 id="最小化版本选择-MVS-Minimal-Version-Selection"><a href="#最小化版本选择-MVS-Minimal-Version-Selection" class="headerlink" title="最小化版本选择 MVS(Minimal Version Selection)"></a>最小化版本选择 MVS(Minimal Version Selection)</h3><img src="/2020/05/04/go/modules/go-modules-mvs-1.png" class=""><ol><li>godep会选择D的1.X.X最新最大版本，在语义版本化和遵守社会契约的前提下可以正常工作。</li><li>go会选择最小版本：</li></ol><ul><li>A -&gt; D v1.0.6</li><li>A+B -&gt; D v1.2.0</li><li>A+B+C -&gt; D v1.3.2</li></ul><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ol><li>go.mod文件，它与package.json或Pipfile文件的功能类似。</li><li>验证文件go.sum。</li><li>不再有GOPATH限制。模块可以位于任何路径中。</li></ol><h3 id="迁移"><a href="#迁移" class="headerlink" title="迁移"></a>迁移</h3><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> mod init github.com/username/repository</span><br></pre></td></tr></tbody></table></figure><h3 id="升级依赖关系，默认最小化升级"><a href="#升级依赖关系，默认最小化升级" class="headerlink" title="升级依赖关系，默认最小化升级"></a>升级依赖关系，默认最小化升级</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> go get -t -d -v ./...</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>-t flag：考虑构建测试所需的module。<br>-d flag：下载每个module的源代码，但不要构建或安装它们。<br>-v flag：提供详细输出。<br>./… ：在整个源代码树中执行这些操作，并且仅更新所需的依赖项。<br>-u flag 最新最大升级，通常不使用</p></blockquote><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><h4 id="列出软件包的可用版本"><a href="#列出软件包的可用版本" class="headerlink" title="列出软件包的可用版本"></a>列出软件包的可用版本</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> go list -m -versions github.com/getsentry/raven-go</span></span><br><span class="line">github.com/getsentry/raven-go v0.1.0 v0.1.1 v0.1.2 v0.2.0</span><br></pre></td></tr></tbody></table></figure><h4 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h4><p>添加依赖项是隐式的。在代码中导入依赖项后，运行go build或go test命令将获取模块的最新版本并将其添加到go.mod文件中。<br>如果要显式添加依赖项，请运行go get github.com/username/repository。</p><h4 id="依赖项的升级-降级"><a href="#依赖项的升级-降级" class="headerlink" title="依赖项的升级/降级"></a>依赖项的升级/降级</h4><p>go get github.com/username/repository@vx.x.x下载并设置依赖项和更新go.mod文件的特定版本</p><h4 id="mod命令"><a href="#mod命令" class="headerlink" title="mod命令"></a>mod命令</h4><ul><li>go mod init：生成 go.mod 文件</li><li>go mod download : 下载 go.mod 文件中指明的所有依赖</li><li>go mod tidy: 整理现有的依赖</li><li>go mod graph: 查看现有的依赖结构</li><li>go mod edit : 编辑 go.mod 文件</li><li>go mod vendor : 导出项目所有的依赖到vendor目录</li><li>go mod verify: 校验一个模块是否被篡改过</li><li>go mod why : 查看为什么需要依赖某模块</li></ul><h3 id="GOPROXY"><a href="#GOPROXY" class="headerlink" title="GOPROXY"></a>GOPROXY</h3><ul><li><p>阿里云<br><a href="https://mirrors.aliyun.com/goproxy/">https://mirrors.aliyun.com/goproxy/</a></p></li><li><p>七牛云<br>goproxy.cn,direct</p></li></ul><p>设置：<br><code>$ go env -w GOPROXY=https://goproxy.cn,direct</code><br>direct用于proxy代理返404后回源到源地址</p><h3 id="交叉编译"><a href="#交叉编译" class="headerlink" title="交叉编译"></a>交叉编译</h3><p>GOOS=linux GOARCH=amd64 go build</p><h2 id="node-module"><a href="#node-module" class="headerlink" title="node_module"></a>node_module</h2><h3 id="依赖黑洞"><a href="#依赖黑洞" class="headerlink" title="依赖黑洞"></a>依赖黑洞</h3><p>项目依赖A和C，A和C依赖不同版本的B</p><img src="/2020/05/04/go/modules/npm_v0.jpg" class=""><img src="/2020/05/04/go/modules/npm_v1.jpg" class=""><p>考虑两个问题：</p><ol><li>B的次要版本可以共存，并且没有副作用。但node有js全局污染可能。</li><li>B的次要版本可以共存，如何保证A和C正确加载<code>B v2.0</code></li></ol><h3 id="npm解决方式"><a href="#npm解决方式" class="headerlink" title="npm解决方式"></a>npm解决方式</h3><p>递归向上查找node_modules里的package，如果在 ‘/home/my/projects/foo.js’ 文件里调用了 require(‘bar.js’)，则 Node.js 会按以下顺序查找：</p><ul><li>/home/my/projects/node_modules/bar.js</li><li>/home/my/node_modules/bar.js</li><li>/home/node_modules/bar.js</li><li>/node_modules/bar.js</li></ul><p>算法核心</p><ul><li>优先读取最近的node_modules的依赖</li><li>递归向上查找node_modules依赖</li></ul><p>假设D也依赖<code>B v2.0</code>，node_modules结构如下</p><img src="/2020/05/04/go/modules/npm_v1.1.jpg" class=""><p> 相同的<code>B v2.0</code>被依赖了两次，在node中lodash等公用插件会造成极大空间浪费</p><p>利用<code>递归向上</code>特性，将公共库放在顶层</p><img src="/2020/05/04/go/modules/npm_v3.jpg" class=""><p>若B和E依赖<code>B v1.0</code>，C和D依赖<code>B v2.0</code>，问题依旧存在</p><img src="/2020/05/04/go/modules/npm_v3.1.jpg" class=""><h3 id="幻依赖"><a href="#幻依赖" class="headerlink" title="幻依赖"></a>幻依赖</h3><img src="/2020/05/04/go/modules/Phantom_1.jpg" class=""><img src="/2020/05/04/go/modules/Phantom_2.jpg" class=""><p>glob和brace-expansion都不在depdencies里，但是我们开发和运行时都可以正常工作（因为这个是rimraf的依赖），一旦将该库发布，因为用户安装我们的库的时候并不会安装库的devDepdency，这导致在用户的地方会运行报错。</p><h3 id="yarn-lock-vs-npm-lock"><a href="#yarn-lock-vs-npm-lock" class="headerlink" title="yarn lock vs npm lock"></a>yarn lock vs npm lock</h3><img src="/2020/05/04/go/modules/package.jpg" class=""><img src="/2020/05/04/go/modules/yarn.jpg" class=""><p>通过lock开发版本在生产复现环境。但无法规避npm全局cli。</p><h3 id="库里应该提交lock文件吗"><a href="#库里应该提交lock文件吗" class="headerlink" title="库里应该提交lock文件吗"></a>库里应该提交lock文件吗</h3><p>应该。可以很大程度避免环境差异。</p><h3 id="确定性"><a href="#确定性" class="headerlink" title="确定性"></a>确定性</h3><img src="/2020/05/04/go/modules/yarn.lock.jpg" class=""><p>yarn.lock仅提供版本确定性，无法保证node_modules拓扑，如下两种拓扑都是合理的</p><p>第一种</p><img src="/2020/05/04/go/modules/topo1.jpg" class=""><p>第二种</p><img src="/2020/05/04/go/modules/topo2.jpg" class=""><p>npm的lock包含拓扑信息</p><img src="/2020/05/04/go/modules/npm_topo.jpg" class=""><h3 id="PNPM"><a href="#PNPM" class="headerlink" title="PNPM"></a>PNPM</h3><p>npm和yarn通过文件目录和node resolve算法模拟的实际上是有向无环图的一个超集（多出了很多错误祖先节点和兄弟节点之间的链接），这导致了很多的问题，所以我们需要更加接近DAG的模拟。pnpm正是采取了这种解决方式，通过更加精确的模拟DAG来解决yarn和npm代理的问题。</p><p>npm的结构</p><img src="/2020/05/04/go/modules/npm_arch.jpg" class=""><p>代码可以使用<code>express</code>引入的<code>debug</code>模块，即使没有显式的引入</p><img src="/2020/05/04/go/modules/pnpm_package.jpg" class=""><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/index.js</span></span><br><span class="line"><span class="keyword">const</span> debug = <span class="built_in">require</span>(<span class="string">'debug'</span>)</span><br></pre></td></tr></tbody></table></figure><p>pnpm的结构</p><img src="/2020/05/04/go/modules/pnpm_arch.jpg" class=""><p>顶层已没有<code>debug</code>模块，因此代码里不会错误的引用</p><h3 id="pnpm-vs-yarn"><a href="#pnpm-vs-yarn" class="headerlink" title="pnpm vs yarn"></a>pnpm vs yarn</h3><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line">{</span><br><span class="line">  <span class="attr">"dependencies"</span>: {</span><br><span class="line">    <span class="attr">"debug"</span>: <span class="string">"3"</span>,</span><br><span class="line">    <span class="attr">"express"</span>: <span class="string">"4.0.0"</span>,</span><br><span class="line">    <span class="attr">"koa"</span>: <span class="string">"^2.11.0"</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">dependencies:</span><br><span class="line">debug <span class="number">3.1</span><span class="number">.0</span></span><br><span class="line">express <span class="number">4.0</span><span class="number">.0</span></span><br><span class="line">├── debug <span class="number">0.8</span><span class="number">.1</span></span><br><span class="line">├─┬ send <span class="number">0.2</span><span class="number">.0</span></span><br><span class="line">│ └── debug <span class="number">1.0</span><span class="number">.5</span></span><br><span class="line">└─┬ serve-<span class="keyword">static</span> <span class="number">1.0</span><span class="number">.1</span></span><br><span class="line">  └─┬ send <span class="number">0.1</span><span class="number">.4</span></span><br><span class="line">    └── debug <span class="number">1.0</span><span class="number">.5</span></span><br><span class="line">koa <span class="number">2.11</span><span class="number">.0</span></span><br><span class="line">└── debug <span class="number">3.1</span><span class="number">.0</span>%  </span><br></pre></td></tr></tbody></table></figure><p>yarn放在不同层级，依赖递归查找算法来选择版本</p><img src="/2020/05/04/go/modules/pnpm_module.jpg" class=""><p>pnpm将不同版本放在同一层级里通过软链选择加载版本，彻底避免了包重复问题，节省大量时间和空间</p><img src="/2020/05/04/go/modules/monorepo_sample.jpg" class=""><h2 id="TODO-mvn"><a href="#TODO-mvn" class="headerlink" title="TODO mvn"></a>TODO mvn</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://semver.org/lang/zh-CN/" title="" target="">语义化版本</a></li><li><a href="https://zhuanlan.zhihu.com/p/137535779" title="" target="">知乎 - node_modules 困境</a></li><li><a href="https://tonybai.com/2019/09/21/brief-history-of-go-package-management/" title="" target="">Go语言包管理简史</a></li><li><a href="https://tonybai.com/2019/12/21/go-modules-minimal-version-selection/" title="" target="">Go modules：最小版本选择</a></li><li><a href="https://zhuanlan.zhihu.com/p/41627929" title="" target="">关于Go Module的争吵</a></li><li><a href="https://research.swtch.com/vgo-principles" title="" target="">The Principles of Versioning in Go</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库测试</title>
      <link href="2020/04/30/mysql/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B5%8B%E8%AF%95/"/>
      <url>2020/04/30/mysql/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><h3 id="版本5-7"><a href="#版本5-7" class="headerlink" title="版本5.7"></a>版本5.7</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> version();</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br><span class="line"><span class="operator">|</span> version() <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">5.7</span><span class="number">.29</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></tbody></table></figure><h3 id="范围查询包含非key字段"><a href="#范围查询包含非key字段" class="headerlink" title="范围查询包含非key字段"></a>范围查询包含非key字段</h3><h4 id="1个字符，4000W"><a href="#1个字符，4000W" class="headerlink" title="1个字符，4000W"></a>1个字符，4000W</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="type">date</span>, length(name), <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> test <span class="keyword">group</span> <span class="keyword">by</span> <span class="type">date</span>, name;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+--------------+----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="type">date</span>                <span class="operator">|</span> length(name) <span class="operator">|</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+--------------+----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-04</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>            <span class="number">1</span> <span class="operator">|</span>  <span class="number">4194304</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-04</span><span class="number">-02</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>            <span class="number">1</span> <span class="operator">|</span>  <span class="number">4194304</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-04</span><span class="number">-03</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>            <span class="number">1</span> <span class="operator">|</span>  <span class="number">4194304</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-04</span><span class="number">-04</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>            <span class="number">1</span> <span class="operator">|</span>  <span class="number">4194304</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-04</span><span class="number">-05</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>            <span class="number">1</span> <span class="operator">|</span>  <span class="number">4194304</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-04</span><span class="number">-06</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>            <span class="number">1</span> <span class="operator">|</span>  <span class="number">4194304</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-04</span><span class="number">-07</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>            <span class="number">1</span> <span class="operator">|</span>  <span class="number">4194304</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-04</span><span class="number">-08</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>            <span class="number">1</span> <span class="operator">|</span>  <span class="number">4194304</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-04</span><span class="number">-09</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>            <span class="number">1</span> <span class="operator">|</span>  <span class="number">4194304</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-04</span><span class="number">-10</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>            <span class="number">1</span> <span class="operator">|</span>  <span class="number">4194304</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+--------------+----------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">5</span> min <span class="number">19.25</span> sec)</span><br></pre></td></tr></tbody></table></figure><h5 id="90-范围查询，带text字段，不走索引"><a href="#90-范围查询，带text字段，不走索引" class="headerlink" title="90%范围查询，带text字段，不走索引"></a>90%范围查询，带text字段，不走索引</h5><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test <span class="keyword">where</span> <span class="type">date</span> <span class="operator">&gt;=</span> <span class="string">'2020/04/01 00:00:00'</span> <span class="keyword">and</span> <span class="type">date</span> <span class="operator">&lt;</span> <span class="string">'2020/04/10 00:00:00'</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+----------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys <span class="operator">|</span> key  <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span>     <span class="operator">|</span> filtered <span class="operator">|</span> Extra       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+----------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> test  <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ALL</span>  <span class="operator">|</span> uk1           <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">41863640</span> <span class="operator">|</span>    <span class="number">50.00</span> <span class="operator">|</span> <span class="keyword">Using</span> <span class="keyword">where</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+----------+----------+-------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.13</span> sec)</span><br></pre></td></tr></tbody></table></figure><h5 id="10-范围查询，带text字段，不走索引"><a href="#10-范围查询，带text字段，不走索引" class="headerlink" title="10%范围查询，带text字段，不走索引"></a>10%范围查询，带text字段，不走索引</h5><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> id, <span class="type">date</span>, name <span class="keyword">from</span> test <span class="keyword">where</span> <span class="type">date</span> <span class="operator">&gt;=</span> <span class="string">'2020/04/01 00:00:00'</span> <span class="keyword">and</span> <span class="type">date</span> <span class="operator">&lt;</span> <span class="string">'2020/04/02 00:00:00'</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+----------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys <span class="operator">|</span> key  <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span>     <span class="operator">|</span> filtered <span class="operator">|</span> Extra       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+----------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> test  <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ALL</span>  <span class="operator">|</span> uk1           <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">41863640</span> <span class="operator">|</span>    <span class="number">19.10</span> <span class="operator">|</span> <span class="keyword">Using</span> <span class="keyword">where</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+----------+----------+-------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.12</span> sec)</span><br></pre></td></tr></tbody></table></figure><h5 id="树高度"><a href="#树高度" class="headerlink" title="树高度"></a>树高度</h5><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> b.name, a.name, index_id, type, a.space, a.PAGE_NO <span class="keyword">FROM</span> information_schema.INNODB_SYS_INDEXES a, information_schema.INNODB_SYS_TABLES b <span class="keyword">WHERE</span> a.table_id <span class="operator">=</span> b.table_id <span class="keyword">AND</span> a.space <span class="operator">&lt;&gt;</span> <span class="number">0</span> <span class="keyword">and</span> b.name<span class="operator">=</span><span class="string">'test/test'</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+---------+----------+------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span> name      <span class="operator">|</span> name    <span class="operator">|</span> index_id <span class="operator">|</span> type <span class="operator">|</span> space <span class="operator">|</span> PAGE_NO <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+---------+----------+------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span> test<span class="operator">/</span>test <span class="operator">|</span> <span class="keyword">PRIMARY</span> <span class="operator">|</span>       <span class="number">93</span> <span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span>    <span class="number">60</span> <span class="operator">|</span>       <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> test<span class="operator">/</span>test <span class="operator">|</span> uk1     <span class="operator">|</span>       <span class="number">94</span> <span class="operator">|</span>    <span class="number">0</span> <span class="operator">|</span>    <span class="number">60</span> <span class="operator">|</span>       <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+---------+----------+------+-------+---------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.08</span> sec)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 主键 3*16384+64，level为0x02，高度为3</span><br><span class="line"><span class="meta">$</span><span class="bash"> hexdump -s 49216 -n 10 test.ibd</span></span><br><span class="line">000c040 00 02 00 00 00 00 00 00 00 5d</span><br><span class="line">000c04a</span><br><span class="line">// uk1 4*16384+64，level为0x02，高度为3</span><br><span class="line"><span class="meta">$</span><span class="bash"> hexdump -s 65600 -n 10 test.ibd</span></span><br><span class="line">0010040 00 02 00 00 00 00 00 00 00 5e</span><br><span class="line">001004a</span><br></pre></td></tr></tbody></table></figure><h4 id="5个字符，4000W"><a href="#5个字符，4000W" class="headerlink" title="5个字符，4000W"></a>5个字符，4000W</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="type">date</span>, length(name), <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> test <span class="keyword">group</span> <span class="keyword">by</span> <span class="type">date</span>, name;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+--------------+----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="type">date</span>                <span class="operator">|</span> length(name) <span class="operator">|</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+--------------+----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-04</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>            <span class="number">5</span> <span class="operator">|</span>  <span class="number">4194304</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-04</span><span class="number">-02</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>            <span class="number">5</span> <span class="operator">|</span>  <span class="number">4194304</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-04</span><span class="number">-03</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>            <span class="number">5</span> <span class="operator">|</span>  <span class="number">4194304</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-04</span><span class="number">-04</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>            <span class="number">5</span> <span class="operator">|</span>  <span class="number">4194304</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-04</span><span class="number">-05</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>            <span class="number">5</span> <span class="operator">|</span>  <span class="number">4194304</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-04</span><span class="number">-06</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>            <span class="number">5</span> <span class="operator">|</span>  <span class="number">4194304</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-04</span><span class="number">-07</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>            <span class="number">5</span> <span class="operator">|</span>  <span class="number">4194304</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-04</span><span class="number">-08</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>            <span class="number">5</span> <span class="operator">|</span>  <span class="number">4194304</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-04</span><span class="number">-09</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>            <span class="number">5</span> <span class="operator">|</span>  <span class="number">4194304</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-04</span><span class="number">-10</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>            <span class="number">5</span> <span class="operator">|</span>  <span class="number">4194304</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+--------------+----------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">4</span> min <span class="number">55.59</span> sec)</span><br></pre></td></tr></tbody></table></figure><h5 id="90-范围查询，带text字段，不走索引-1"><a href="#90-范围查询，带text字段，不走索引-1" class="headerlink" title="90%范围查询，带text字段，不走索引"></a>90%范围查询，带text字段，不走索引</h5><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test <span class="keyword">where</span> <span class="type">date</span> <span class="operator">&gt;=</span> <span class="string">'2020/04/01 00:00:00'</span> <span class="keyword">and</span> <span class="type">date</span> <span class="operator">&lt;</span> <span class="string">'2020/04/10 00:00:00'</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+----------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys <span class="operator">|</span> key  <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span>     <span class="operator">|</span> filtered <span class="operator">|</span> Extra       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+----------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> test  <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ALL</span>  <span class="operator">|</span> uk1           <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">41853552</span> <span class="operator">|</span>    <span class="number">50.00</span> <span class="operator">|</span> <span class="keyword">Using</span> <span class="keyword">where</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+----------+----------+-------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.03</span> sec)</span><br></pre></td></tr></tbody></table></figure><h5 id="10-范围查询，带text字段，不走索引-1"><a href="#10-范围查询，带text字段，不走索引-1" class="headerlink" title="10%范围查询，带text字段，不走索引"></a>10%范围查询，带text字段，不走索引</h5><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> id, <span class="type">date</span>, name <span class="keyword">from</span> test <span class="keyword">where</span> <span class="type">date</span> <span class="operator">&gt;=</span> <span class="string">'2020/04/01 00:00:00'</span> <span class="keyword">and</span> <span class="type">date</span> <span class="operator">&lt;</span> <span class="string">'2020/04/02 00:00:00'</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+----------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys <span class="operator">|</span> key  <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span>     <span class="operator">|</span> filtered <span class="operator">|</span> Extra       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+----------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> test  <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ALL</span>  <span class="operator">|</span> uk1           <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">41853552</span> <span class="operator">|</span>    <span class="number">19.11</span> <span class="operator">|</span> <span class="keyword">Using</span> <span class="keyword">where</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+----------+----------+-------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br></pre></td></tr></tbody></table></figure><h4 id="200个字符，4000W"><a href="#200个字符，4000W" class="headerlink" title="200个字符，4000W"></a>200个字符，4000W</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="type">date</span>, length(name), <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> test <span class="keyword">group</span> <span class="keyword">by</span> <span class="type">date</span>, name;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+--------------+----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="type">date</span>                <span class="operator">|</span> length(name) <span class="operator">|</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+--------------+----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-04</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>          <span class="number">200</span> <span class="operator">|</span>  <span class="number">4194304</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-04</span><span class="number">-02</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>          <span class="number">200</span> <span class="operator">|</span>  <span class="number">4194304</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-04</span><span class="number">-03</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>          <span class="number">200</span> <span class="operator">|</span>  <span class="number">4194304</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-04</span><span class="number">-04</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>          <span class="number">200</span> <span class="operator">|</span>  <span class="number">4194304</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-04</span><span class="number">-05</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>          <span class="number">200</span> <span class="operator">|</span>  <span class="number">4194304</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-04</span><span class="number">-06</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>          <span class="number">200</span> <span class="operator">|</span>  <span class="number">4194304</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-04</span><span class="number">-07</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>          <span class="number">200</span> <span class="operator">|</span>  <span class="number">4194304</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-04</span><span class="number">-08</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>          <span class="number">200</span> <span class="operator">|</span>  <span class="number">4194304</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-04</span><span class="number">-09</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>          <span class="number">200</span> <span class="operator">|</span>  <span class="number">4194304</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-04</span><span class="number">-10</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>          <span class="number">200</span> <span class="operator">|</span>  <span class="number">4194304</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+--------------+----------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">6</span> min <span class="number">58.89</span> sec)</span><br></pre></td></tr></tbody></table></figure><h5 id="90-范围查询，带text字段，不走索引-2"><a href="#90-范围查询，带text字段，不走索引-2" class="headerlink" title="90%范围查询，带text字段，不走索引"></a>90%范围查询，带text字段，不走索引</h5><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test <span class="keyword">where</span> <span class="type">date</span> <span class="operator">&gt;=</span> <span class="string">'2020/04/01 00:00:00'</span> <span class="keyword">and</span> <span class="type">date</span> <span class="operator">&lt;</span> <span class="string">'2020/04/10 00:00:00'</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+----------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys <span class="operator">|</span> key  <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span>     <span class="operator">|</span> filtered <span class="operator">|</span> Extra       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+----------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> test  <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ALL</span>  <span class="operator">|</span> uk1           <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">41342675</span> <span class="operator">|</span>    <span class="number">50.00</span> <span class="operator">|</span> <span class="keyword">Using</span> <span class="keyword">where</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+----------+----------+-------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br></pre></td></tr></tbody></table></figure><h5 id="90-范围查询，仅查询索引字段或count-计数，走索引"><a href="#90-范围查询，仅查询索引字段或count-计数，走索引" class="headerlink" title="90%范围查询，仅查询索引字段或count(*)计数，走索引"></a>90%范围查询，仅查询索引字段或count(*)计数，走索引</h5><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="type">date</span> <span class="keyword">from</span> test <span class="keyword">where</span> <span class="type">date</span> <span class="operator">&gt;=</span> <span class="string">'2020/04/01 00:00:00'</span> <span class="keyword">and</span> <span class="type">date</span> <span class="operator">&lt;</span> <span class="string">'2020/04/10 00:00:00'</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+-------+---------------+------+---------+------+----------+----------+--------------------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> partitions <span class="operator">|</span> type  <span class="operator">|</span> possible_keys <span class="operator">|</span> key  <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span>     <span class="operator">|</span> filtered <span class="operator">|</span> Extra                    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+-------+---------------+------+---------+------+----------+----------+--------------------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> test  <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">range</span> <span class="operator">|</span> uk1           <span class="operator">|</span> uk1  <span class="operator">|</span> <span class="number">4</span>       <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">20671337</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> <span class="keyword">where</span>; <span class="keyword">Using</span> index <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+-------+---------------+------+---------+------+----------+----------+--------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">explain <span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> test <span class="keyword">where</span> <span class="type">date</span> <span class="operator">&gt;=</span> <span class="string">'2020/04/01 00:00:00'</span> <span class="keyword">and</span> <span class="type">date</span> <span class="operator">&lt;</span> <span class="string">'2020/04/10 00:00:00'</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+-------+---------------+------+---------+------+----------+----------+--------------------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> partitions <span class="operator">|</span> type  <span class="operator">|</span> possible_keys <span class="operator">|</span> key  <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span>     <span class="operator">|</span> filtered <span class="operator">|</span> Extra                    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+-------+---------------+------+---------+------+----------+----------+--------------------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> test  <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">range</span> <span class="operator">|</span> uk1           <span class="operator">|</span> uk1  <span class="operator">|</span> <span class="number">4</span>       <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">20671337</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> <span class="keyword">where</span>; <span class="keyword">Using</span> index <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+-------+---------------+------+---------+------+----------+----------+--------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.01</span> sec)</span><br></pre></td></tr></tbody></table></figure><h5 id="10-范围查询，带text字段，不走索引-2"><a href="#10-范围查询，带text字段，不走索引-2" class="headerlink" title="10%范围查询，带text字段，不走索引"></a>10%范围查询，带text字段，不走索引</h5><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test <span class="keyword">where</span> <span class="type">date</span> <span class="operator">&gt;=</span> <span class="string">'2020/04/01 00:00:00'</span> <span class="keyword">and</span> <span class="type">date</span> <span class="operator">&lt;</span> <span class="string">'2020/04/02 00:00:00'</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+----------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys <span class="operator">|</span> key  <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span>     <span class="operator">|</span> filtered <span class="operator">|</span> Extra       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+----------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> test  <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ALL</span>  <span class="operator">|</span> uk1           <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">41342675</span> <span class="operator">|</span>    <span class="number">19.34</span> <span class="operator">|</span> <span class="keyword">Using</span> <span class="keyword">where</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+----------+----------+-------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br></pre></td></tr></tbody></table></figure><h5 id="主键查询固定走索引"><a href="#主键查询固定走索引" class="headerlink" title="主键查询固定走索引"></a>主键查询固定走索引</h5><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test <span class="keyword">where</span> id <span class="operator">&gt;</span> <span class="number">1</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+-------+---------------+---------+---------+------+----------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> partitions <span class="operator">|</span> type  <span class="operator">|</span> possible_keys <span class="operator">|</span> key     <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span>     <span class="operator">|</span> filtered <span class="operator">|</span> Extra       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+-------+---------------+---------+---------+------+----------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> test  <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">range</span> <span class="operator">|</span> <span class="keyword">PRIMARY</span>       <span class="operator">|</span> <span class="keyword">PRIMARY</span> <span class="operator">|</span> <span class="number">4</span>       <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">20671337</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> <span class="keyword">where</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+-------+---------------+---------+---------+------+----------+----------+-------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.02</span> sec)</span><br></pre></td></tr></tbody></table></figure><h4 id="200个字符，1W"><a href="#200个字符，1W" class="headerlink" title="200个字符，1W"></a>200个字符，1W</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="type">date</span>, length(name), <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> test <span class="keyword">group</span> <span class="keyword">by</span> <span class="type">date</span>, name;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+--------------+----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="type">date</span>                <span class="operator">|</span> length(name) <span class="operator">|</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+--------------+----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-04</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>          <span class="number">200</span> <span class="operator">|</span>     <span class="number">1024</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-04</span><span class="number">-02</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>          <span class="number">200</span> <span class="operator">|</span>     <span class="number">1024</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-04</span><span class="number">-03</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>          <span class="number">200</span> <span class="operator">|</span>     <span class="number">1024</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-04</span><span class="number">-04</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>          <span class="number">200</span> <span class="operator">|</span>     <span class="number">1024</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-04</span><span class="number">-05</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>          <span class="number">200</span> <span class="operator">|</span>     <span class="number">1024</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-04</span><span class="number">-06</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>          <span class="number">200</span> <span class="operator">|</span>     <span class="number">1024</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-04</span><span class="number">-07</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>          <span class="number">200</span> <span class="operator">|</span>     <span class="number">1024</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-04</span><span class="number">-08</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>          <span class="number">200</span> <span class="operator">|</span>     <span class="number">1024</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-04</span><span class="number">-09</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>          <span class="number">200</span> <span class="operator">|</span>     <span class="number">1024</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span><span class="number">-04</span><span class="number">-10</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span>          <span class="number">200</span> <span class="operator">|</span>     <span class="number">1024</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+--------------+----------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.11</span> sec)</span><br></pre></td></tr></tbody></table></figure><h5 id="90-范围查询，带text字段，不走索引-3"><a href="#90-范围查询，带text字段，不走索引-3" class="headerlink" title="90%范围查询，带text字段，不走索引"></a>90%范围查询，带text字段，不走索引</h5><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test <span class="keyword">where</span> <span class="type">date</span> <span class="operator">&gt;=</span> <span class="string">'2020/04/01 00:00:00'</span> <span class="keyword">and</span> <span class="type">date</span> <span class="operator">&lt;</span> <span class="string">'2020/04/10 00:00:00'</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+-------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys <span class="operator">|</span> key  <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span>  <span class="operator">|</span> filtered <span class="operator">|</span> Extra       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+-------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> test  <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ALL</span>  <span class="operator">|</span> uk1           <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">10140</span> <span class="operator">|</span>    <span class="number">90.89</span> <span class="operator">|</span> <span class="keyword">Using</span> <span class="keyword">where</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+-------+----------+-------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br></pre></td></tr></tbody></table></figure><h5 id="10-范围查询，带text字段，走索引"><a href="#10-范围查询，带text字段，走索引" class="headerlink" title="10%范围查询，带text字段，走索引"></a>10%范围查询，带text字段，走索引</h5><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test <span class="keyword">where</span> <span class="type">date</span> <span class="operator">&gt;=</span> <span class="string">'2020/04/01 00:00:00'</span> <span class="keyword">and</span> <span class="type">date</span> <span class="operator">&lt;</span> <span class="string">'2020/04/02 00:00:00'</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+-----------------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> partitions <span class="operator">|</span> type  <span class="operator">|</span> possible_keys <span class="operator">|</span> key  <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra                 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+-----------------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> test  <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">range</span> <span class="operator">|</span> uk1           <span class="operator">|</span> uk1  <span class="operator">|</span> <span class="number">4</span>       <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1024</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> index <span class="keyword">condition</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+-----------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br></pre></td></tr></tbody></table></figure><h4 id="200个字符，4000W，耗时比较"><a href="#200个字符，4000W，耗时比较" class="headerlink" title="200个字符，4000W，耗时比较"></a>200个字符，4000W，耗时比较</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> time mysql <span class="built_in">test</span> -e <span class="string">"select * from test where date &gt;= '2020/04/01 00:00:00' and date &lt; '2020/04/02 00:00:00'"</span> &gt; /dev/null</span></span><br><span class="line"></span><br><span class="line">real 2m54.656s</span><br><span class="line">user 1m4.118s</span><br><span class="line">sys 0m4.271s</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> time mysql <span class="built_in">test</span> -e <span class="string">"select * from test force index(uk1) where date &gt;= '2020/04/01 00:00:00' and date &lt; '2020/04/02 00:00:00'"</span> &gt; /dev/null</span></span><br><span class="line"></span><br><span class="line">real 1m43.517s</span><br><span class="line">user 0m59.562s</span><br><span class="line">sys 0m3.959s</span><br></pre></td></tr></tbody></table></figure><h4 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> test;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Table</span> <span class="operator">|</span> <span class="keyword">Create</span> <span class="keyword">Table</span>                                                                                                                                                                                                                                                            <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> test  <span class="operator">|</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `test` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `<span class="type">date</span>` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  `name` text,</span><br><span class="line">  <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (`id`),</span><br><span class="line">  KEY `uk1` (`<span class="type">date</span>`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">42990946</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'2020/04/01'</span>, <span class="string">'a'</span>);</span><br><span class="line"><span class="comment">-- insert into test values(1,'2020/04/01', repeat('a', 5));</span></span><br><span class="line"><span class="comment">-- insert into test values(1,'2020/04/01', repeat('a', 200));</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test(<span class="type">date</span>, name) <span class="keyword">select</span> <span class="string">'2020/04/01'</span>,name <span class="keyword">from</span> test <span class="keyword">where</span> <span class="type">date</span> <span class="operator">=</span><span class="string">'2020/04/01'</span>;</span><br><span class="line">...</span><br></pre></td></tr></tbody></table></figure><h3 id="autoincrement-uuid-insert速度比较"><a href="#autoincrement-uuid-insert速度比较" class="headerlink" title="autoincrement / uuid  insert速度比较"></a>autoincrement / uuid  insert速度比较</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test02(</span><br><span class="line">id <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line"><span class="type">date</span> <span class="type">timestamp</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> <span class="built_in">current_timestamp</span> <span class="keyword">on</span> <span class="keyword">update</span> <span class="built_in">current_timestamp</span>,</span><br><span class="line">name text,</span><br><span class="line"><span class="keyword">primary</span> <span class="keyword">key</span>(id),key uk1 (<span class="type">date</span>)) engine<span class="operator">=</span>innodb <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> test01 <span class="keyword">where</span> <span class="type">date</span><span class="operator">=</span><span class="string">'2020/04/01'</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1048577</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test01(<span class="type">date</span>,name) <span class="keyword">select</span> <span class="string">'2020/04/15'</span>,name <span class="keyword">from</span> test01 <span class="keyword">where</span> <span class="type">date</span><span class="operator">=</span><span class="string">'2020/04/01'</span>;</span><br><span class="line">Query OK, <span class="number">1048577</span> <span class="keyword">rows</span> affected (<span class="number">12.73</span> sec)</span><br><span class="line">Records: <span class="number">1048577</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> test02 <span class="keyword">where</span> <span class="type">date</span><span class="operator">=</span><span class="string">'2020/04/01'</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1048577</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test02(id,<span class="type">date</span>,name) <span class="keyword">select</span> replace(uuid(),<span class="string">'-'</span>,<span class="string">''</span>),<span class="string">'2020/04/15'</span>,name <span class="keyword">from</span> test02 <span class="keyword">where</span> <span class="type">date</span><span class="operator">=</span><span class="string">'2020/04/01'</span>;</span><br><span class="line">Query OK, <span class="number">1048576</span> <span class="keyword">rows</span> affected (<span class="number">17.31</span> sec)</span><br><span class="line">Records: <span class="number">1048576</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> test01 <span class="keyword">where</span> <span class="type">date</span><span class="operator">=</span><span class="string">'2020/04/01'</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">16777232</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test01(<span class="type">date</span>,name) <span class="keyword">select</span> <span class="string">'2020/04/30'</span>,name <span class="keyword">from</span> test01 <span class="keyword">where</span> <span class="type">date</span><span class="operator">=</span><span class="string">'2020/04/01'</span>;</span><br><span class="line">Query OK, <span class="number">16777232</span> <span class="keyword">rows</span> affected (<span class="number">4</span> min <span class="number">11.18</span> sec)</span><br><span class="line">Records: <span class="number">16777232</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> test02 <span class="keyword">where</span> <span class="type">date</span><span class="operator">=</span><span class="string">'2020/04/01'</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">16777216</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test02(id,<span class="type">date</span>,name) <span class="keyword">select</span> replace(uuid(),<span class="string">'-'</span>,<span class="string">''</span>),<span class="string">'2020/04/30'</span>,name <span class="keyword">from</span> test02 <span class="keyword">where</span> <span class="type">date</span><span class="operator">=</span><span class="string">'2020/04/01'</span>;</span><br><span class="line">Query OK, <span class="number">16777216</span> <span class="keyword">rows</span> affected (<span class="number">5</span> min <span class="number">41.65</span> sec)</span><br><span class="line">Records: <span class="number">16777216</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br></pre></td></tr></tbody></table></figure><h3 id="view"><a href="#view" class="headerlink" title="view"></a>view</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> test01;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1048576</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.29</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> test_view;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">10485760</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">34.62</span> sec)</span><br><span class="line"></span><br><span class="line">explain <span class="keyword">select</span> id1, id2 <span class="keyword">from</span>  test_view <span class="keyword">where</span> id1<span class="operator">=</span><span class="number">500</span> <span class="keyword">and</span> id2 <span class="keyword">between</span> <span class="number">700</span> <span class="keyword">and</span> <span class="number">710</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+------------+------------+------+---------------+-------------+---------+-------+---------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span>      <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys <span class="operator">|</span> key         <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>   <span class="operator">|</span> <span class="keyword">rows</span>    <span class="operator">|</span> filtered <span class="operator">|</span> Extra       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+------------+------------+------+---------------+-------------+---------+-------+---------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> <span class="keyword">PRIMARY</span>     <span class="operator">|</span> <span class="operator">&lt;</span>derived2<span class="operator">&gt;</span> <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="operator">&lt;</span>auto_key0<span class="operator">&gt;</span>   <span class="operator">|</span> <span class="operator">&lt;</span>auto_key0<span class="operator">&gt;</span> <span class="operator">|</span> <span class="number">4</span>       <span class="operator">|</span> const <span class="operator">|</span>  <span class="number">104695</span> <span class="operator">|</span>    <span class="number">11.11</span> <span class="operator">|</span> <span class="keyword">Using</span> <span class="keyword">where</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> DERIVED     <span class="operator">|</span> test01     <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ALL</span>  <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">NULL</span>        <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span> <span class="number">1047386</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">NULL</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> <span class="keyword">UNION</span>       <span class="operator">|</span> test02     <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ALL</span>  <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">NULL</span>        <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span> <span class="number">1046904</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">NULL</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> <span class="keyword">UNION</span>       <span class="operator">|</span> test03     <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ALL</span>  <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">NULL</span>        <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span> <span class="number">1046904</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">NULL</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> <span class="keyword">UNION</span>       <span class="operator">|</span> test04     <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ALL</span>  <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">NULL</span>        <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span> <span class="number">1046904</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">NULL</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">6</span> <span class="operator">|</span> <span class="keyword">UNION</span>       <span class="operator">|</span> test05     <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ALL</span>  <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">NULL</span>        <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span> <span class="number">1046904</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">NULL</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7</span> <span class="operator">|</span> <span class="keyword">UNION</span>       <span class="operator">|</span> test06     <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ALL</span>  <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">NULL</span>        <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span> <span class="number">1046904</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">NULL</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">8</span> <span class="operator">|</span> <span class="keyword">UNION</span>       <span class="operator">|</span> test07     <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ALL</span>  <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">NULL</span>        <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span> <span class="number">1046904</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">NULL</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">9</span> <span class="operator">|</span> <span class="keyword">UNION</span>       <span class="operator">|</span> test08     <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ALL</span>  <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">NULL</span>        <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span> <span class="number">1046904</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">NULL</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">10</span> <span class="operator">|</span> <span class="keyword">UNION</span>       <span class="operator">|</span> test09     <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ALL</span>  <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">NULL</span>        <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span> <span class="number">1046904</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">NULL</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">11</span> <span class="operator">|</span> <span class="keyword">UNION</span>       <span class="operator">|</span> test10     <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ALL</span>  <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">NULL</span>        <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span> <span class="number">1046904</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">NULL</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+------------+------------+------+---------------+-------------+---------+-------+---------+----------+-------------+</span></span><br><span class="line"><span class="number">11</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">explain <span class="keyword">select</span> id1, id2 <span class="keyword">from</span>  test_view_pk <span class="keyword">where</span> id1<span class="operator">=</span><span class="number">500</span> <span class="keyword">and</span> id2 <span class="keyword">between</span> <span class="number">700</span> <span class="keyword">and</span> <span class="number">710</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+------------+------------+-------+---------------+-------------+---------+-------+---------+----------+--------------------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span>      <span class="operator">|</span> partitions <span class="operator">|</span> type  <span class="operator">|</span> possible_keys <span class="operator">|</span> key         <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>   <span class="operator">|</span> <span class="keyword">rows</span>    <span class="operator">|</span> filtered <span class="operator">|</span> Extra                    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+------------+------------+-------+---------------+-------------+---------+-------+---------+----------+--------------------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> <span class="keyword">PRIMARY</span>     <span class="operator">|</span> <span class="operator">&lt;</span>derived2<span class="operator">&gt;</span> <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ref</span>   <span class="operator">|</span> <span class="operator">&lt;</span>auto_key0<span class="operator">&gt;</span>   <span class="operator">|</span> <span class="operator">&lt;</span>auto_key0<span class="operator">&gt;</span> <span class="operator">|</span> <span class="number">4</span>       <span class="operator">|</span> const <span class="operator">|</span>  <span class="number">104695</span> <span class="operator">|</span>    <span class="number">11.11</span> <span class="operator">|</span> <span class="keyword">Using</span> <span class="keyword">where</span>; <span class="keyword">Using</span> index <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> DERIVED     <span class="operator">|</span> test01     <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> index <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">PRIMARY</span>     <span class="operator">|</span> <span class="number">8</span>       <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span> <span class="number">1047386</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> index              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> <span class="keyword">UNION</span>       <span class="operator">|</span> test02     <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> index <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">PRIMARY</span>     <span class="operator">|</span> <span class="number">8</span>       <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span> <span class="number">1046904</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> index              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> <span class="keyword">UNION</span>       <span class="operator">|</span> test03     <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> index <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">PRIMARY</span>     <span class="operator">|</span> <span class="number">8</span>       <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span> <span class="number">1046904</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> index              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> <span class="keyword">UNION</span>       <span class="operator">|</span> test04     <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> index <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">PRIMARY</span>     <span class="operator">|</span> <span class="number">8</span>       <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span> <span class="number">1046904</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> index              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">6</span> <span class="operator">|</span> <span class="keyword">UNION</span>       <span class="operator">|</span> test05     <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> index <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">PRIMARY</span>     <span class="operator">|</span> <span class="number">8</span>       <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span> <span class="number">1046904</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> index              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7</span> <span class="operator">|</span> <span class="keyword">UNION</span>       <span class="operator">|</span> test06     <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> index <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">PRIMARY</span>     <span class="operator">|</span> <span class="number">8</span>       <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span> <span class="number">1046904</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> index              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">8</span> <span class="operator">|</span> <span class="keyword">UNION</span>       <span class="operator">|</span> test07     <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> index <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">PRIMARY</span>     <span class="operator">|</span> <span class="number">8</span>       <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span> <span class="number">1046904</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> index              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">9</span> <span class="operator">|</span> <span class="keyword">UNION</span>       <span class="operator">|</span> test08     <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> index <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">PRIMARY</span>     <span class="operator">|</span> <span class="number">8</span>       <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span> <span class="number">1046904</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> index              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">10</span> <span class="operator">|</span> <span class="keyword">UNION</span>       <span class="operator">|</span> test09     <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> index <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">PRIMARY</span>     <span class="operator">|</span> <span class="number">8</span>       <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span> <span class="number">1046904</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> index              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">11</span> <span class="operator">|</span> <span class="keyword">UNION</span>       <span class="operator">|</span> test10     <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> index <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">PRIMARY</span>     <span class="operator">|</span> <span class="number">8</span>       <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span> <span class="number">1046904</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> index              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+------------+------------+-------+---------------+-------------+---------+-------+---------+----------+--------------------------+</span></span><br><span class="line"><span class="number">11</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.01</span> sec)</span><br></pre></td></tr></tbody></table></figure><h4 id="语句-1"><a href="#语句-1" class="headerlink" title="语句"></a>语句</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `test01` (</span><br><span class="line">  `id1` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `id2` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `name1` text,</span><br><span class="line">  `name2` text,</span><br><span class="line">  <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (`id1`, `id2`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- test02 -- test10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> test_view <span class="keyword">as</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test01</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test02</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test03</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test04</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test05</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test06</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test07</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test08</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test09</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test10</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> test_view_pk <span class="keyword">as</span></span><br><span class="line"><span class="keyword">select</span> id1, id2 <span class="keyword">from</span> test01</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> id1, id2 <span class="keyword">from</span> test02</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> id1, id2 <span class="keyword">from</span> test03</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> id1, id2 <span class="keyword">from</span> test04</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> id1, id2 <span class="keyword">from</span> test05</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> id1, id2 <span class="keyword">from</span> test06</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> id1, id2 <span class="keyword">from</span> test07</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> id1, id2 <span class="keyword">from</span> test08</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> id1, id2 <span class="keyword">from</span> test09</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> id1, id2 <span class="keyword">from</span> test10</span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">for i in {1..1024}</span><br><span class="line">do</span><br><span class="line">    s=""</span><br><span class="line">    for j in {1..1024}</span><br><span class="line">    do</span><br><span class="line">        s+="($i, $j, 'a', 'b')"</span><br><span class="line">        s+=","</span><br><span class="line">    done</span><br><span class="line">    mysql test -e "insert into test01 values${s%,}" &amp;</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">wait</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test02 <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test01;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test10 <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test01;</span><br></pre></td></tr></tbody></table></figure><h3 id="binlog-row-image"><a href="#binlog-row-image" class="headerlink" title="binlog_row_image"></a>binlog_row_image</h3><p>full： before image和after image都为全量字段<br>minimal： before image仅用于区分记录字段(主键等)，after image仅语句指定字段(更新字段)</p><h4 id="create-table"><a href="#create-table" class="headerlink" title="create table"></a>create table</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `test` (</span><br><span class="line">  `c1` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `c2` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `s1` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `s2` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (`c1`,`c2`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br></pre></td></tr></tbody></table></figure><h4 id="full"><a href="#full" class="headerlink" title="full"></a>full</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test <span class="keyword">values</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="string">'a1'</span>, <span class="string">'b1'</span>);</span><br><span class="line"></span><br><span class="line">### <span class="keyword">INSERT</span> <span class="keyword">INTO</span> `test`.`test`</span><br><span class="line">### <span class="keyword">SET</span></span><br><span class="line">###   <span class="variable">@1</span><span class="operator">=</span><span class="number">1</span> <span class="comment">/* INT meta=0 nullable=0 is_null=0 */</span></span><br><span class="line">###   <span class="variable">@2</span><span class="operator">=</span><span class="number">1</span> <span class="comment">/* INT meta=0 nullable=0 is_null=0 */</span></span><br><span class="line">###   <span class="variable">@3</span><span class="operator">=</span><span class="string">'a1'</span> <span class="comment">/* VARSTRING(60) meta=60 nullable=1 is_null=0 */</span></span><br><span class="line">###   <span class="variable">@4</span><span class="operator">=</span><span class="string">'b1'</span> <span class="comment">/* VARSTRING(60) meta=60 nullable=1 is_null=0 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> test <span class="keyword">where</span> c1<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> c2<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">### <span class="keyword">DELETE</span> <span class="keyword">FROM</span> `test`.`test`</span><br><span class="line">### <span class="keyword">WHERE</span></span><br><span class="line">###   <span class="variable">@1</span><span class="operator">=</span><span class="number">1</span> <span class="comment">/* INT meta=0 nullable=0 is_null=0 */</span></span><br><span class="line">###   <span class="variable">@2</span><span class="operator">=</span><span class="number">1</span> <span class="comment">/* INT meta=0 nullable=0 is_null=0 */</span></span><br><span class="line">###   <span class="variable">@3</span><span class="operator">=</span><span class="string">'a1'</span> <span class="comment">/* VARSTRING(60) meta=60 nullable=1 is_null=0 */</span></span><br><span class="line">###   <span class="variable">@4</span><span class="operator">=</span><span class="string">'b1'</span> <span class="comment">/* VARSTRING(60) meta=60 nullable=1 is_null=0 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> test00 <span class="keyword">set</span> s2<span class="operator">=</span><span class="string">'c123'</span> <span class="keyword">where</span> s1<span class="operator">=</span><span class="string">'a1'</span>;</span><br><span class="line"></span><br><span class="line">### <span class="keyword">UPDATE</span> `mysqltt`.`test00`</span><br><span class="line">### <span class="keyword">WHERE</span></span><br><span class="line">###   <span class="variable">@1</span><span class="operator">=</span><span class="number">1</span> <span class="comment">/* INT meta=0 nullable=0 is_null=0 */</span></span><br><span class="line">###   <span class="variable">@2</span><span class="operator">=</span><span class="number">1</span> <span class="comment">/* INT meta=0 nullable=0 is_null=0 */</span></span><br><span class="line">###   <span class="variable">@3</span><span class="operator">=</span><span class="string">'a1'</span> <span class="comment">/* VARSTRING(60) meta=60 nullable=1 is_null=0 */</span></span><br><span class="line">###   <span class="variable">@4</span><span class="operator">=</span><span class="string">'b1'</span> <span class="comment">/* VARSTRING(60) meta=60 nullable=1 is_null=0 */</span></span><br><span class="line">### <span class="keyword">SET</span></span><br><span class="line">###   <span class="variable">@1</span><span class="operator">=</span><span class="number">1</span> <span class="comment">/* INT meta=0 nullable=0 is_null=0 */</span></span><br><span class="line">###   <span class="variable">@2</span><span class="operator">=</span><span class="number">1</span> <span class="comment">/* INT meta=0 nullable=0 is_null=0 */</span></span><br><span class="line">###   <span class="variable">@3</span><span class="operator">=</span><span class="string">'a1'</span> <span class="comment">/* VARSTRING(60) meta=60 nullable=1 is_null=0 */</span></span><br><span class="line">###   <span class="variable">@4</span><span class="operator">=</span><span class="string">'c123'</span> <span class="comment">/* VARSTRING(60) meta=60 nullable=1 is_null=0 */</span></span><br><span class="line">### <span class="keyword">UPDATE</span> `mysqltt`.`test00`</span><br><span class="line">### <span class="keyword">WHERE</span></span><br><span class="line">###   <span class="variable">@1</span><span class="operator">=</span><span class="number">1</span> <span class="comment">/* INT meta=0 nullable=0 is_null=0 */</span></span><br><span class="line">###   <span class="variable">@2</span><span class="operator">=</span><span class="number">2</span> <span class="comment">/* INT meta=0 nullable=0 is_null=0 */</span></span><br><span class="line">###   <span class="variable">@3</span><span class="operator">=</span><span class="string">'a1'</span> <span class="comment">/* VARSTRING(60) meta=60 nullable=1 is_null=0 */</span></span><br><span class="line">###   <span class="variable">@4</span><span class="operator">=</span><span class="string">'b2'</span> <span class="comment">/* VARSTRING(60) meta=60 nullable=1 is_null=0 */</span></span><br><span class="line">### <span class="keyword">SET</span></span><br><span class="line">###   <span class="variable">@1</span><span class="operator">=</span><span class="number">1</span> <span class="comment">/* INT meta=0 nullable=0 is_null=0 */</span></span><br><span class="line">###   <span class="variable">@2</span><span class="operator">=</span><span class="number">2</span> <span class="comment">/* INT meta=0 nullable=0 is_null=0 */</span></span><br><span class="line">###   <span class="variable">@3</span><span class="operator">=</span><span class="string">'a1'</span> <span class="comment">/* VARSTRING(60) meta=60 nullable=1 is_null=0 */</span></span><br><span class="line">###   <span class="variable">@4</span><span class="operator">=</span><span class="string">'c123'</span> <span class="comment">/* VARSTRING(60) meta=60 nullable=1 is_null=0 */</span></span><br><span class="line">### <span class="keyword">UPDATE</span> `mysqltt`.`test00`</span><br><span class="line">### <span class="keyword">WHERE</span></span><br><span class="line">###   <span class="variable">@1</span><span class="operator">=</span><span class="number">1</span> <span class="comment">/* INT meta=0 nullable=0 is_null=0 */</span></span><br><span class="line">###   <span class="variable">@2</span><span class="operator">=</span><span class="number">3</span> <span class="comment">/* INT meta=0 nullable=0 is_null=0 */</span></span><br><span class="line">###   <span class="variable">@3</span><span class="operator">=</span><span class="string">'a1'</span> <span class="comment">/* VARSTRING(60) meta=60 nullable=1 is_null=0 */</span></span><br><span class="line">###   <span class="variable">@4</span><span class="operator">=</span><span class="string">'b3'</span> <span class="comment">/* VARSTRING(60) meta=60 nullable=1 is_null=0 */</span></span><br><span class="line">### <span class="keyword">SET</span></span><br><span class="line">###   <span class="variable">@1</span><span class="operator">=</span><span class="number">1</span> <span class="comment">/* INT meta=0 nullable=0 is_null=0 */</span></span><br><span class="line">###   <span class="variable">@2</span><span class="operator">=</span><span class="number">3</span> <span class="comment">/* INT meta=0 nullable=0 is_null=0 */</span></span><br><span class="line">###   <span class="variable">@3</span><span class="operator">=</span><span class="string">'a1'</span> <span class="comment">/* VARSTRING(60) meta=60 nullable=1 is_null=0 */</span></span><br><span class="line">###   <span class="variable">@4</span><span class="operator">=</span><span class="string">'c123'</span> <span class="comment">/* VARSTRING(60) meta=60 nullable=1 is_null=0 */</span></span><br></pre></td></tr></tbody></table></figure><h4 id="minimal"><a href="#minimal" class="headerlink" title="minimal"></a>minimal</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test <span class="keyword">values</span>(<span class="number">2</span>, <span class="number">2</span>, <span class="string">'a2'</span>, <span class="string">'b2'</span>);</span><br><span class="line"></span><br><span class="line">### <span class="keyword">INSERT</span> <span class="keyword">INTO</span> `test`.`test`</span><br><span class="line">### <span class="keyword">SET</span></span><br><span class="line">###   <span class="variable">@1</span><span class="operator">=</span><span class="number">2</span> <span class="comment">/* INT meta=0 nullable=0 is_null=0 */</span></span><br><span class="line">###   <span class="variable">@2</span><span class="operator">=</span><span class="number">2</span> <span class="comment">/* INT meta=0 nullable=0 is_null=0 */</span></span><br><span class="line">###   <span class="variable">@3</span><span class="operator">=</span><span class="string">'a2'</span> <span class="comment">/* VARSTRING(60) meta=60 nullable=1 is_null=0 */</span></span><br><span class="line">###   <span class="variable">@4</span><span class="operator">=</span><span class="string">'b2'</span> <span class="comment">/* VARSTRING(60) meta=60 nullable=1 is_null=0 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> test <span class="keyword">where</span> c1<span class="operator">=</span><span class="number">2</span> <span class="keyword">and</span> c2<span class="operator">=</span><span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">### <span class="keyword">DELETE</span> <span class="keyword">FROM</span> `test`.`test`</span><br><span class="line">### <span class="keyword">WHERE</span></span><br><span class="line">###   <span class="variable">@1</span><span class="operator">=</span><span class="number">2</span> <span class="comment">/* INT meta=0 nullable=0 is_null=0 */</span></span><br><span class="line">###   <span class="variable">@2</span><span class="operator">=</span><span class="number">2</span> <span class="comment">/* INT meta=0 nullable=0 is_null=0 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> test00 <span class="keyword">set</span> s2<span class="operator">=</span><span class="string">'d123'</span> <span class="keyword">where</span> s1<span class="operator">=</span><span class="string">'a2'</span>;</span><br><span class="line"></span><br><span class="line">### <span class="keyword">UPDATE</span> `mysqltt`.`test00`</span><br><span class="line">### <span class="keyword">WHERE</span></span><br><span class="line">###   <span class="variable">@1</span><span class="operator">=</span><span class="number">2</span> <span class="comment">/* INT meta=0 nullable=0 is_null=0 */</span></span><br><span class="line">###   <span class="variable">@2</span><span class="operator">=</span><span class="number">1</span> <span class="comment">/* INT meta=0 nullable=0 is_null=0 */</span></span><br><span class="line">### <span class="keyword">SET</span></span><br><span class="line">###   <span class="variable">@4</span><span class="operator">=</span><span class="string">'d123'</span> <span class="comment">/* VARSTRING(60) meta=60 nullable=1 is_null=0 */</span></span><br><span class="line">### <span class="keyword">UPDATE</span> `mysqltt`.`test00`</span><br><span class="line">### <span class="keyword">WHERE</span></span><br><span class="line">###   <span class="variable">@1</span><span class="operator">=</span><span class="number">2</span> <span class="comment">/* INT meta=0 nullable=0 is_null=0 */</span></span><br><span class="line">###   <span class="variable">@2</span><span class="operator">=</span><span class="number">2</span> <span class="comment">/* INT meta=0 nullable=0 is_null=0 */</span></span><br><span class="line">### <span class="keyword">SET</span></span><br><span class="line">###   <span class="variable">@4</span><span class="operator">=</span><span class="string">'d123'</span> <span class="comment">/* VARSTRING(60) meta=60 nullable=1 is_null=0 */</span></span><br><span class="line">### <span class="keyword">UPDATE</span> `mysqltt`.`test00`</span><br><span class="line">### <span class="keyword">WHERE</span></span><br><span class="line">###   <span class="variable">@1</span><span class="operator">=</span><span class="number">2</span> <span class="comment">/* INT meta=0 nullable=0 is_null=0 */</span></span><br><span class="line">###   <span class="variable">@2</span><span class="operator">=</span><span class="number">3</span> <span class="comment">/* INT meta=0 nullable=0 is_null=0 */</span></span><br><span class="line">### <span class="keyword">SET</span></span><br><span class="line">###   <span class="variable">@4</span><span class="operator">=</span><span class="string">'d123'</span> <span class="comment">/* VARSTRING(60) meta=60 nullable=1 is_null=0 */</span></span><br></pre></td></tr></tbody></table></figure><h3 id="使用备份idb快速恢复历史数据"><a href="#使用备份idb快速恢复历史数据" class="headerlink" title="使用备份idb快速恢复历史数据"></a>使用备份idb快速恢复历史数据</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> test discard tablespace;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">45.11</span> sec)</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test;</span><br><span class="line">ERROR <span class="number">1814</span> (HY000): Tablespace has been discarded <span class="keyword">for</span> <span class="keyword">table</span> <span class="string">'test'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flush <span class="keyword">table</span> test <span class="keyword">for</span> export;</span><br><span class="line">scp <span class="operator">/</span>backup_node<span class="operator">/</span>path_to_dat<span class="operator">/</span>test.ibd <span class="operator">/</span>recover_node<span class="operator">/</span>path_to_dat<span class="operator">/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> test import tablespace;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected, <span class="number">1</span> warning (<span class="number">18.73</span> sec)</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">full</span> processlist;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+-----------+------+---------+------+-------------+------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> Id <span class="operator">|</span> <span class="keyword">User</span> <span class="operator">|</span> Host      <span class="operator">|</span> db   <span class="operator">|</span> Command <span class="operator">|</span> <span class="type">Time</span> <span class="operator">|</span> State       <span class="operator">|</span> Info                               <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+-----------+------+---------+------+-------------+------------------------------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">8</span> <span class="operator">|</span> root <span class="operator">|</span> localhost <span class="operator">|</span> test <span class="operator">|</span> Query   <span class="operator">|</span>   <span class="number">16</span> <span class="operator">|</span> <span class="keyword">System</span> lock <span class="operator">|</span> <span class="keyword">alter</span> <span class="keyword">table</span> test import tablespace <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">12</span> <span class="operator">|</span> root <span class="operator">|</span> localhost <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> Query   <span class="operator">|</span>    <span class="number">0</span> <span class="operator">|</span> starting    <span class="operator">|</span> <span class="keyword">show</span> <span class="keyword">full</span> processlist              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+-----------+------+---------+------+-------------+------------------------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test limit <span class="number">1</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------------------+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> <span class="type">date</span>                <span class="operator">|</span> name  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------------------+-------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> <span class="number">2020</span><span class="number">-04</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span> aaaaa <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------------------+-------+</span></span><br></pre></td></tr></tbody></table></figure><h3 id="锁等待"><a href="#锁等待" class="headerlink" title="锁等待"></a>锁等待</h3><ul><li><code>show engine innodb status</code>看死锁/锁等待</li><li><code>information_schema.innodb_locks</code>和<code>information_schema.innodb_lock_waits</code>看锁关系信息</li><li><code>performance_schema.events_statements_history</code>和<code>performance_schema.threads</code>看<code>show processlist</code>中pid执行历史语句</li><li><code>information_schema.innodb_trx</code>看当前执行中未提交事务</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># session1</span><br><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> test.test01 <span class="keyword">where</span> id1<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> id2<span class="operator">=</span><span class="number">2</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># session2</span><br><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> test.test01 <span class="keyword">where</span> id1<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> id2<span class="operator">=</span><span class="number">2</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># session3</span><br><span class="line"><span class="keyword">show</span> engine innodb status\G;</span><br><span class="line"></span><br><span class="line">LIST <span class="keyword">OF</span> TRANSACTIONS <span class="keyword">FOR</span> <span class="keyword">EACH</span> SESSION:</span><br><span class="line"><span class="comment">---TRANSACTION 281479529381440, not started</span></span><br><span class="line"><span class="number">0</span> lock struct(s), heap size <span class="number">1136</span>, <span class="number">0</span> <span class="type">row</span> lock(s)</span><br><span class="line"><span class="comment">---TRANSACTION 160786, ACTIVE 16 sec starting index read</span></span><br><span class="line">mysql tables <span class="keyword">in</span> use <span class="number">1</span>, locked <span class="number">1</span></span><br><span class="line">LOCK WAIT <span class="number">2</span> lock struct(s), heap size <span class="number">1136</span>, <span class="number">1</span> <span class="type">row</span> lock(s)</span><br><span class="line">MySQL thread id <span class="number">2</span>, OS thread handle <span class="number">123145348661248</span>, query id <span class="number">74</span> localhost root updating</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> test01 <span class="keyword">where</span> id1<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> id2<span class="operator">=</span><span class="number">1</span></span><br><span class="line"><span class="comment">------- TRX HAS BEEN WAITING 16 SEC FOR THIS LOCK TO BE GRANTED:</span></span><br><span class="line">RECORD LOCKS space id <span class="number">66</span> page <span class="keyword">no</span> <span class="number">4</span> n bits <span class="number">552</span> index <span class="keyword">PRIMARY</span> <span class="keyword">of</span> <span class="keyword">table</span> `test`.`test01` trx id <span class="number">160786</span> lock_mode X locks rec but <span class="keyword">not</span> gap waiting</span><br><span class="line">Record lock, heap <span class="keyword">no</span> <span class="number">2</span> PHYSICAL RECORD: n_fields <span class="number">6</span>; compact format; info bits <span class="number">32</span></span><br><span class="line"> <span class="number">0</span>: len <span class="number">4</span>; hex <span class="number">80000001</span>; <span class="keyword">asc</span>     ;;</span><br><span class="line"> <span class="number">1</span>: len <span class="number">4</span>; hex <span class="number">80000001</span>; <span class="keyword">asc</span>     ;;</span><br><span class="line"> <span class="number">2</span>: len <span class="number">6</span>; hex <span class="number">000000027411</span>; <span class="keyword">asc</span>     t ;;</span><br><span class="line"> <span class="number">3</span>: len <span class="number">7</span>; hex <span class="number">310000013</span>f2879; <span class="keyword">asc</span> <span class="number">1</span>   ?(y;;</span><br><span class="line"> <span class="number">4</span>: len <span class="number">1</span>; hex <span class="number">61</span>; <span class="keyword">asc</span> a;;</span><br><span class="line"> <span class="number">5</span>: len <span class="number">1</span>; hex <span class="number">62</span>; <span class="keyword">asc</span> b;;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># session4</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.innodb_lock_waits;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------+-------------------+-----------------+------------------+</span></span><br><span class="line"><span class="operator">|</span> requesting_trx_id <span class="operator">|</span> requested_lock_id <span class="operator">|</span> blocking_trx_id <span class="operator">|</span> blocking_lock_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------+-------------------+-----------------+------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">160787</span>            <span class="operator">|</span> <span class="number">160787</span>:<span class="number">66</span>:<span class="number">4</span>:<span class="number">2</span>     <span class="operator">|</span> <span class="number">160785</span>          <span class="operator">|</span> <span class="number">160785</span>:<span class="number">66</span>:<span class="number">4</span>:<span class="number">2</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------+-------------------+-----------------+------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.innodb_locks;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------------+-----------+-----------+-----------------+------------+------------+-----------+----------+-----------+</span></span><br><span class="line"><span class="operator">|</span> lock_id       <span class="operator">|</span> lock_trx_id <span class="operator">|</span> lock_mode <span class="operator">|</span> lock_type <span class="operator">|</span> lock_table      <span class="operator">|</span> lock_index <span class="operator">|</span> lock_space <span class="operator">|</span> lock_page <span class="operator">|</span> lock_rec <span class="operator">|</span> lock_data <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------------+-----------+-----------+-----------------+------------+------------+-----------+----------+-----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">160787</span>:<span class="number">66</span>:<span class="number">4</span>:<span class="number">2</span> <span class="operator">|</span> <span class="number">160787</span>      <span class="operator">|</span> X         <span class="operator">|</span> RECORD    <span class="operator">|</span> `test`.`test01` <span class="operator">|</span> <span class="keyword">PRIMARY</span>    <span class="operator">|</span>         <span class="number">66</span> <span class="operator">|</span>         <span class="number">4</span> <span class="operator">|</span>        <span class="number">2</span> <span class="operator">|</span> <span class="number">1</span>, <span class="number">1</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">160785</span>:<span class="number">66</span>:<span class="number">4</span>:<span class="number">2</span> <span class="operator">|</span> <span class="number">160785</span>      <span class="operator">|</span> X         <span class="operator">|</span> RECORD    <span class="operator">|</span> `test`.`test01` <span class="operator">|</span> <span class="keyword">PRIMARY</span>    <span class="operator">|</span>         <span class="number">66</span> <span class="operator">|</span>         <span class="number">4</span> <span class="operator">|</span>        <span class="number">2</span> <span class="operator">|</span> <span class="number">1</span>, <span class="number">1</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------------+-----------+-----------+-----------------+------------+------------+-----------+----------+-----------+</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"># session5</span><br><span class="line"><span class="keyword">SELECT</span> THREAD_ID,TIMER_START,TIMER_END,TIMER_WAIT,SQL_TEXT,MESSAGE_TEXT <span class="keyword">FROM</span> performance_schema.events_statements_history <span class="keyword">WHERE</span> thread_id <span class="operator">=</span> (     <span class="keyword">SELECT</span> THREAD_ID <span class="keyword">FROM</span> performance_schema.threads <span class="keyword">WHERE</span> PROCESSLIST_ID <span class="operator">=</span> <span class="number">10</span> )\G</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">   THREAD_ID: <span class="number">36</span></span><br><span class="line"> TIMER_START: <span class="number">2048071080000000</span></span><br><span class="line">   TIMER_END: <span class="number">2048071201000000</span></span><br><span class="line">  TIMER_WAIT: <span class="number">121000000</span></span><br><span class="line">    SQL_TEXT: <span class="keyword">select</span> @<span class="variable">@version</span>_comment limit <span class="number">1</span></span><br><span class="line">MESSAGE_TEXT: <span class="keyword">NULL</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">2.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">   THREAD_ID: <span class="number">36</span></span><br><span class="line"> TIMER_START: <span class="number">2049834364000000</span></span><br><span class="line">   TIMER_END: <span class="number">2049834417000000</span></span><br><span class="line">  TIMER_WAIT: <span class="number">53000000</span></span><br><span class="line">    SQL_TEXT: <span class="keyword">begin</span></span><br><span class="line">MESSAGE_TEXT: <span class="keyword">NULL</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">3.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">   THREAD_ID: <span class="number">36</span></span><br><span class="line"> TIMER_START: <span class="number">2055696930000000</span></span><br><span class="line">   TIMER_END: <span class="number">2055730415000000</span></span><br><span class="line">  TIMER_WAIT: <span class="number">33485000000</span></span><br><span class="line">    SQL_TEXT: <span class="keyword">delete</span> <span class="keyword">from</span> test.test01 <span class="keyword">where</span> id1<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> id2<span class="operator">=</span><span class="number">1</span></span><br><span class="line">MESSAGE_TEXT: <span class="keyword">NULL</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> THREAD_ID,TIMER_START,TIMER_END,TIMER_WAIT,SQL_TEXT,MESSAGE_TEXT <span class="keyword">FROM</span> performance_schema.events_statements_history <span class="keyword">WHERE</span> thread_id <span class="operator">=</span> (     <span class="keyword">SELECT</span> THREAD_ID <span class="keyword">FROM</span> performance_schema.threads <span class="keyword">WHERE</span> PROCESSLIST_ID <span class="operator">=</span> <span class="number">12</span> )\G</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">   THREAD_ID: <span class="number">38</span></span><br><span class="line"> TIMER_START: <span class="number">2197004107000000</span></span><br><span class="line">   TIMER_END: <span class="number">2197008105000000</span></span><br><span class="line">  TIMER_WAIT: <span class="number">3998000000</span></span><br><span class="line">    SQL_TEXT: <span class="keyword">select</span> @<span class="variable">@version</span>_comment limit <span class="number">1</span></span><br><span class="line">MESSAGE_TEXT: <span class="keyword">NULL</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">2.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">   THREAD_ID: <span class="number">38</span></span><br><span class="line"> TIMER_START: <span class="number">2198577580000000</span></span><br><span class="line">   TIMER_END: <span class="number">2198577653000000</span></span><br><span class="line">  TIMER_WAIT: <span class="number">73000000</span></span><br><span class="line">    SQL_TEXT: <span class="keyword">begin</span></span><br><span class="line">MESSAGE_TEXT: <span class="keyword">NULL</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">3.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">   THREAD_ID: <span class="number">38</span></span><br><span class="line"> TIMER_START: <span class="number">2200660449000000</span></span><br><span class="line">   TIMER_END: <span class="number">2251869851000000</span></span><br><span class="line">  TIMER_WAIT: <span class="number">51209402000000</span></span><br><span class="line">    SQL_TEXT: <span class="keyword">delete</span> <span class="keyword">from</span> test.test01 <span class="keyword">where</span> id1<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> id2<span class="operator">=</span><span class="number">1</span></span><br><span class="line">MESSAGE_TEXT: Lock wait timeout exceeded; try restarting transaction</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"># session <span class="number">6</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.innodb_trx\G;</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">                    trx_id: <span class="number">169733</span></span><br><span class="line">                 trx_state: LOCK WAIT</span><br><span class="line">               trx_started: <span class="number">2020</span><span class="number">-07</span><span class="number">-08</span> <span class="number">23</span>:<span class="number">09</span>:<span class="number">47</span></span><br><span class="line">     trx_requested_lock_id: <span class="number">169733</span>:<span class="number">66</span>:<span class="number">4</span>:<span class="number">3</span></span><br><span class="line">          trx_wait_started: <span class="number">2020</span><span class="number">-07</span><span class="number">-08</span> <span class="number">23</span>:<span class="number">09</span>:<span class="number">47</span></span><br><span class="line">                trx_weight: <span class="number">2</span></span><br><span class="line">       trx_mysql_thread_id: <span class="number">3</span></span><br><span class="line">                 trx_query: <span class="keyword">delete</span> <span class="keyword">from</span> test.test01 <span class="keyword">where</span> id1<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> id2<span class="operator">=</span><span class="number">2</span></span><br><span class="line">       trx_operation_state: starting index read</span><br><span class="line">         trx_tables_in_use: <span class="number">1</span></span><br><span class="line">         trx_tables_locked: <span class="number">1</span></span><br><span class="line">          trx_lock_structs: <span class="number">2</span></span><br><span class="line">     trx_lock_memory_bytes: <span class="number">1136</span></span><br><span class="line">           trx_rows_locked: <span class="number">1</span></span><br><span class="line">         trx_rows_modified: <span class="number">0</span></span><br><span class="line">   trx_concurrency_tickets: <span class="number">0</span></span><br><span class="line">       trx_isolation_level: READ COMMITTED</span><br><span class="line">         trx_unique_checks: <span class="number">1</span></span><br><span class="line">    trx_foreign_key_checks: <span class="number">1</span></span><br><span class="line">trx_last_foreign_key_error: <span class="keyword">NULL</span></span><br><span class="line"> trx_adaptive_hash_latched: <span class="number">0</span></span><br><span class="line"> trx_adaptive_hash_timeout: <span class="number">0</span></span><br><span class="line">          trx_is_read_only: <span class="number">0</span></span><br><span class="line">trx_autocommit_non_locking: <span class="number">0</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">2.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">                    trx_id: <span class="number">169732</span></span><br><span class="line">                 trx_state: <span class="keyword">RUNNING</span></span><br><span class="line">               trx_started: <span class="number">2020</span><span class="number">-07</span><span class="number">-08</span> <span class="number">23</span>:<span class="number">09</span>:<span class="number">32</span></span><br><span class="line">     trx_requested_lock_id: <span class="keyword">NULL</span></span><br><span class="line">          trx_wait_started: <span class="keyword">NULL</span></span><br><span class="line">                trx_weight: <span class="number">3</span></span><br><span class="line">       trx_mysql_thread_id: <span class="number">2</span></span><br><span class="line">                 trx_query: <span class="keyword">NULL</span></span><br><span class="line">       trx_operation_state: <span class="keyword">NULL</span></span><br><span class="line">         trx_tables_in_use: <span class="number">0</span></span><br><span class="line">         trx_tables_locked: <span class="number">1</span></span><br><span class="line">          trx_lock_structs: <span class="number">2</span></span><br><span class="line">     trx_lock_memory_bytes: <span class="number">1136</span></span><br><span class="line">           trx_rows_locked: <span class="number">1</span></span><br><span class="line">         trx_rows_modified: <span class="number">1</span></span><br><span class="line">   trx_concurrency_tickets: <span class="number">0</span></span><br><span class="line">       trx_isolation_level: READ COMMITTED</span><br><span class="line">         trx_unique_checks: <span class="number">1</span></span><br><span class="line">    trx_foreign_key_checks: <span class="number">1</span></span><br><span class="line">trx_last_foreign_key_error: <span class="keyword">NULL</span></span><br><span class="line"> trx_adaptive_hash_latched: <span class="number">0</span></span><br><span class="line"> trx_adaptive_hash_timeout: <span class="number">0</span></span><br><span class="line">          trx_is_read_only: <span class="number">0</span></span><br><span class="line">trx_autocommit_non_locking: <span class="number">0</span></span><br></pre></td></tr></tbody></table></figure><h3 id="partition"><a href="#partition" class="headerlink" title="partition"></a>partition</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> test\G;</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">       <span class="keyword">Table</span>: test</span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">Table</span>: <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `test` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `<span class="type">date</span>` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  `name` text,</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `id` (`id`,`<span class="type">date</span>`),</span><br><span class="line">  KEY `uk1` (`<span class="type">date</span>`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">42990946</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(id), <span class="type">date</span> <span class="keyword">from</span> test <span class="keyword">group</span> <span class="keyword">by</span> <span class="type">date</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="type">date</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">count</span>(id) <span class="operator">|</span> <span class="type">date</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">4194304</span> <span class="operator">|</span> <span class="number">2020</span><span class="number">-04</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">4194304</span> <span class="operator">|</span> <span class="number">2020</span><span class="number">-04</span><span class="number">-02</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">4194304</span> <span class="operator">|</span> <span class="number">2020</span><span class="number">-04</span><span class="number">-03</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">4194304</span> <span class="operator">|</span> <span class="number">2020</span><span class="number">-04</span><span class="number">-04</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">4194304</span> <span class="operator">|</span> <span class="number">2020</span><span class="number">-04</span><span class="number">-05</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">4194304</span> <span class="operator">|</span> <span class="number">2020</span><span class="number">-04</span><span class="number">-06</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">4194304</span> <span class="operator">|</span> <span class="number">2020</span><span class="number">-04</span><span class="number">-07</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">4194304</span> <span class="operator">|</span> <span class="number">2020</span><span class="number">-04</span><span class="number">-08</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">4194304</span> <span class="operator">|</span> <span class="number">2020</span><span class="number">-04</span><span class="number">-09</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">4194304</span> <span class="operator">|</span> <span class="number">2020</span><span class="number">-04</span><span class="number">-10</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+---------------------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">19.10</span> sec)</span><br><span class="line"></span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test <span class="keyword">where</span> <span class="type">date</span> <span class="operator">&lt;</span> <span class="string">'20200402'</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+----------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys <span class="operator">|</span> key  <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span>     <span class="operator">|</span> filtered <span class="operator">|</span> Extra       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+----------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> test  <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ALL</span>  <span class="operator">|</span> uk1           <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">41849498</span> <span class="operator">|</span>    <span class="number">19.87</span> <span class="operator">|</span> <span class="keyword">Using</span> <span class="keyword">where</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+----------+----------+-------------+</span></span><br><span class="line"></span><br><span class="line">## 约束</span><br><span class="line">ERROR <span class="number">1503</span> (HY000): A <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> must include <span class="keyword">all</span> columns <span class="keyword">in</span> the <span class="keyword">table</span><span class="string">'s partitioning function</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">du -sh test.ibd</span></span><br><span class="line"><span class="string">2.1G   test.ibd</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">alter table test partition by range columns(date)(</span></span><br><span class="line"><span class="string">  partition p20200331 values less than ('</span><span class="number">20200401</span><span class="string">'),</span></span><br><span class="line"><span class="string">  partition p20200401 values less than ('</span><span class="number">20200402</span><span class="string">'),</span></span><br><span class="line"><span class="string">  partition p20200402 values less than ('</span><span class="number">20200403</span><span class="string">'),</span></span><br><span class="line"><span class="string">  partition p20200403 values less than ('</span><span class="number">20200404</span><span class="string">'),</span></span><br><span class="line"><span class="string">  partition p20200404 values less than ('</span><span class="number">20200405</span><span class="string">'),</span></span><br><span class="line"><span class="string">  partition p20200405 values less than ('</span><span class="number">20200406</span><span class="string">'),</span></span><br><span class="line"><span class="string">  partition p20200406 values less than ('</span><span class="number">20200407</span><span class="string">'),</span></span><br><span class="line"><span class="string">  partition p20200407 values less than ('</span><span class="number">20200408</span><span class="string">'),</span></span><br><span class="line"><span class="string">  partition p20200408 values less than ('</span><span class="number">20200409</span><span class="string">'),</span></span><br><span class="line"><span class="string">  partition p20200409 values less than ('</span><span class="number">20200410</span><span class="string">'),</span></span><br><span class="line"><span class="string">  partition p20200410 values less than ('</span><span class="number">20200411</span><span class="string">')</span></span><br><span class="line"><span class="string">);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">du -sh test*.ibd</span></span><br><span class="line"><span class="string">112Ktest#P#p20200331.ibd</span></span><br><span class="line"><span class="string">225Mtest#P#p20200401.ibd</span></span><br><span class="line"><span class="string">225Mtest#P#p20200402.ibd</span></span><br><span class="line"><span class="string">225Mtest#P#p20200403.ibd</span></span><br><span class="line"><span class="string">225Mtest#P#p20200404.ibd</span></span><br><span class="line"><span class="string">225Mtest#P#p20200405.ibd</span></span><br><span class="line"><span class="string">225Mtest#P#p20200406.ibd</span></span><br><span class="line"><span class="string">225Mtest#P#p20200407.ibd</span></span><br><span class="line"><span class="string">225Mtest#P#p20200408.ibd</span></span><br><span class="line"><span class="string">225Mtest#P#p20200409.ibd</span></span><br><span class="line"><span class="string">225Mtest#P#p20200410.ibd</span></span><br><span class="line"><span class="string"> 44Mtest01.ibd</span></span><br><span class="line"><span class="string"> 44Mtest02.ibd</span></span><br><span class="line"><span class="string"> 44Mtest03.ibd</span></span><br><span class="line"><span class="string"> 44Mtest04.ibd</span></span><br><span class="line"><span class="string"> 44Mtest05.ibd</span></span><br><span class="line"><span class="string"> 44Mtest06.ibd</span></span><br><span class="line"><span class="string"> 44Mtest07.ibd</span></span><br><span class="line"><span class="string"> 44Mtest08.ibd</span></span><br><span class="line"><span class="string"> 44Mtest09.ibd</span></span><br><span class="line"><span class="string"> 44Mtest10.ibd</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">insert into test(date,name) values('</span><span class="number">20200430</span><span class="string">', '</span>bbbbb<span class="string">');</span></span><br><span class="line"><span class="string">ERROR 1526 (HY000): Table has no partition for value from column_list</span></span><br></pre></td></tr></tbody></table></figure><h3 id="partition快速删除分区数据"><a href="#partition快速删除分区数据" class="headerlink" title="partition快速删除分区数据"></a>partition快速删除分区数据</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(id), <span class="type">date</span> <span class="keyword">from</span> test <span class="keyword">group</span> <span class="keyword">by</span> <span class="type">date</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="type">date</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">count</span>(id) <span class="operator">|</span> <span class="type">date</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">1048576</span> <span class="operator">|</span> <span class="number">2020</span><span class="number">-03</span><span class="number">-31</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">1048576</span> <span class="operator">|</span> <span class="number">2020</span><span class="number">-04</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">1048576</span> <span class="operator">|</span> <span class="number">2020</span><span class="number">-04</span><span class="number">-02</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">1048576</span> <span class="operator">|</span> <span class="number">2020</span><span class="number">-04</span><span class="number">-03</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">1048576</span> <span class="operator">|</span> <span class="number">2020</span><span class="number">-04</span><span class="number">-04</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+---------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 阻塞DML，备份partition ibd物理文件</span></span><br><span class="line">flush <span class="keyword">table</span> test <span class="keyword">for</span> export;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- discard</span></span><br><span class="line">unlock tables;<span class="keyword">alter</span> <span class="keyword">table</span> test discard tablespace;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 拷贝回保留partition ibd文件，删除需要清理partition</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> test <span class="keyword">drop</span> <span class="keyword">partition</span> p20200331,p20200401;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- import</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> test import tablespace;</span><br></pre></td></tr></tbody></table></figure><h3 id="MRR"><a href="#MRR" class="headerlink" title="MRR"></a>MRR</h3><blockquote><p>默认mrr_cost为on且代价非常高，直接关闭。<code>set @@optimizer_switch='mrr=on,mrr_cost_based=off'</code></p></blockquote><p>2级索引查询对主键排序后回表，磁盘接近顺序IO</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test01 <span class="keyword">where</span> id2 <span class="operator">&gt;</span> <span class="number">10</span> <span class="keyword">and</span> id2 <span class="operator">&lt;</span> <span class="number">20</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+-------+---------------+------+---------+------+-------+----------+----------------------------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span>  <span class="operator">|</span> partitions <span class="operator">|</span> type  <span class="operator">|</span> possible_keys <span class="operator">|</span> key  <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span>  <span class="operator">|</span> filtered <span class="operator">|</span> Extra                            <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+-------+---------------+------+---------+------+-------+----------+----------------------------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> test01 <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">range</span> <span class="operator">|</span> idx1          <span class="operator">|</span> idx1 <span class="operator">|</span> <span class="number">4</span>       <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">17592</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> index <span class="keyword">condition</span>; <span class="keyword">Using</span> MRR <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+-------+---------------+------+---------+------+-------+----------+----------------------------------+</span></span><br></pre></td></tr></tbody></table></figure><h3 id="自增变量未持久化"><a href="#自增变量未持久化" class="headerlink" title="自增变量未持久化"></a>自增变量未持久化</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test_auto;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> test_auto <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_auto <span class="keyword">values</span>(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test_auto;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> test_auto <span class="keyword">where</span> id<span class="operator">=</span><span class="number">4</span>;</span><br><span class="line"><span class="comment">-- restart mysql server</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_auto <span class="keyword">values</span>(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test_auto;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+</span></span><br></pre></td></tr></tbody></table></figure><h3 id="DDL非原子"><a href="#DDL非原子" class="headerlink" title="DDL非原子"></a>DDL非原子</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> tables <span class="keyword">like</span> <span class="string">'test1%'</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+</span></span><br><span class="line"><span class="operator">|</span> Tables_in_test (test1<span class="operator">%</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+</span></span><br><span class="line"><span class="operator">|</span> test10                  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> test11                  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> test11,test12;</span><br><span class="line">ERROR <span class="number">1051</span> (<span class="number">42</span>S02): <span class="literal">Unknown</span> <span class="keyword">table</span> <span class="string">'test.test12'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> tables <span class="keyword">like</span> <span class="string">'test1%'</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+</span></span><br><span class="line"><span class="operator">|</span> Tables_in_test (test1<span class="operator">%</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+</span></span><br><span class="line"><span class="operator">|</span> test10                  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+</span></span><br></pre></td></tr></tbody></table></figure><h3 id="创建降序索引仍为升序"><a href="#创建降序索引仍为升序" class="headerlink" title="创建降序索引仍为升序"></a>创建降序索引仍为升序</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t1(c1 <span class="type">int</span>,c2 <span class="type">int</span>,index idx_c1_c2(c1,c2 <span class="keyword">desc</span>));</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> t1;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Table</span> <span class="operator">|</span> <span class="keyword">Create</span> <span class="keyword">Table</span>                                                                         <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> t1    <span class="operator">|</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t1` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span></span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------------------------------------------------------------------------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t1 <span class="keyword">select</span> rand()<span class="operator">*</span><span class="number">100000</span>, rand()<span class="operator">*</span><span class="number">100000</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t1 <span class="keyword">select</span> rand()<span class="operator">*</span><span class="number">100000</span>, rand()<span class="operator">*</span><span class="number">100000</span> <span class="keyword">from</span> t1;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span><span class="keyword">from</span> t1 <span class="keyword">order</span> <span class="keyword">by</span> c1 , c2 <span class="keyword">desc</span> limit <span class="number">5</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+-------+---------------+------+---------+------+--------+----------+-----------------------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> partitions <span class="operator">|</span> type  <span class="operator">|</span> possible_keys <span class="operator">|</span> key  <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span>   <span class="operator">|</span> filtered <span class="operator">|</span> Extra                       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+-------+---------------+------+---------+------+--------+----------+-----------------------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> t1    <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> index <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> idx1 <span class="operator">|</span> <span class="number">10</span>      <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">327519</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> index; <span class="keyword">Using</span> filesort <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+-------+---------------+------+---------+------+--------+----------+-----------------------------+</span></span><br></pre></td></tr></tbody></table></figure><h3 id="innodb-rollback-on-timeout"><a href="#innodb-rollback-on-timeout" class="headerlink" title="innodb_rollback_on_timeout"></a>innodb_rollback_on_timeout</h3><blockquote><p>需重启生效，影响事务原子性，建议设为<code>ON</code></p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--my.cnf</span></span><br><span class="line"><span class="comment">--innodb_rollback_on_timeout = OFF</span></span><br><span class="line"><span class="comment">--innodb_lock_wait_timeout = 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- session1</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+</span></span><br><span class="line"><span class="operator">|</span> c1   <span class="operator">|</span> c2   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> t1 <span class="keyword">set</span> c1<span class="operator">=</span><span class="number">3</span> <span class="keyword">where</span> c1<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> c2<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="keyword">Rows</span> matched: <span class="number">1</span>  Changed: <span class="number">1</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- session2</span></span><br><span class="line"><span class="keyword">begin</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> t1 <span class="keyword">set</span> c1<span class="operator">=</span><span class="number">3</span> <span class="keyword">where</span> c1<span class="operator">=</span><span class="number">2</span> <span class="keyword">and</span> c2<span class="operator">=</span><span class="number">2</span>;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="keyword">Rows</span> matched: <span class="number">1</span>  Changed: <span class="number">1</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- session 1</span></span><br><span class="line"><span class="keyword">begin</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> t1 <span class="keyword">set</span> c1<span class="operator">=</span><span class="number">3</span> <span class="keyword">where</span> c1<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> c2<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="keyword">Rows</span> matched: <span class="number">1</span>  Changed: <span class="number">1</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> t1 <span class="keyword">set</span> c1<span class="operator">=</span><span class="number">4</span> <span class="keyword">where</span> c1<span class="operator">=</span><span class="number">2</span> <span class="keyword">and</span> c2<span class="operator">=</span><span class="number">2</span>;</span><br><span class="line">ERROR <span class="number">1205</span> (HY000): Lock wait timeout exceeded; try restarting transaction</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+</span></span><br><span class="line"><span class="operator">|</span> c1   <span class="operator">|</span> c2   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--my.cnf</span></span><br><span class="line"><span class="comment">--innodb_rollback_on_timeout = ON</span></span><br><span class="line"><span class="comment">--innodb_lock_wait_timeout = 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- session1</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+</span></span><br><span class="line"><span class="operator">|</span> c1   <span class="operator">|</span> c2   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> t1 <span class="keyword">set</span> c1<span class="operator">=</span><span class="number">3</span> <span class="keyword">where</span> c1<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> c2<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="keyword">Rows</span> matched: <span class="number">1</span>  Changed: <span class="number">1</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- session2</span></span><br><span class="line"><span class="keyword">begin</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> t1 <span class="keyword">set</span> c1<span class="operator">=</span><span class="number">3</span> <span class="keyword">where</span> c1<span class="operator">=</span><span class="number">2</span> <span class="keyword">and</span> c2<span class="operator">=</span><span class="number">2</span>;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="keyword">Rows</span> matched: <span class="number">1</span>  Changed: <span class="number">1</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- session 1</span></span><br><span class="line"><span class="keyword">begin</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> t1 <span class="keyword">set</span> c1<span class="operator">=</span><span class="number">3</span> <span class="keyword">where</span> c1<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> c2<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="keyword">Rows</span> matched: <span class="number">1</span>  Changed: <span class="number">1</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> t1 <span class="keyword">set</span> c1<span class="operator">=</span><span class="number">4</span> <span class="keyword">where</span> c1<span class="operator">=</span><span class="number">2</span> <span class="keyword">and</span> c2<span class="operator">=</span><span class="number">2</span>;</span><br><span class="line">ERROR <span class="number">1205</span> (HY000): Lock wait timeout exceeded; try restarting transaction</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+</span></span><br><span class="line"><span class="operator">|</span> c1   <span class="operator">|</span> c2   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></tbody></table></figure><h3 id="delete备库回放"><a href="#delete备库回放" class="headerlink" title="delete备库回放"></a>delete备库回放</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show create table test_no_primary;</span><br><span class="line">+-----------------+-------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| Table           | Create Table                                                                                                                                          |</span><br><span class="line">+-----------------+-------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| test_no_primary | CREATE TABLE `test_no_primary` (</span><br><span class="line">  `c1` int(11) DEFAULT NULL,</span><br><span class="line">  `c2` varchar(20) DEFAULT NULL,</span><br><span class="line">  KEY `i1` (`c1`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 |</span><br><span class="line">+-----------------+-------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from test_no_primary;</span><br><span class="line">+------+------+</span><br><span class="line">| c1   | c2   |</span><br><span class="line">+------+------+</span><br><span class="line">|    1 | a    |</span><br><span class="line">|    1 | b    |</span><br><span class="line">|    1 | c    |</span><br><span class="line">+------+------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; delete from test_no_primary where c1=1;</span><br><span class="line">Query OK, 3 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 主库-&gt;备库日志</span><br><span class="line">#201023 21:44:30 server id 2454784635  end_log_pos 5657 CRC32 0x7b63ea86  Delete_rows: table id 282 flags: STMT_END_F</span><br><span class="line">### DELETE FROM `test`.`test_no_primary`</span><br><span class="line">### WHERE</span><br><span class="line">###   @1=1 /* INT meta=0 nullable=1 is_null=0 */</span><br><span class="line">###   @2='a' /* VARSTRING(60) meta=60 nullable=1 is_null=0 */</span><br><span class="line">### DELETE FROM `test`.`test_no_primary`</span><br><span class="line">### WHERE</span><br><span class="line">###   @1=1 /* INT meta=0 nullable=1 is_null=0 */</span><br><span class="line">###   @2='b' /* VARSTRING(60) meta=60 nullable=1 is_null=0 */</span><br><span class="line">### DELETE FROM `test`.`test_no_primary`</span><br><span class="line">### WHERE</span><br><span class="line">###   @1=1 /* INT meta=0 nullable=1 is_null=0 */</span><br><span class="line">###   @2='c' /* VARSTRING(60) meta=60 nullable=1 is_null=0 */</span><br><span class="line"># at 5657</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql&gt; show create table test_with_primary;</span><br><span class="line">+-------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| Table             | Create Table                                                                                                                                                                                                                            |</span><br><span class="line">+-------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| test_with_primary | CREATE TABLE `test_with_primary` (</span><br><span class="line">  `c0` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `c1` int(11) DEFAULT NULL,</span><br><span class="line">  `c2` varchar(20) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`c0`),</span><br><span class="line">  KEY `i1` (`c1`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=31 DEFAULT CHARSET=utf8 |</span><br><span class="line">+-------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from test_with_primary;</span><br><span class="line">+----+------+------+</span><br><span class="line">| c0 | c1   | c2   |</span><br><span class="line">+----+------+------+</span><br><span class="line">|  1 |    1 | a    |</span><br><span class="line">| 11 |    1 | b    |</span><br><span class="line">| 21 |    1 | c    |</span><br><span class="line">+----+------+------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; delete from test_with_primary where c1=1;</span><br><span class="line">Query OK, 3 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 主库-&gt;备库日志</span><br><span class="line">#201023 21:53:59 server id 2454784635  end_log_pos 7005 CRC32 0xc0c83f05  Delete_rows: table id 284 flags: STMT_END_F</span><br><span class="line">### DELETE FROM `test`.`test_with_primary`</span><br><span class="line">### WHERE</span><br><span class="line">###   @1=1 /* INT meta=0 nullable=0 is_null=0 */</span><br><span class="line">###   @2=1 /* INT meta=0 nullable=1 is_null=0 */</span><br><span class="line">###   @3='a' /* VARSTRING(60) meta=60 nullable=1 is_null=0 */</span><br><span class="line">### DELETE FROM `test`.`test_with_primary`</span><br><span class="line">### WHERE</span><br><span class="line">###   @1=11 /* INT meta=0 nullable=0 is_null=0 */</span><br><span class="line">###   @2=1 /* INT meta=0 nullable=1 is_null=0 */</span><br><span class="line">###   @3='b' /* VARSTRING(60) meta=60 nullable=1 is_null=0 */</span><br><span class="line">### DELETE FROM `test`.`test_with_primary`</span><br><span class="line">### WHERE</span><br><span class="line">###   @1=21 /* INT meta=0 nullable=0 is_null=0 */</span><br><span class="line">###   @2=1 /* INT meta=0 nullable=1 is_null=0 */</span><br><span class="line">###   @3='c' /* VARSTRING(60) meta=60 nullable=1 is_null=0 */</span><br><span class="line"># at 7005</span><br></pre></td></tr></tbody></table></figure><h3 id="uuid-gt-auto-increment"><a href="#uuid-gt-auto-increment" class="headerlink" title="uuid -> auto_increment"></a>uuid -&gt; auto_increment</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from test;</span><br><span class="line">+--------------------------------------+------+</span><br><span class="line">| c1                                   | c2   |</span><br><span class="line">+--------------------------------------+------+</span><br><span class="line">| 17f6ea4e-1ea8-11eb-95f7-b54d65122ba1 | aaa  |</span><br><span class="line">| 1ab073fe-1ea8-11eb-95f7-b54d65122ba1 | bbb  |</span><br><span class="line">| 1c2a32d8-1ea8-11eb-95f7-b54d65122ba1 | ccc  |</span><br><span class="line">+--------------------------------------+------+</span><br><span class="line"></span><br><span class="line">mysql&gt; desc test;</span><br><span class="line">+-------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field | Type        | Null | Key | Default | Extra |</span><br><span class="line">+-------+-------------+------+-----+---------+-------+</span><br><span class="line">| c1    | varchar(36) | NO   | PRI | NULL    |       |</span><br><span class="line">| c2    | varchar(20) | YES  |     | NULL    |       |</span><br><span class="line">+-------+-------------+------+-----+---------+-------+</span><br><span class="line"></span><br><span class="line">mysql&gt; alter table test drop primary key;</span><br><span class="line">mysql&gt; alter table test add column c3 int auto_increment primary key;</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from test;</span><br><span class="line">+--------------------------------------+------+----+</span><br><span class="line">| c1                                   | c2   | c3 |</span><br><span class="line">+--------------------------------------+------+----+</span><br><span class="line">| 17f6ea4e-1ea8-11eb-95f7-b54d65122ba1 | aaa  |  1 |</span><br><span class="line">| 1ab073fe-1ea8-11eb-95f7-b54d65122ba1 | bbb  |  2 |</span><br><span class="line">| 1c2a32d8-1ea8-11eb-95f7-b54d65122ba1 | ccc  |  3 |</span><br><span class="line">+--------------------------------------+------+----+</span><br></pre></td></tr></tbody></table></figure><h3 id="字符串索引数字查询"><a href="#字符串索引数字查询" class="headerlink" title="字符串索引数字查询"></a>字符串索引数字查询</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show create table test\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">       Table: test</span><br><span class="line">Create Table: CREATE TABLE `test` (</span><br><span class="line">  `c1` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `c2` varchar(20) DEFAULT NULL,</span><br><span class="line">  `c3` char(36) DEFAULT NULL,</span><br><span class="line">  `c4` char(36) DEFAULT NULL,</span><br><span class="line">  `c5` char(36) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`c1`),</span><br><span class="line">  KEY `i1` (`c2`),</span><br><span class="line">  KEY `i2` (`c2`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=1376221 DEFAULT CHARSET=utf8</span><br><span class="line">1 row in set (0.05 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; explain select * from test where c2='1';</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+-------+------+----------+-------+</span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref   | rows | filtered | Extra |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+-------+------+----------+-------+</span><br><span class="line">|  1 | SIMPLE      | test  | NULL       | ref  | i1,i2         | i1   | 63      | const |    1 |   100.00 | NULL  |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+-------+------+----------+-------+</span><br><span class="line"></span><br><span class="line">mysql&gt; explain select * from test where c2=1;</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+---------+----------+-------------+</span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows    | filtered | Extra       |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+---------+----------+-------------+</span><br><span class="line">|  1 | SIMPLE      | test  | NULL       | ALL  | i1,i2         | NULL | NULL    | NULL | 1044395 |    10.00 | Using where |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+---------+----------+-------------+</span><br></pre></td></tr></tbody></table></figure><p>官方解释：<br>For comparisons of a string column with a number, MySQL cannot use an index on the column to look up the value quickly. If str_col is an indexed string column, the index cannot be used when performing the lookup in the following statement</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM tbl_name WHERE str_col=1;</span><br></pre></td></tr></tbody></table></figure><p>The reason for this is that there are many different strings that may convert to the value 1, such as ‘1’, ‘ 1’, or ‘1a’.</p><h3 id="show-status-like-‘handler-read-’"><a href="#show-status-like-‘handler-read-’" class="headerlink" title="show status like ‘handler%read%’"></a>show status like ‘handler%read%’</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show create table test.test\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">       Table: test</span><br><span class="line">Create Table: CREATE TABLE `test` (</span><br><span class="line">  `c1` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `c2` varchar(20) DEFAULT NULL,</span><br><span class="line">  `c3` char(36) DEFAULT NULL,</span><br><span class="line">  `c4` char(36) DEFAULT NULL,</span><br><span class="line">  `c5` char(36) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`c1`),</span><br><span class="line">  KEY `i1` (`c2`),</span><br><span class="line">  KEY `i2` (`c2`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=1310694 DEFAULT CHARSET=utf8</span><br><span class="line"></span><br><span class="line">show status like 'handler%read%';</span><br><span class="line">+-----------------------+-------+</span><br><span class="line">| Variable_name         | Value |</span><br><span class="line">+-----------------------+-------+</span><br><span class="line">| Handler_read_first    | 0     |</span><br><span class="line">| Handler_read_key      | 0     |</span><br><span class="line">| Handler_read_last     | 0     |</span><br><span class="line">| Handler_read_next     | 0     |</span><br><span class="line">| Handler_read_prev     | 0     |</span><br><span class="line">| Handler_read_rnd      | 0     |</span><br><span class="line">| Handler_read_rnd_next | 0     |</span><br><span class="line">+-----------------------+-------+</span><br><span class="line"></span><br><span class="line">select * from test.test where c2='1';</span><br><span class="line">+----+------+------+------+------+</span><br><span class="line">| c1 | c2   | c3   | c4   | c5   |</span><br><span class="line">+----+------+------+------+------+</span><br><span class="line">|  1 | 1    | NULL | NULL | NULL |</span><br><span class="line">+----+------+------+------+------+</span><br><span class="line"></span><br><span class="line">show status like 'handler%read%';</span><br><span class="line">+-----------------------+-------+</span><br><span class="line">| Variable_name         | Value |</span><br><span class="line">+-----------------------+-------+</span><br><span class="line">| Handler_read_first    | 0     |</span><br><span class="line">| Handler_read_key      | 1     |</span><br><span class="line">| Handler_read_last     | 0     |</span><br><span class="line">| Handler_read_next     | 1     |</span><br><span class="line">| Handler_read_prev     | 0     |</span><br><span class="line">| Handler_read_rnd      | 0     |</span><br><span class="line">| Handler_read_rnd_next | 0     |</span><br><span class="line">+-----------------------+-------+</span><br><span class="line"></span><br><span class="line">select * from test.test where c3='1';</span><br><span class="line">Empty set (0.40 sec)</span><br><span class="line"></span><br><span class="line">show status like 'handler%read%';</span><br><span class="line">+-----------------------+---------+</span><br><span class="line">| Variable_name         | Value   |</span><br><span class="line">+-----------------------+---------+</span><br><span class="line">| Handler_read_first    | 1       |</span><br><span class="line">| Handler_read_key      | 2       |</span><br><span class="line">| Handler_read_last     | 0       |</span><br><span class="line">| Handler_read_next     | 1       |</span><br><span class="line">| Handler_read_prev     | 0       |</span><br><span class="line">| Handler_read_rnd      | 0       |</span><br><span class="line">| Handler_read_rnd_next | 1048577 |</span><br><span class="line">+-----------------------+---------+</span><br></pre></td></tr></tbody></table></figure><h3 id="ibtmp1-临时表空间"><a href="#ibtmp1-临时表空间" class="headerlink" title="ibtmp1 临时表空间"></a>ibtmp1 临时表空间</h3><p>explain为Using temporary的使用ibtmp1，无法自动释放</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT @@innodb_temp_data_file_path;</span><br><span class="line">+------------------------------+</span><br><span class="line">| @@innodb_temp_data_file_path |</span><br><span class="line">+------------------------------+</span><br><span class="line">| ibtmp1:12M:autoextend        |</span><br><span class="line">+------------------------------+</span><br><span class="line"></span><br><span class="line">mysql&gt; explain insert into test_tmp(c2) select c2 from test_tmp;</span><br><span class="line">+----+-------------+----------+------------+------+---------------+------+---------+------+------+----------+-----------------+</span><br><span class="line">| id | select_type | table    | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra           |</span><br><span class="line">+----+-------------+----------+------------+------+---------------+------+---------+------+------+----------+-----------------+</span><br><span class="line">|  1 | INSERT      | test_tmp | NULL       | ALL  | NULL          | NULL | NULL    | NULL | NULL |     NULL | NULL            |</span><br><span class="line">|  1 | SIMPLE      | test_tmp | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    2 |   100.00 | Using temporary |</span><br><span class="line">+----+-------------+----------+------------+------+---------------+------+---------+------+------+----------+-----------------+</span><br><span class="line"></span><br><span class="line">$ du -sh /usr/local/var/mysql/test/test_tmp.ibd </span><br><span class="line">513M/usr/local/var/mysql/test/test_tmp.ibd</span><br><span class="line">$ du -sh /usr/local/var/mysql/ibtmp1 </span><br><span class="line">273M/usr/local/var/mysql/ibtmp1</span><br></pre></td></tr></tbody></table></figure><h2 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h2><h3 id=""><a href="#" class="headerlink" title=""></a><a href="https://redis.io/topics/notifications" title="" target="">Notifications</a></h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; config set notify-keyspace-events KEA</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; psubscribe '*'</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) "psubscribe"</span><br><span class="line">2) "*"</span><br><span class="line">3) (integer) 1</span><br><span class="line"></span><br><span class="line">1) "pmessage"</span><br><span class="line">2) "*"</span><br><span class="line">3) "__keyspace@0__:foo"</span><br><span class="line">4) "set"</span><br><span class="line">1) "pmessage"</span><br><span class="line">2) "*"</span><br><span class="line">3) "__keyevent@0__:set"</span><br><span class="line">4) "foo"</span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set foo 1</span><br><span class="line">OK</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>goim源码</title>
      <link href="2020/04/30/go/goim/"/>
      <url>2020/04/30/go/goim/</url>
      
        <content type="html"><![CDATA[<p>mid: member id<br>key: 绑定mid的会话key, auth时若token里没有, 在logic层使用uuid生成<br>accepts: mid的channel watch accepts, 在ch.NeedPush中check</p><h2 id="bufio"><a href="#bufio" class="headerlink" title="bufio"></a>bufio</h2><p>缓冲Reader/Writer, pop()复用peek()前移游标出栈, 读/写包头</p><h2 id="comet"><a href="#comet" class="headerlink" title="comet"></a>comet</h2><h3 id="protocol"><a href="#protocol" class="headerlink" title="protocol"></a>protocol</h3><p>p.ReadTCP(rr): 从rr pop一个proto<br>p.WriteTCP(wr): 如果是raw包, 直接用p.Body写wr; 否则写头+p.Body</p><h3 id="authTCP"><a href="#authTCP" class="headerlink" title="authTCP()"></a>authTCP()</h3><p>ch.CliProto.<font color="cyan">Set()</font>得到一个proto, 调用p.ReadTCP(rr), 读取auth proto<br>调用logic rpc connect进行auth, p.Body为token<br>调用p.WriteTCP(wr), 写authReply</p><h2 id="Operate"><a href="#Operate" class="headerlink" title="Operate()"></a>Operate()</h2><ul><li>OpChangeRoom: p.Body为rid, 将ch换到room</li><li>OpSub: ch.Watch, p.Body为ops</li><li>OpUnsub: ch.UnWatch, p.Body为ops</li><li>其他: logic rpc Receive, logic侧无处理</li></ul><h2 id="dispatchTCP"><a href="#dispatchTCP" class="headerlink" title="dispatchTCP()"></a>dispatchTCP()</h2><h3 id="ch-CliProto-Get-读取一个proto"><a href="#ch-CliProto-Get-读取一个proto" class="headerlink" title="ch.CliProto.Get()读取一个proto"></a>ch.CliProto.<font color="red">Get()</font>读取一个proto</h3><ul><li>OpHeartbeatReply: 调用p.WriteTCPHeart()写当前ch.room的online数</li><li>其他: 调用p.WriteTCP(wr), 写对应reply</li></ul><h2 id="TCP逻辑"><a href="#TCP逻辑" class="headerlink" title="TCP逻辑"></a>TCP逻辑</h2><p>绑定一个channel的Reader/Writer到conn</p><ol><li>handshake, 若timout则close conn</li><li>调用authTCP()认证, 返回accepts, key, rid, hb</li><li>1 根据accepts得到ch.Watch</li><li>2 根据key得到这个conn对应的Bucket, 使用CityHash32计算, 共32个桶</li><li>3 根据rid将ch放到对应的room里</li><li>重置心跳超时</li><li>开启go dispatchTCP(), ch.CliProto.<font color="cyan">Set()</font>得到一个proto, 调用p.ReadTCP(rr), 读取proto</li><li>1 <em>OpHeartbeat</em>: 调用logic rpc Heartbeat</li><li>2 <em>其他</em>: 调用s.Operate()</li><li>处理完proto后触发dispatchTCP()写对应reply</li></ol><h2 id="RenewOnline逻辑"><a href="#RenewOnline逻辑" class="headerlink" title="RenewOnline逻辑"></a>RenewOnline逻辑</h2><p>comet侧go onlineproc统计所有bucket的所有room的online<br>调用rpc RenewOnline<br>logic侧根据roomId计算hashKey, redis存储格式server -&gt; hashKey:online, hashKey使用CityHash32放64个桶</p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Online <span class="keyword">struct</span> {</span><br><span class="line">    Server    <span class="keyword">string</span>           <span class="string">`json:"server"`</span></span><br><span class="line">    RoomCount <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int32</span> <span class="string">`json:"room_count"`</span></span><br><span class="line">    <span class="comment">// logic侧5分钟未更新则DEL server</span></span><br><span class="line">    Updated   <span class="keyword">int64</span>            <span class="string">`json:"updated"`</span> </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Round"><a href="#Round" class="headerlink" title="Round"></a>Round</h2><p>reader/writer/timer资源池, 轮询获取降低高并发资源争用</p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Round <span class="keyword">struct</span> {</span><br><span class="line">    readers []bytes.Pool</span><br><span class="line">    writers []bytes.Pool</span><br><span class="line">    timers  []time.Timer</span><br><span class="line">    options RoundOptions</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="pool"><a href="#pool" class="headerlink" title="pool"></a>pool</h2><p>链表栈, 顶出顶入, 若无buf可用, 调用grow, 若入速度小于出速度会有内存溢出</p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Buffer <span class="keyword">struct</span> {</span><br><span class="line">    buf  []<span class="keyword">byte</span></span><br><span class="line">    next *Buffer <span class="comment">// next free buffer</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Pool <span class="keyword">struct</span> {</span><br><span class="line">    lock sync.Mutex</span><br><span class="line">    free *Buffer</span><br><span class="line">    max  <span class="keyword">int</span></span><br><span class="line">    num  <span class="keyword">int</span></span><br><span class="line">    size <span class="keyword">int</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="ring"><a href="#ring" class="headerlink" title="ring"></a>ring</h2><p>Proto的缓冲池，data数组大小[0:num-1], 游标wp比游标rp快会导致rp脏读</p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Ring <span class="keyword">struct</span> {</span><br><span class="line">    <span class="comment">// read</span></span><br><span class="line">    rp   <span class="keyword">uint64</span>   <span class="comment">// rp&amp;mask寻址data</span></span><br><span class="line">    num  <span class="keyword">uint64</span>   <span class="comment">// 2^N</span></span><br><span class="line">    mask <span class="keyword">uint64</span>   <span class="comment">// num-1</span></span><br><span class="line">    <span class="comment">// write</span></span><br><span class="line">    wp   <span class="keyword">uint64</span>   <span class="comment">// wp&amp;mask寻址data</span></span><br><span class="line">    data []grpc.Proto</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="channel"><a href="#channel" class="headerlink" title="channel"></a>channel</h2><p>memberId绑定的channel, 保存Proto的缓冲池Ring<br>通过Signal()通知有一个proto待处理; 通过开一个goroutin的Ready()通知处理一个proto写wr<br>若proto写wr太慢, rp游标移动比wp慢, 可能导致rp脏读<br>广播/房播/单播 的proto直接写wr</p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Channel <span class="keyword">struct</span> {</span><br><span class="line">    Room     *Room</span><br><span class="line">    CliProto Ring</span><br><span class="line">    signal   <span class="keyword">chan</span> *grpc.Proto</span><br><span class="line">    Writer   bufio.Writer</span><br><span class="line">    Reader   bufio.Reader</span><br><span class="line">    Next     *Channel</span><br><span class="line">    Prev     *Channel</span><br><span class="line"></span><br><span class="line">    Mid      <span class="keyword">int64</span></span><br><span class="line">    Key      <span class="keyword">string</span></span><br><span class="line">    IP       <span class="keyword">string</span></span><br><span class="line">    watchOps <span class="keyword">map</span>[<span class="keyword">int32</span>]<span class="keyword">struct</span>{}   <span class="comment">// Watch(ops)添加ops; UnWatch(ops)删除ops; NeedPush(op)检查op in watch</span></span><br><span class="line">    mutex    sync.RWMutex   <span class="comment">// lock for watchOps</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="room"><a href="#room" class="headerlink" title="room"></a>room</h2><p>保存channel链表</p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Room <span class="keyword">struct</span> {</span><br><span class="line">    ID        <span class="keyword">string</span></span><br><span class="line">    rLock     sync.RWMutex</span><br><span class="line">    next      *Channel</span><br><span class="line">    drop      <span class="keyword">bool</span>   <span class="comment">// true if Online-- == 0</span></span><br><span class="line">    Online    <span class="keyword">int32</span></span><br><span class="line">    AllOnline <span class="keyword">int32</span>   <span class="comment">// dirty read because Bucket.UpRoomsCount with RLock</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Bucket"><a href="#Bucket" class="headerlink" title="Bucket"></a>Bucket</h2><p>存放room和channel, channel可以change/put room, 自动创建new room<br>所有channel广播 或 指定room房播<br>routines处理job kafka rpc</p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Bucket <span class="keyword">struct</span> {</span><br><span class="line">    c     *conf.Bucket</span><br><span class="line">    cLock sync.RWMutex          <span class="comment">// lock for chs/rooms</span></span><br><span class="line">    chs   <span class="keyword">map</span>[<span class="keyword">string</span>]*Channel   <span class="comment">// 1024</span></span><br><span class="line">    <span class="comment">// room</span></span><br><span class="line">    rooms       <span class="keyword">map</span>[<span class="keyword">string</span>]*Room   <span class="comment">// 1024</span></span><br><span class="line">    routines    []<span class="keyword">chan</span> *grpc.BroadcastRoomReq   <span class="comment">// 32 (go b.roomproc((chan *grpc.BroadcastRoomReq, 1024)))</span></span><br><span class="line">    routinesNum <span class="keyword">uint64</span>   <span class="comment">// routinesNum % 32</span></span><br><span class="line"></span><br><span class="line">    ipCnts <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int32</span>   <span class="comment">// ip counter</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><img src="/2020/04/30/go/goim/%E6%88%BF%E9%97%B4%E4%BF%A1%E6%81%AF%E6%8E%A8%E9%80%81%E6%B5%81%E7%A8%8B.png" class=""><h2 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h2><p>根据SubKey获取Bucket</p><p>Operate:</p><ul><li>bucket.ChangeRoom</li><li>channel.Watch</li><li>channel.UnWatch</li></ul><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Server <span class="keyword">struct</span> {</span><br><span class="line">    c         *conf.Config</span><br><span class="line">    round     *Round      <span class="comment">// accept round store</span></span><br><span class="line">    buckets   []*Bucket   <span class="comment">// 32</span></span><br><span class="line">    bucketIdx <span class="keyword">uint32</span>      <span class="comment">// 32</span></span><br><span class="line"></span><br><span class="line">    serverID  <span class="keyword">string</span></span><br><span class="line">    rpcClient logic.LogicClient</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="job"><a href="#job" class="headerlink" title="job"></a>job</h2><p>job从kafka consume, 通过rpc调用comet</p><p>根据pushMsg.Type分:</p><ul><li>单播</li><li>房播</li><li>广播</li></ul><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// clinet</span></span><br><span class="line"><span class="keyword">var</span> XXXRoutineSize <span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> XXXChanSize <span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> XXXChan = <span class="built_in">make</span>([]<span class="keyword">chan</span> *server.XXXReq, XXXRoutineSize)</span><br><span class="line"><span class="keyword">var</span> XXXChanCursor <span class="keyword">uint64</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; XXXRoutineSize; i++ {</span><br><span class="line">    XXXChan[i] = <span class="built_in">make</span>(<span class="keyword">chan</span> *server.XXXReq, XXXChanSize)</span><br><span class="line">    <span class="keyword">go</span> process(XXXChan[i])</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *client)</span> <span class="title">process</span><span class="params">(XXXChan <span class="keyword">chan</span> *server.XXXReq)</span></span>{</span><br><span class="line">    <span class="keyword">for</span> {</span><br><span class="line">        <span class="keyword">select</span> XXXArg := &lt;- XXXChan:</span><br><span class="line">            reply, err := c.serverClient.XXX(context.Background(), &amp;server.XXXReq{</span><br><span class="line">                key: XXXArg.value,</span><br><span class="line">            })</span><br><span class="line">        ...</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *client)</span> <span class="title">XXXFunc</span><span class="params">(arg *server.XXXReq)</span></span> {</span><br><span class="line">    idx := atomic.AddUint64(&amp;XXXChanCursor, <span class="number">1</span>) % XXXRoutineSize</span><br><span class="line">    XXXChan[idx] &lt;- arg</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// server</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *server)</span> <span class="title">XXX</span><span class="params">(ctx context.Context, req *server.XXXReq)</span> <span class="params">(reply *server.XXXReply, err error)</span></span>{</span><br><span class="line">    ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="job-room-kafka房播msg流程"><a href="#job-room-kafka房播msg流程" class="headerlink" title="job.room kafka房播msg流程"></a>job.room kafka房播msg流程</h2><ol><li>根据msg.roomId调用getRoom(), 若没有则NewRoom() -&gt; go pushproc()监听, 然后Push()</li><li>pushproc:  SigTime=1S, Batch=20, Idle=15M</li><li>1 循环消费kafka msg, 直到超过1S未收到新msg，或&gt;=20次写</li><li>2 调用rpc房播, 等待最大15M若未收到新msg则退出循环</li></ol><h2 id="logic"><a href="#logic" class="headerlink" title="logic"></a>logic</h2><p>redis存储格式</p><ul><li>mid -&gt; key:server</li><li>key -&gt; server</li><li>server -&gt; hashKey:online<br><code>hashKey使用roomId通过cityHash32算出,共64个桶</code><br><code>将1024个room装进64个桶里</code></li></ul><h2 id="business-http-push参照doc"><a href="#business-http-push参照doc" class="headerlink" title="business http push参照doc"></a>business http push参照doc</h2>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zookeeper源码-6.数据库和日志</title>
      <link href="2020/04/29/zk/zkSrc_db/"/>
      <url>2020/04/29/zk/zkSrc_db/</url>
      
        <content type="html"><![CDATA[<h2 id="数据库格式"><a href="#数据库格式" class="headerlink" title="数据库格式"></a>数据库格式</h2><p>ZKDatabase负责记录节点的数据信息，事务日志以及Snapshot日志，以及watch的管理，相关类图如下:</p><img src="/2020/04/29/zk/zkSrc_db/database.png" class=""><p>主要的类信息如下:</p><ul><li>ZKDatabase 数据库类的封装</li><li>FileTxnSnapLog 日志类封装，包括事务日志和Snapshot日志的管理</li><li>SnapShot为Shapshot日志接口，FileSnap为具体实现类。</li><li>TxnLog为事务日志接口，FileTxnLog为具体实现类。</li><li>DataTree为节点数据管理类，负责保存节点的数据以及管理数据的Watcher。</li><li>DataNode保存节点的数据信息，状态信息以及子节点信息。</li></ul><h2 id="节点数据"><a href="#节点数据" class="headerlink" title="节点数据"></a>节点数据</h2><p>ZooKeeper的节点类似Linux文件目录，根目录为/,每个目录有唯一的路径，同时，在节点上可以绑定用户指定的数据。</p><h3 id="节点数据定义"><a href="#节点数据定义" class="headerlink" title="节点数据定义"></a>节点数据定义</h3><p>节点的目录信息存储于DataTree.nodes信息中，为树形结构。<br>节点的状态信息存储于类StatPersisted，具体字段的含义如下:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">long</span> czxid; 节点创建时的zxid</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">long</span> mzxid; 最后一次修改节点数据的zxid</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">long</span> ctime; 创建节点的时间</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">long</span> mtime; 最后一次修改节点数据的时间</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> version; 节点的版本号，创建时为<span class="number">0</span>，修改时+<span class="number">1</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> cversion; 孩子节点版本信息，每创建一个孩子节点+<span class="number">1</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> aversion; ACL版本信息</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">long</span> ephemeralOwner; 节点的类型信息</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">long</span> pzxid;  节点本身和孩子节点的最后一次修改zxid。</span><br></pre></td></tr></tbody></table></figure><h3 id="节点类型定义"><a href="#节点类型定义" class="headerlink" title="节点类型定义"></a>节点类型定义</h3><p>总共有四种类型的节点，具体定义为enum EphemeralType，每种类型的含义为:</p><ul><li>VOID 持久化的节点，用户连接关闭后节点会一直存在。</li><li>NORMAL 临时节点，用户连接断开后临时节点会被删除。临时节点信息存储在DataTree.ephemerals中。</li><li>CONTAINER 和VOID节点一样，但是当该节点的孩子被删除后，该节点会被删除。Container节点信息存储在DataTree.containers中。</li><li>TTL 和VOID节点一样，但是当该节点无孩子节点，并且当前时间距离上次修改时间超过ttl时间，该节点会被删除。TTL节点信息存储在DataTree.ttls中。</li></ul><hr><h2 id="特殊节点类型"><a href="#特殊节点类型" class="headerlink" title="特殊节点类型"></a>特殊节点类型</h2><blockquote><p>ZooKeeper的节点有两个特殊的目录:</p></blockquote><h3 id="zookeeper-quota"><a href="#zookeeper-quota" class="headerlink" title="/zookeeper/quota"></a>/zookeeper/quota</h3><p>配置某个节点的配额信息</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Rather than fight it, let root have an alias */</span></span><br><span class="line"><span class="comment">// "/"</span></span><br><span class="line">nodes.put(<span class="string">""</span>, root);</span><br><span class="line">nodes.putWithoutDigest(rootZookeeper, root);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** add the proc node and quota node */</span></span><br><span class="line"><span class="comment">// "/zookeeper"</span></span><br><span class="line">root.addChild(procChildZookeeper);</span><br><span class="line">nodes.put(procZookeeper, procDataNode);</span><br><span class="line"></span><br><span class="line"><span class="comment">// "/zookeeper/quota"</span></span><br><span class="line">procDataNode.addChild(quotaChildZookeeper);</span><br><span class="line">nodes.put(quotaZookeeper, quotaDataNode);</span><br></pre></td></tr></tbody></table></figure><ul><li>如某个节点的路径为/xx/yy,则对应的配额信息路径为/zookeeper/quota/xx/yy，其中/zookeeper/quota/xx/yy/zookeeper_limits包含管理员设置的配额信息，/zookeeper/quota/xx/yy/zookeeper_stats包含节点当前已使用的信息。</li><li>配额信息包含两个参数，分别表示大小(bytes)和节点数量(counts)。</li><li>在创建节点时会更新配额的信息，并检查是否超过配额。</li><li>配额设置详见cli包下SetQuotaCommand.java。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// also check to update the quotas for this node</span></span><br><span class="line">String lastPrefix = getMaxPrefixWithQuota(path);</span><br><span class="line"><span class="keyword">long</span> bytes = data == <span class="keyword">null</span> ? <span class="number">0</span> : data.length;</span><br><span class="line"><span class="keyword">if</span> (lastPrefix != <span class="keyword">null</span>) {</span><br><span class="line">    <span class="comment">// ok we have some match and need to update</span></span><br><span class="line">    updateCountBytes(lastPrefix, bytes, <span class="number">1</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * update the count/count of bytes of this stat datanode</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> lastPrefix</span></span><br><span class="line"><span class="comment"> *            the path of the node that is quotaed.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> bytesDiff</span></span><br><span class="line"><span class="comment"> *            the diff to be added to number of bytes</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> countDiff</span></span><br><span class="line"><span class="comment"> *            the diff to be added to the count</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateCountBytes</span><span class="params">(String lastPrefix, <span class="keyword">long</span> bytesDiff, <span class="keyword">int</span> countDiff)</span> </span>{</span><br></pre></td></tr></tbody></table></figure><h3 id="zookeeper-config"><a href="#zookeeper-config" class="headerlink" title="/zookeeper/config"></a>/zookeeper/config</h3><p>保存所有节点信息</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * create a /zookeeper/config node for maintaining the configuration (membership and quorum system) info for</span></span><br><span class="line"><span class="comment"> * zookeeper</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addConfigNode</span><span class="params">()</span> </span>{</span><br><span class="line">    DataNode zookeeperZnode = nodes.get(procZookeeper);</span><br><span class="line">    <span class="keyword">if</span> (zookeeperZnode != <span class="keyword">null</span>) { <span class="comment">// should always be the case</span></span><br><span class="line">        zookeeperZnode.addChild(configChildZookeeper);</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">assert</span> <span class="keyword">false</span> : <span class="string">"There's no /zookeeper znode - this should never happen."</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    nodes.put(configZookeeper, <span class="keyword">new</span> DataNode(<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">0</span>], -<span class="number">1L</span>, <span class="keyword">new</span> StatPersisted()));</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        <span class="comment">// Reconfig node is access controlled by default (ZOOKEEPER-2014).</span></span><br><span class="line">        setACL(configZookeeper, ZooDefs.Ids.READ_ACL_UNSAFE, -<span class="number">1</span>);</span><br><span class="line">    } <span class="keyword">catch</span> (KeeperException.NoNodeException e) {</span><br><span class="line">        <span class="keyword">assert</span> <span class="keyword">false</span> : <span class="string">"There's no "</span> + configZookeeper + <span class="string">" znode - this should never happen."</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>PrepRequestProcessor::run处理request流程中，对<code>OpCode.reconfig</code>会更改config node信息</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> OpCode.reconfig:</span><br><span class="line">    ...</span><br><span class="line">    nodeRecord = getRecordForPath(ZooDefs.CONFIG_NODE); <span class="comment">// "/zookeeper/config"</span></span><br><span class="line">    zks.checkACL(request.cnxn, nodeRecord.acl, ZooDefs.Perms.WRITE, request.authInfo, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    SetDataTxn setDataTxn = <span class="keyword">new</span> SetDataTxn(ZooDefs.CONFIG_NODE, request.qv.toString().getBytes(), -<span class="number">1</span>);</span><br><span class="line">    ...</span><br><span class="line">    nodeRecord.data = setDataTxn.getData();  <span class="comment">// request.qv.toString().getBytes()</span></span><br><span class="line">    ...</span><br><span class="line">    addChangeRecord(nodeRecord);</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></tbody></table></figure><ul><li>request.qv.toString() 记录QuorumMaj中集群所有成员信息</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">    StringBuilder sw = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (QuorumServer member : getAllMembers().values()) {</span><br><span class="line">        String key = <span class="string">"server."</span> + member.id;</span><br><span class="line">        String value = member.toString();</span><br><span class="line">        sw.append(key);</span><br><span class="line">        sw.append(<span class="string">'='</span>);</span><br><span class="line">        sw.append(value);</span><br><span class="line">        sw.append(<span class="string">'\n'</span>);</span><br><span class="line">    }</span><br><span class="line">    String hexVersion = Long.toHexString(version);</span><br><span class="line">    sw.append(<span class="string">"version="</span>);</span><br><span class="line">    sw.append(hexVersion);</span><br><span class="line">    <span class="keyword">return</span> sw.toString();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="Watcher管理"><a href="#Watcher管理" class="headerlink" title="Watcher管理"></a>Watcher管理</h2><p>有两种类型的Watcher</p><ul><li>childWatches 新增或者删除孩子节点时触发，可以在getChildren时注册。</li><li>dataWatches 在创建，删除，修改时触发。</li></ul><hr><h2 id="日志管理"><a href="#日志管理" class="headerlink" title="日志管理"></a>日志管理</h2><h3 id="TxnLog"><a href="#TxnLog" class="headerlink" title="TxnLog"></a>TxnLog</h3><p>事务日志的文件格式如下所示:</p><table><thead><tr><th>文件头(16Byte)</th><th>事务列表</th><th>0补齐</th></tr></thead></table><p>文件头的格式为class FileHeader:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> magic;   <span class="comment">//字符串"ZKLG"</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> version; <span class="comment">//默认为2</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">long</span> dbid;</span><br></pre></td></tr></tbody></table></figure><p>事务列表由多个事务组成，每个事务的格式如下:</p><table><thead><tr><th>校验和(8Bye)</th><th>数据长度(4Byte)</th><th>事务头信息(32Byte)</th><th>请求数据</th><th>结束符(0x42)</th></tr></thead></table><p>事务头的格式为class TxnHeader:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">long</span> clientId;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> cxid;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">long</span> zxid;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">long</span> time;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> type;</span><br></pre></td></tr></tbody></table></figure><p>写事务的详细逻辑见FileTxnLog.append,该函数会先检查日志文件是否存在，若不存在，则先创建文件，再写日志。每个日志文件的命名格式为log.{该文件第一个日志的zxid}。在commit到disk时判断是否需要roll一个新FileTxnLog。<br>日志文件生成后没有固定清理机制，需通过运维方法清理，或设置自动清理参数<code>autopurge.purgeInterval</code>，代码实现见DatadirCleanupManager::PurgeTask</p><h3 id="Snapshot"><a href="#Snapshot" class="headerlink" title="Snapshot"></a>Snapshot</h3><p>Snapshot文件格式如下:</p><table><thead><tr><th>文件头(16Byte)</th><th>session信息</th><th>节点信息</th></tr></thead></table><p>文件头格式和事务日志一样，只是Magic为“ZKSN”。</p><p>Session信息格式如下:</p><p>Count(4Byte)|1-id(8Byte)|1-Timeout(4Byte)|…|N-id|N-Timeout</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">serializeSnapshot</span><span class="params">(DataTree dt, OutputArchive oa, Map&lt;Long, Integer&gt; sessions)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">    HashMap&lt;Long, Integer&gt; sessSnap = <span class="keyword">new</span> HashMap&lt;Long, Integer&gt;(sessions);</span><br><span class="line">    oa.writeInt(sessSnap.size(), <span class="string">"count"</span>);</span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;Long, Integer&gt; entry : sessSnap.entrySet()) {</span><br><span class="line">        oa.writeLong(entry.getKey().longValue(), <span class="string">"id"</span>);</span><br><span class="line">        oa.writeInt(entry.getValue().intValue(), <span class="string">"timeout"</span>);</span><br><span class="line">    }</span><br><span class="line">    dt.serialize(oa, <span class="string">"tree"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="节点信息"><a href="#节点信息" class="headerlink" title="节点信息"></a>节点信息</h3><p>节点信息由类DataTree.serialize实现，该类会先序列化ACL信息，再按节点的树形结构序列化节点以及对应的状态信息，具体格式见代码。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serialize</span><span class="params">(OutputArchive oa, String tag)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">    serializeAcls(oa);</span><br><span class="line">    serializeNodes(oa);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> zookeeper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zookeeper源码-5.客户端响应请求</title>
      <link href="2020/04/29/zk/zkSrc_processPacket/"/>
      <url>2020/04/29/zk/zkSrc_processPacket/</url>
      
        <content type="html"><![CDATA[<p>NIOServerCnxn / NettyServerCnxn 调用ZooKeeperServer.processPacket，内部会调用submitRequest，最后submitRequest会将Request派发到firstProcessor</p><hr><h2 id="配置Processors"><a href="#配置Processors" class="headerlink" title="配置Processors"></a>配置Processors</h2><h3 id="Follower节点配置Processors"><a href="#Follower节点配置Processors" class="headerlink" title="Follower节点配置Processors"></a>Follower节点配置Processors</h3><p>Follower节点配置Processors详见FollowerZooKeeperServer.setupRequestProcessors, 链表结构如下:</p><img src="/2020/04/29/zk/zkSrc_processPacket/follower_processors.png" class=""><h3 id="Leader节点配置Processors"><a href="#Leader节点配置Processors" class="headerlink" title="Leader节点配置Processors"></a>Leader节点配置Processors</h3><p>Leader节点配置Processors详见LeaderZooKeeperServer.setupRequestProcessors, 链表结构如下:</p><img src="/2020/04/29/zk/zkSrc_processPacket/leader_processors.png" class=""><h3 id="客户端请求处理"><a href="#客户端请求处理" class="headerlink" title="客户端请求处理"></a>客户端请求处理</h3><p>Zookeeper将客户端的请求实际上分为两种类型:</p><ul><li>第一种类型的请求可以叫做读请求，如getData，getChildren等。<br>这种类型的请求不会修改zookeeper数据库的内容，因为zookeeper每个节点的数据库内容是一致的(不同的节点之间由于同步的时间不一致，可能会导致数据有不一致)，所以读请求只用在本地节点的数据库即可。</li><li>第二种节点会修改数据库内容，如create,delete等。<br>非Leader节点接收到此种请求，会先转发到Leader节点，Leader会按照先Proposal，后Commit的方式将请求同步到所有节点。</li></ul><h2 id="处理请求流程"><a href="#处理请求流程" class="headerlink" title="处理请求流程"></a>处理请求流程</h2><h3 id="Leader处理请求流程"><a href="#Leader处理请求流程" class="headerlink" title="Leader处理请求流程"></a>Leader处理请求流程</h3><h4 id="LeaderRequestProcessor"><a href="#LeaderRequestProcessor" class="headerlink" title="LeaderRequestProcessor"></a>LeaderRequestProcessor</h4><ul><li>如果是LocalSession，并且用户请求为创建临时节点（Session关闭时节点会删除），则升级Session到GlobalSession，并且创建一条createSession请求（upgradeRequest）。</li><li>如果createSession请求不为null，转发到PrepRequestProcessor。</li><li>转发用户请求到PrepRequestProcessor</li></ul><h4 id="PrepRequestProcessor"><a href="#PrepRequestProcessor" class="headerlink" title="PrepRequestProcessor"></a>PrepRequestProcessor</h4><p>PrepRequestProcessor设置Request的transcation信息，该Processor运行于独立的线程中。对于会改写zookeeper数据库的操作，该Processor会添加transcation信息，并且增加TxnHeader。对于读操作，则只检查session合法性。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">pRequest2Txn</span><span class="params">(<span class="keyword">int</span> type, <span class="keyword">long</span> zxid, Request request, Record record, <span class="keyword">boolean</span> deserialize)</span> <span class="keyword">throws</span> KeeperException, IOException, RequestProcessorException </span>{</span><br><span class="line">    <span class="keyword">if</span> (request.getHdr() == <span class="keyword">null</span>) {</span><br><span class="line">        request.setHdr(<span class="keyword">new</span> TxnHeader(request.sessionId, request.cxid, zxid,</span><br><span class="line">                Time.currentWallTime(), type));</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setTxnDigest</span><span class="params">(Request request, PrecalculatedDigest preCalculatedDigest)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (preCalculatedDigest == <span class="keyword">null</span>) {</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    request.setTxnDigest(<span class="keyword">new</span> TxnDigest(digestCalculator.getDigestVersion(), preCalculatedDigest.treeDigest));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="ProposalRequestProcessor"><a href="#ProposalRequestProcessor" class="headerlink" title="ProposalRequestProcessor"></a>ProposalRequestProcessor</h4><ul><li>ProposalRequestProcessor会先将请求派发给CommitProcessor</li><li>随后ProposalRequestProcessor检查哪些请求被添加了transcation信息，如果被添加了transcation信息，则会发送Proposal包给集群内所有节点。发送Proposal的时序图如下:</li></ul><img src="/2020/04/29/zk/zkSrc_processPacket/proposal_seq.png" class=""><ul><li>发送完Proposal之后，再将该请求发送到SyncRequestProcessor。</li></ul><h4 id="SyncRequestProcessor"><a href="#SyncRequestProcessor" class="headerlink" title="SyncRequestProcessor"></a>SyncRequestProcessor</h4><p>SyncRequestProcessor用于存储请求Transcation日志以及数据库的Snapshot日志到文件，存储的逻辑详见run函数：</p><ul><li>通过snapCount和snapSizeInBytes控制多少次请求或多大log生成一个新的Transcation日志文件和保存Snapshot文件。</li><li>为了防止不同的节点都在相同的时间点进行snap，每次生成新的随机数，随机打散每个zk节点的snap时间点</li><li>Transcation日志格式以及Snapshot文件格式详见数据库格式。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (zks.getZKDatabase().append(si)) {</span><br><span class="line">    <span class="keyword">if</span> (shouldSnapshot()) {</span><br><span class="line">        resetSnapshotStats();</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resetSnapshotStats</span><span class="params">()</span> </span>{</span><br><span class="line">    randRoll = ThreadLocalRandom.current().nextInt(snapCount / <span class="number">2</span>);</span><br><span class="line">    randSize = Math.abs(ThreadLocalRandom.current().nextLong() % (snapSizeInBytes / <span class="number">2</span>));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="AckRequestProcessor"><a href="#AckRequestProcessor" class="headerlink" title="AckRequestProcessor"></a>AckRequestProcessor</h4><p>在SyncRequestProcessor flush后，AckRequestProcessor仅仅是发送一个正在处理请求的ACK到Leader自己，用来模拟收到Leader节点的ACK。</p><h4 id="Leader-Proposal-ACK管理"><a href="#Leader-Proposal-ACK管理" class="headerlink" title="Leader Proposal ACK管理"></a>Leader Proposal ACK管理</h4><p>LearnerHandler在完成选举之后，会调用startSendingPackets来启动发送Packet的线程</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Start thread that blast packets in the queue to learner</span></span><br><span class="line">startSendingPackets();</span><br></pre></td></tr></tbody></table></figure><p>同时进入接收该节点返回数据的循环。 </p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) {</span><br><span class="line">    qp = <span class="keyword">new</span> QuorumPacket();</span><br><span class="line">    ia.readRecord(qp, <span class="string">"packet"</span>);</span><br></pre></td></tr></tbody></table></figure><p>在收到Proposal Packet的ACK后，LearnerHandler处理流程为：</p><img src="/2020/04/29/zk/zkSrc_processPacket/proposal_ack.png" class=""><ul><li>接收到节点所发的Proposal ACK数据，调用Leader.processAck</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> Leader.ACK:</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.learnerType == LearnerType.OBSERVER) {</span><br><span class="line">        LOG.debug(<span class="string">"Received ACK from Observer {}"</span>, <span class="keyword">this</span>.sid);</span><br><span class="line">    }</span><br><span class="line">    syncLimitCheck.updateAck(qp.getZxid());</span><br><span class="line">    learnerMaster.processAck(<span class="keyword">this</span>.sid, qp.getZxid(), sock.getLocalSocketAddress());</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></tbody></table></figure><ul><li>将ACK的节点id添加到Proposal数据中，调用tryToCommit,尝试Commit该Request。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Proposal p = outstandingProposals.get(zxid);</span><br><span class="line">...</span><br><span class="line">p.addAck(sid);</span><br><span class="line"><span class="keyword">boolean</span> hasCommitted = tryToCommit(p, zxid, followerAddr);</span><br></pre></td></tr></tbody></table></figure><ul><li>调用Proposal.hasAllQuorums检查ACK的节点是否超过集群数量一半(包括Leader本身)，若超过，则向所有Follower发送Commit。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">commit(zxid);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Create a commit packet and send it to all the members of the quorum</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> zxid</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">(<span class="keyword">long</span> zxid)</span> </span>{</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) {</span><br><span class="line">        lastCommitted = zxid;</span><br><span class="line">    }</span><br><span class="line">    QuorumPacket qp = <span class="keyword">new</span> QuorumPacket(Leader.COMMIT, zxid, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    sendPacket(qp);</span><br><span class="line">    ServerMetrics.getMetrics().COMMIT_COUNT.add(<span class="number">1</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>向所有Observer节点发送Inform。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inform(p);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Create an inform packet and send it to all observers.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inform</span><span class="params">(Proposal proposal)</span> </span>{</span><br><span class="line">    QuorumPacket qp = <span class="keyword">new</span> QuorumPacket(Leader.INFORM, proposal.request.zxid, proposal.packet.getData(), <span class="keyword">null</span>);</span><br><span class="line">    sendObserverPacket(qp);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>通知CommitProcessor该请求已Commit。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zk.commitProcessor.commit(p.request);</span><br></pre></td></tr></tbody></table></figure><h4 id="CommitProcessor"><a href="#CommitProcessor" class="headerlink" title="CommitProcessor"></a>CommitProcessor</h4><p>CommitProcessor用于管理Session需要Commit的请求，该Processor Leader和Follower节点共用，CommitProcessor有自己的运行线程。</p><ul><li>接收到Request后，若该Request需要Commit，或者该Session中存在pendingRequest,则将该Request添加到对应Session的pendingRequest中。否则，直接将Request发送给下一个Processor。该处理方法能保证同一个Session 处理Request的顺序，例如该Session先发送了一个修改数据库的操作，又发送一个读数据库的操作，读的操作肯定会在写操作之后。</li><li>CommitProcessor收到某个Request已经Commit之后，（如上，Leader将Commit发送给Follower之后，或者Follower接收到Leader发送的Commit），将Commit的请求转发给下一个Processor。Follower和Leader都有两种Commit的请求。<ul><li>Follower Commit请求类型<ul><li>自己节点上的Session发送的修改数据库的请求。此种情况下，该Session对应的pendingReqeust的第一个Request肯定是Commit请求；</li><li>或者是Leader发送的其他节点接收到的修改数据库的请求，此种情况无对应的pendingRequest，触发入口来自Follower.processPacket。</li></ul></li><li>Leader Commit请求类型<ul><li>自己节点上Session发送的修改数据库请求。</li><li>Follower节点转发的，但是处理流程和自己节点上接收到的一样，触发入口来自LearnerHander.run调用LeaderZooKeeperServer.submitLearnerRequest。</li></ul></li></ul></li><li>CommitProcessor将已经Commit的Request发送给下一个Processor，并且将该Session上pendingRequest随后的读请求转发给下一个Processor。</li></ul><h4 id="Leader-TobeAppliedRequestProcessor"><a href="#Leader-TobeAppliedRequestProcessor" class="headerlink" title="Leader.TobeAppliedRequestProcessor"></a>Leader.TobeAppliedRequestProcessor</h4><p>在Commit Request之前，Leader会记录已Commit但未修改到数据库的写操作Proposal，该记录用于Follower和Leader选举之后的同步数据。本Processor的作用就是在操作数据库之前清除保存的Proposal信息。</p><h4 id="FinalRequestProcessor"><a href="#FinalRequestProcessor" class="headerlink" title="FinalRequestProcessor"></a>FinalRequestProcessor</h4><p>FinalRequestProcessor是操作数据库来响应对应的读或写操作。</p><h3 id="Follower处理请求流程"><a href="#Follower处理请求流程" class="headerlink" title="Follower处理请求流程"></a>Follower处理请求流程</h3><p>CommitProcessor和FinalRequestProcessor前面已说明，所以此处只用介绍FollowerRequestProcessor。</p><h4 id="FollowerRequestProcessor"><a href="#FollowerRequestProcessor" class="headerlink" title="FollowerRequestProcessor"></a>FollowerRequestProcessor</h4><p>FollowerRequestProcessor运行于独立的线程中。主要工作如下:</p><ul><li>提交Request时，如果Request是local session，且创建了临时节点，则升级session到Global类型，并且插入一个createSession request。</li><li>将Request转发到CommitProcessor。</li><li>如果为写请求，转发到Leader。</li></ul>]]></content>
      
      
      <categories>
          
          <category> zookeeper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zookeeper源码-4.客户端连接管理</title>
      <link href="2020/04/29/zk/zkSrc_serverCnxn/"/>
      <url>2020/04/29/zk/zkSrc_serverCnxn/</url>
      
        <content type="html"><![CDATA[<p>默认使用NIO，可配置为Netty</p><img src="/2020/04/29/zk/zkSrc_serverCnxn/client_cnxn_class.png" class=""><p>configure在QuorumPeerMain中调用，入口在QuorumPeer.startServerCnxnFactory</p><p>Factory使用Set&lt;ServerCnxn&gt;保存所有ServerCnxn</p><p>NIO Factory 使用一个AcceptThread接受所有连接，按照round-robin分配到Collection&lt;SelectorThread&gt;，每个SelectorThread创建一个NIOServerCnxn，通过WorkerService调度执行<br>Netty Factory 为pipeline添加@Sharable的CnxnChannelHandler处理函数，每个新连接创建NettyServerCnxn处理，</p><hr><h2 id="Netty实现"><a href="#Netty实现" class="headerlink" title="Netty实现"></a>Netty实现</h2><h3 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h3><p>客户端的网络事件NettyServerCnxnFactory.CnxnChannelHandler</p><h3 id="建立连接"><a href="#建立连接" class="headerlink" title="建立连接"></a>建立连接</h3><p>有新客户端连接，调用NettyServerCnxnFactory.CnxnChannelHandler.channelActive，新建NettyServerCnxn实例并保存</p><h3 id="处理客户端数据"><a href="#处理客户端数据" class="headerlink" title="处理客户端数据"></a>处理客户端数据</h3><p>NettyServerCnxn使用原子变量throttled，表示是否处理用户发送的请求。例如若客户端的连接未建立完成，则不会处理客户端的请求</p><h4 id="接收客户端数据"><a href="#接收客户端数据" class="headerlink" title="接收客户端数据"></a>接收客户端数据</h4><p>当服务器接收到数据时，调用NettyServerCnxnFactory.CnxnChannelHandler.processMessage接口。处理流程为</p><img src="/2020/04/29/zk/zkSrc_serverCnxn/receive_data_flow.png" class=""><h4 id="处理数据流程"><a href="#处理数据流程" class="headerlink" title="处理数据流程"></a>处理数据流程</h4><p>处理数据接口为NettyServerCnxn.receiveMessage。有两个ByteBuffer用来保存客户端发送过来的数据。处理流程为</p><ul><li>bbLen用于保存数据长度，或者判断请求是否是Command。对于普通的请求，前4个字节(Integer型长度)是请求数据长度；而对于Command，使用The Four Letter Words形式，即命令占用4个字节，正好是一个Integer型长度。bbLen固定为4Byte缓冲区。</li><li>bb用户保存请求的数据，该缓冲区默认为null。<ul><li>!initialized， 调用ZooKeeperServer.processConnectRequest</li><li>initialized， 调用ZooKeeperServer.processPacket</li></ul></li></ul><img src="/2020/04/29/zk/zkSrc_serverCnxn/process_data_flow.png" class=""><h4 id="返回数据"><a href="#返回数据" class="headerlink" title="返回数据"></a>返回数据</h4><p>在ZooKeeperServer.processPacket中调用NettyServerCnxn.sendResponse返回结果给客户端。</p><h4 id="Watch通知"><a href="#Watch通知" class="headerlink" title="Watch通知"></a>Watch通知</h4><p>zookeeper client可以监听数据的生命周期以及数据变化，client监听数据时，FinalRequestProcessor会调用ZKdatabase.setWatches将ServerCnxn添加到监听列表。当有事件发生时，会调用ServerCnxn.process发送数据回client。</p>]]></content>
      
      
      <categories>
          
          <category> zookeeper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zookeeper源码-3.状态转换</title>
      <link href="2020/04/29/zk/zkSrc_state/"/>
      <url>2020/04/29/zk/zkSrc_state/</url>
      
        <content type="html"><![CDATA[<p>在选举完成后，进入FOLLOWING或LEADING状态。在其能对外提供服务之前，需要对各个服务器之间状态进行同步，使服务器的数据保持一致。</p><hr><h2 id="Leader同步"><a href="#Leader同步" class="headerlink" title="Leader同步"></a>Leader同步</h2><img src="/2020/04/29/zk/zkSrc_state/leader_sync.png" class=""><p>在创建Leader对象时，会创建Leader监听的socket，在LeanerCnxAcceptor中会accept该连接，并且创建LearnerHandler的实例，该实例会新建线程，并处理和该新建的连接通信。</p><hr><h2 id="Follower同步"><a href="#Follower同步" class="headerlink" title="Follower同步"></a>Follower同步</h2><img src="/2020/04/29/zk/zkSrc_state/follower_sync.png" class=""><hr><h2 id="tcp报文-FastLeaderElection-buildMsg"><a href="#tcp报文-FastLeaderElection-buildMsg" class="headerlink" title="tcp报文 FastLeaderElection::buildMsg"></a>tcp报文 FastLeaderElection::buildMsg</h2><p>length-&gt;ByteBuffer</p><p>ByteBuffer[state, leader, zxid, electionEpoch, epoch, version, configDataLength, configData]</p><hr><h2 id="lastMessageSent-异常重启时重发最后消息，重复消息可正确处理"><a href="#lastMessageSent-异常重启时重发最后消息，重复消息可正确处理" class="headerlink" title="lastMessageSent 异常重启时重发最后消息，重复消息可正确处理"></a>lastMessageSent 异常重启时重发最后消息，重复消息可正确处理</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">BlockingQueue&lt;ByteBuffer&gt; bq = queueSendMap.get(sid);</span><br><span class="line"><span class="keyword">if</span> (bq == <span class="keyword">null</span> || isSendQueueEmpty(bq)) {</span><br><span class="line">    ByteBuffer b = lastMessageSent.get(sid);</span><br><span class="line">    <span class="keyword">if</span> (b != <span class="keyword">null</span>) {</span><br><span class="line">        LOG.debug(<span class="string">"Attempting to send lastMessage to sid={}"</span>, sid);</span><br><span class="line">        send(b);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="状态同步"><a href="#状态同步" class="headerlink" title="状态同步"></a>状态同步</h2><img src="/2020/04/29/zk/zkSrc_state/sync_detail.png" class=""><blockquote><h3 id="FOLLOW-registerWithLeader-Leader-FOLLOWERINFO-状态同步流程"><a href="#FOLLOW-registerWithLeader-Leader-FOLLOWERINFO-状态同步流程" class="headerlink" title="FOLLOW registerWithLeader(Leader.FOLLOWERINFO) 状态同步流程"></a>FOLLOW registerWithLeader(Leader.FOLLOWERINFO) 状态同步流程</h3></blockquote><ul><li>Follower节点在建立到Leader的连接后，立即发送<strong>FollowerInfo</strong>,数据中包括自身节点类型，zxid，协议号(0x10000)，以及节点ID(sid)。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">long</span> <span class="title">registerWithLeader</span><span class="params">(<span class="keyword">int</span> pktType)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Send follower info, including last zxid and sid</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">long</span> lastLoggedZxid = self.getLastLoggedZxid();</span><br><span class="line">    QuorumPacket qp = <span class="keyword">new</span> QuorumPacket();</span><br><span class="line">    qp.setType(pktType); <span class="comment">// FOLLOWERINFO 或 OBSERVERINFO</span></span><br><span class="line">    qp.setZxid(ZxidUtils.makeZxid(self.getAcceptedEpoch(), <span class="number">0</span>));</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Add sid to payload</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">// 协议固定0x10000</span></span><br><span class="line">    LearnerInfo li = <span class="keyword">new</span> LearnerInfo(self.getId(), <span class="number">0x10000</span>, self.getQuorumVerifier().getVersion());</span><br><span class="line">    ByteArrayOutputStream bsid = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">    BinaryOutputArchive boa = BinaryOutputArchive.getArchive(bsid);</span><br><span class="line">    boa.writeRecord(li, <span class="string">"LearnerInfo"</span>);</span><br><span class="line">    qp.setData(bsid.toByteArray());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送FollowerInfo 或 OBSERVERINFO</span></span><br><span class="line">    writePacket(qp, <span class="keyword">true</span>);</span><br></pre></td></tr></tbody></table></figure><ul><li>Leader回复<strong>LeaderInfo</strong>信息，信息包括zxid,以及版本号</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span>[] ver = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4</span>];</span><br><span class="line">ByteBuffer.wrap(ver).putInt(<span class="number">0x10000</span>);</span><br><span class="line">QuorumPacket newEpochPacket = <span class="keyword">new</span> QuorumPacket(Leader.LEADERINFO, newLeaderZxid, ver, <span class="keyword">null</span>);</span><br><span class="line">oa.writeRecord(newEpochPacket, <span class="string">"packet"</span>);</span><br><span class="line">messageTracker.trackSent(Leader.LEADERINFO);</span><br><span class="line">bufferedOutput.flush();</span><br></pre></td></tr></tbody></table></figure><ul><li>Follower回复<strong>ACKEPOCH</strong>,信息包括lastLoggedZxid，epoch信息。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">readPacket(qp);</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">long</span> newEpoch = ZxidUtils.getEpochFromZxid(qp.getZxid());</span><br><span class="line"><span class="keyword">if</span> (qp.getType() == Leader.LEADERINFO) {</span><br><span class="line">    <span class="comment">// we are connected to a 1.0 server so accept the new epoch and read the next packet</span></span><br><span class="line">    leaderProtocolVersion = ByteBuffer.wrap(qp.getData()).getInt(); <span class="comment">// 0x10000</span></span><br><span class="line">    <span class="keyword">byte</span>[] epochBytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">final</span> ByteBuffer wrappedEpochBytes = ByteBuffer.wrap(epochBytes);</span><br><span class="line">    <span class="keyword">if</span> (newEpoch &gt; self.getAcceptedEpoch()) {</span><br><span class="line">        wrappedEpochBytes.putInt((<span class="keyword">int</span>) self.getCurrentEpoch());</span><br><span class="line">        self.setAcceptedEpoch(newEpoch);</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (newEpoch == self.getAcceptedEpoch()) {</span><br><span class="line">        <span class="comment">// since we have already acked an epoch equal to the leaders, we cannot ack</span></span><br><span class="line">        <span class="comment">// again, but we still need to send our lastZxid to the leader so that we can</span></span><br><span class="line">        <span class="comment">// sync with it if it does assume leadership of the epoch.</span></span><br><span class="line">        <span class="comment">// the -1 indicates that this reply should not count as an ack for the new epoch</span></span><br><span class="line">        wrappedEpochBytes.putInt(-<span class="number">1</span>);</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Leaders epoch, "</span></span><br><span class="line">                              + newEpoch</span><br><span class="line">                              + <span class="string">" is less than accepted epoch, "</span></span><br><span class="line">                              + self.getAcceptedEpoch());</span><br><span class="line">    }</span><br><span class="line">    QuorumPacket ackNewEpoch = <span class="keyword">new</span> QuorumPacket(Leader.ACKEPOCH, lastLoggedZxid, epochBytes, <span class="keyword">null</span>);</span><br><span class="line">    writePacket(ackNewEpoch, <span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">return</span> ZxidUtils.makeZxid(newEpoch, <span class="number">0</span>);</span><br></pre></td></tr></tbody></table></figure><ul><li>Leader等待超过半数节点回复的<strong>ACKEPOCH</strong></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">QuorumPacket ackEpochPacket = <span class="keyword">new</span> QuorumPacket();</span><br><span class="line">ia.readRecord(ackEpochPacket, <span class="string">"packet"</span>);</span><br><span class="line">messageTracker.trackReceived(ackEpochPacket.getType());</span><br><span class="line"><span class="keyword">if</span> (ackEpochPacket.getType() != Leader.ACKEPOCH) {</span><br><span class="line">    LOG.error(<span class="string">"{} is not ACKEPOCH"</span>, ackEpochPacket.toString());</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line">ByteBuffer bbepoch = ByteBuffer.wrap(ackEpochPacket.getData());</span><br><span class="line">ss = <span class="keyword">new</span> StateSummary(bbepoch.getInt(), ackEpochPacket.getZxid());</span><br><span class="line">learnerMaster.waitForEpochAck(<span class="keyword">this</span>.getSid(), ss);</span><br></pre></td></tr></tbody></table></figure><blockquote><h3 id="FOLLOW-syncWithLeader-newEpochZxid-状态同步流程"><a href="#FOLLOW-syncWithLeader-newEpochZxid-状态同步流程" class="headerlink" title="FOLLOW syncWithLeader(newEpochZxid) 状态同步流程"></a>FOLLOW syncWithLeader(newEpochZxid) 状态同步流程</h3></blockquote><ul><li>Leader会根据Follower发送的zxid信息，判断采用何种方式和Follower同步数据，并将同步数据的Request添加到队列。注意，此时消息并未发送，只是添加到队列。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">peerLastZxid = ss.getLastZxid();</span><br><span class="line"><span class="comment">// Take any necessary action if we need to send TRUNC or DIFF</span></span><br><span class="line"><span class="comment">// startForwarding() will be called in all cases</span></span><br><span class="line"><span class="keyword">boolean</span> needSnap = syncFollower(peerLastZxid, learnerMaster);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (db.getCommittedLog().isEmpty()) {</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * It is possible that committedLog is empty. In that case</span></span><br><span class="line"><span class="comment">     * setting these value to the latest txn in learnerMaster db</span></span><br><span class="line"><span class="comment">     * will reduce the case that we need to handle</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Here is how each case handle by the if block below</span></span><br><span class="line"><span class="comment">     * 1. lastProcessZxid == peerZxid -&gt; Handle by (2)</span></span><br><span class="line"><span class="comment">     * 2. lastProcessZxid &lt; peerZxid -&gt; Handle by (3)</span></span><br><span class="line"><span class="comment">     * 3. lastProcessZxid &gt; peerZxid -&gt; Handle by (5)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    minCommittedLog = lastProcessedZxid;</span><br><span class="line">    maxCommittedLog = lastProcessedZxid;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Here are the cases that we want to handle</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1. Force sending snapshot (for testing purpose)</span></span><br><span class="line"><span class="comment"> * 2. Peer and learnerMaster is already sync, send empty diff</span></span><br><span class="line"><span class="comment"> * 3. Follower has txn that we haven't seen. This may be old leader</span></span><br><span class="line"><span class="comment"> *    so we need to send TRUNC. However, if peer has newEpochZxid,</span></span><br><span class="line"><span class="comment"> *    we cannot send TRUNC since the follower has no txnlog</span></span><br><span class="line"><span class="comment"> * 4. Follower is within committedLog range or already in-sync.</span></span><br><span class="line"><span class="comment"> *    We may need to send DIFF or TRUNC depending on follower's zxid</span></span><br><span class="line"><span class="comment"> *    We always send empty DIFF if follower is already in-sync</span></span><br><span class="line"><span class="comment"> * 5. Follower missed the committedLog. We will try to use on-disk</span></span><br><span class="line"><span class="comment"> *    txnlog + committedLog to sync with follower. If that fail,</span></span><br><span class="line"><span class="comment"> *    we will send snapshot</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">needSnap = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (forceSnapSync) {</span><br><span class="line">    <span class="comment">// for testing purpose</span></span><br><span class="line">} <span class="keyword">else</span> <span class="keyword">if</span> (lastProcessedZxid == peerLastZxid) {</span><br><span class="line">    <span class="comment">// 若Follower的事务id和Leader一样，则发送Leader.DIFF，表示不需要同步数据</span></span><br><span class="line">    queueOpPacket(Leader.DIFF, peerLastZxid);</span><br><span class="line">    needSnap = <span class="keyword">false</span>;</span><br><span class="line">} <span class="keyword">else</span> <span class="keyword">if</span> (peerLastZxid &gt; maxCommittedLog &amp;&amp; !isPeerNewEpochZxid) {</span><br><span class="line">    <span class="comment">// 若Follower的事务id &gt; Leader事务id，则发送Leader.TRUNC，截断Follower的数据，使其和Leader保持一致</span></span><br><span class="line">    queueOpPacket(Leader.TRUNC, maxCommittedLog);</span><br><span class="line">    needSnap = <span class="keyword">false</span>;</span><br><span class="line">} <span class="keyword">else</span> <span class="keyword">if</span> ((maxCommittedLog &gt;= peerLastZxid) &amp;&amp; (minCommittedLog &lt;= peerLastZxid)) {</span><br><span class="line">    <span class="comment">// 若minCommittedLog &lt;= Follower事务id &lt;= maxCommittedLog, 则从ZKDatabase缓存中获取请求，将需要同步的每条请求先发送一条Proposal，再发送一条Commit。</span></span><br><span class="line">    LOG.info(<span class="string">"Using committedLog for peer sid: {}"</span>, getSid());</span><br><span class="line">    Iterator&lt;Proposal&gt; itr = db.getCommittedLog().iterator();</span><br><span class="line">    currentZxid = queueCommittedProposals(itr, peerLastZxid, <span class="keyword">null</span>, maxCommittedLog);</span><br><span class="line">    needSnap = <span class="keyword">false</span>;</span><br><span class="line">} <span class="keyword">else</span> <span class="keyword">if</span> (peerLastZxid &lt; minCommittedLog &amp;&amp; txnLogSyncEnabled) {</span><br><span class="line">    <span class="comment">// 若Follower事务id &lt; minCommittedLog, 则会从事务日志和ZKDatabase缓存中获取请求同步到Follower，每条请求也是先发送一条Proposal，再发送一条Commit。</span></span><br><span class="line">    <span class="comment">// Use txnlog and committedLog to sync</span></span><br><span class="line">    <span class="comment">// Calculate sizeLimit that we allow to retrieve txnlog from disk</span></span><br><span class="line">    <span class="keyword">long</span> sizeLimit = db.calculateTxnLogSizeLimit();</span><br><span class="line">    <span class="comment">// This method can return empty iterator if the requested zxid</span></span><br><span class="line">    <span class="comment">// is older than on-disk txnlog</span></span><br><span class="line">    Iterator&lt;Proposal&gt; txnLogItr = db.getProposalsFromTxnLog(peerLastZxid, sizeLimit);</span><br><span class="line">    <span class="keyword">if</span> (txnLogItr.hasNext()) { <span class="comment">// 非空</span></span><br><span class="line">        LOG.info(<span class="string">"Use txnlog and committedLog for peer sid: {}"</span>, getSid());</span><br><span class="line">        <span class="comment">// 从 disk事务日志 同步</span></span><br><span class="line">        currentZxid = queueCommittedProposals(txnLogItr, peerLastZxid, minCommittedLog, maxCommittedLog);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (currentZxid &lt; minCommittedLog) {</span><br><span class="line">            LOG.info(</span><br><span class="line">                <span class="string">"Detected gap between end of txnlog: 0x{} and start of committedLog: 0x{}"</span>,</span><br><span class="line">                Long.toHexString(currentZxid),</span><br><span class="line">                Long.toHexString(minCommittedLog));</span><br><span class="line">            currentZxid = peerLastZxid;</span><br><span class="line">            <span class="comment">// 退回为snap</span></span><br><span class="line">            queuedPackets.clear();</span><br><span class="line">            needOpPacket = <span class="keyword">true</span>;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            LOG.debug(<span class="string">"Queueing committedLog 0x{}"</span>, Long.toHexString(currentZxid));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 从 ZKDatabase缓存 同步</span></span><br><span class="line">            Iterator&lt;Proposal&gt; committedLogItr = db.getCommittedLog().iterator();</span><br><span class="line">            currentZxid = queueCommittedProposals(committedLogItr, currentZxid, <span class="keyword">null</span>, maxCommittedLog);</span><br><span class="line">            needSnap = <span class="keyword">false</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// closing the resources</span></span><br><span class="line">    <span class="keyword">if</span> (txnLogItr <span class="keyword">instanceof</span> TxnLogProposalIterator) {</span><br><span class="line">        TxnLogProposalIterator txnProposalItr = (TxnLogProposalIterator) txnLogItr;</span><br><span class="line">        txnProposalItr.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>如果最后需要snap，发送<strong>snap</strong></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (needSnap) {</span><br><span class="line">    syncThrottler = learnerMaster.getLearnerSnapSyncThrottler();</span><br><span class="line">    syncThrottler.beginSync(exemptFromThrottle);</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        <span class="keyword">long</span> zxidToSend = learnerMaster.getZKDatabase().getDataTreeLastProcessedZxid();</span><br><span class="line">        oa.writeRecord(<span class="keyword">new</span> QuorumPacket(Leader.SNAP, zxidToSend, <span class="keyword">null</span>, <span class="keyword">null</span>), <span class="string">"packet"</span>);</span><br><span class="line">        messageTracker.trackSent(Leader.SNAP);</span><br><span class="line">        bufferedOutput.flush();</span><br><span class="line">        LOG.info(</span><br><span class="line">            <span class="string">"Sending snapshot last zxid of peer is 0x{}, zxid of leader is 0x{}, "</span></span><br><span class="line">                + <span class="string">"send zxid of db as 0x{}, {} concurrent snapshot sync, "</span></span><br><span class="line">                + <span class="string">"snapshot sync was {} from throttle"</span>,</span><br><span class="line">            Long.toHexString(peerLastZxid),</span><br><span class="line">            Long.toHexString(leaderLastZxid),</span><br><span class="line">            Long.toHexString(zxidToSend),</span><br><span class="line">            syncThrottler.getSyncInProgress(),</span><br><span class="line">            exemptFromThrottle ? <span class="string">"exempt"</span> : <span class="string">"not exempt"</span>);</span><br><span class="line">        <span class="comment">// Dump data to peer</span></span><br><span class="line">        learnerMaster.getZKDatabase().serializeSnapshot(oa);</span><br><span class="line">        oa.writeString(<span class="string">"BenWasHere"</span>, <span class="string">"signature"</span>);</span><br><span class="line">        bufferedOutput.flush();</span><br><span class="line">    } <span class="keyword">finally</span> {</span><br><span class="line">        ServerMetrics.getMetrics().SNAP_COUNT.add(<span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">    syncThrottler = learnerMaster.getLearnerDiffSyncThrottler();</span><br><span class="line">    syncThrottler.beginSync(exemptFromThrottle);</span><br><span class="line">    ServerMetrics.getMetrics().DIFF_COUNT.add(<span class="number">1</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>将<strong>NEWLEADER</strong>添加到队列。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">QuorumPacket newLeaderQP = <span class="keyword">new</span> QuorumPacket(Leader.NEWLEADER, newLeaderZxid, learnerMaster.getQuorumVerifierBytes(), <span class="keyword">null</span>);</span><br><span class="line">queuedPackets.add(newLeaderQP);</span><br><span class="line">bufferedOutput.flush();</span><br></pre></td></tr></tbody></table></figure><ul><li>发送队列的消息，因为同步数据的队列在前，<strong>NEWLEADER</strong>在后，所以会先和Follower同步数据，再发送<strong>NEWLEADER</strong>。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Start thread that blast packets in the queue to learner</span></span><br><span class="line">startSendingPackets();</span><br></pre></td></tr></tbody></table></figure><ul><li>Follower收到<strong>NEWLEADER</strong>后回复<strong>ACK</strong>。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> Leader.NEWLEADER:</span><br><span class="line">    writePacket(<span class="keyword">new</span> QuorumPacket(Leader.ACK, newLeaderZxid, <span class="keyword">null</span>, <span class="keyword">null</span>), <span class="keyword">true</span>);</span><br></pre></td></tr></tbody></table></figure><ul><li>Leader 等待大部分节点回复<strong>ACK</strong></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Have to wait for the first ACK, wait until</span></span><br><span class="line"><span class="comment"> * the learnerMaster is ready, and only then we can</span></span><br><span class="line"><span class="comment"> * start processing messages.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">qp = <span class="keyword">new</span> QuorumPacket();</span><br><span class="line">ia.readRecord(qp, <span class="string">"packet"</span>);</span><br><span class="line">messageTracker.trackReceived(qp.getType());</span><br><span class="line"><span class="keyword">if</span> (qp.getType() != Leader.ACK) {</span><br><span class="line">    LOG.error(<span class="string">"Next packet was supposed to be an ACK, but received packet: {}"</span>, packetToString(qp));</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">LOG.debug(<span class="string">"Received NEWLEADER-ACK message from {}"</span>, sid);</span><br><span class="line"></span><br><span class="line">learnerMaster.waitForNewLeaderAck(getSid(), qp.getZxid());</span><br></pre></td></tr></tbody></table></figure><ul><li>Leader发送<strong>UPTODATE</strong></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">queuedPackets.add(<span class="keyword">new</span> QuorumPacket(Leader.UPTODATE, -<span class="number">1</span>, <span class="keyword">null</span>, <span class="keyword">null</span>));</span><br></pre></td></tr></tbody></table></figure><ul><li>FOLLOW接收<strong>UPTODATE</strong></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> Leader.UPTODATE:</span><br><span class="line">    self.setZooKeeperServer(zk);</span><br><span class="line">    self.adminServer.setZooKeeperServer(zk);</span><br><span class="line">    <span class="keyword">break</span> outerLoop;</span><br></pre></td></tr></tbody></table></figure><p>在上述步骤完成后，集群状态已经稳定，可以对外提供服务。<br>心跳检测逻辑</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">// We ping twice a tick, so we only update the tick every other</span></span><br><span class="line">    <span class="comment">// iteration</span></span><br><span class="line">    <span class="keyword">boolean</span> tickSkip = <span class="keyword">true</span>;</span><br><span class="line">    <span class="comment">// If not null then shutdown this leader</span></span><br><span class="line">    String shutdownMessage = <span class="keyword">null</span>;  </span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) {</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) {</span><br><span class="line">            <span class="keyword">long</span> start = Time.currentElapsedTime();</span><br><span class="line">            <span class="keyword">long</span> cur = start;</span><br><span class="line">            <span class="keyword">long</span> end = start + self.tickTime / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">while</span> (cur &lt; end) {</span><br><span class="line">                wait(end - cur);</span><br><span class="line">                cur = Time.currentElapsedTime();</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (!tickSkip) {</span><br><span class="line">                self.tick.incrementAndGet();</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 使用SyncedLearnerTracker来确认自己是否维持着quorum</span></span><br><span class="line">            SyncedLearnerTracker syncedAckSet = <span class="keyword">new</span> SyncedLearnerTracker();</span><br><span class="line">            syncedAckSet.addQuorumVerifier(self.getQuorumVerifier());</span><br><span class="line">            <span class="keyword">if</span> (self.getLastSeenQuorumVerifier() != <span class="keyword">null</span></span><br><span class="line">                &amp;&amp; self.getLastSeenQuorumVerifier().getVersion() &gt; self.getQuorumVerifier().getVersion()) {</span><br><span class="line">                syncedAckSet.addQuorumVerifier(self.getLastSeenQuorumVerifier());</span><br><span class="line">            }</span><br><span class="line">            syncedAckSet.addAck(self.getId());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 检测每个追随者</span></span><br><span class="line">            <span class="keyword">for</span> (LearnerHandler f : getLearners()) {</span><br><span class="line">                <span class="comment">// current tick &lt;= tick+syncLimit</span></span><br><span class="line">                <span class="keyword">if</span> (f.synced()) {</span><br><span class="line">                    syncedAckSet.addAck(f.getSid());</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// check leader running status</span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">this</span>.isRunning()) {</span><br><span class="line">                <span class="comment">// set shutdown flag</span></span><br><span class="line">                shutdownMessage = <span class="string">"Unexpected internal error"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (!tickSkip &amp;&amp; !syncedAckSet.hasAllQuorums()) {</span><br><span class="line">                <span class="comment">// quorum没过半数，退出leader</span></span><br><span class="line">                shutdownMessage = <span class="string">"Not sufficient followers synced, only synced with sids: [ "</span></span><br><span class="line">                                  + syncedAckSet.ackSetsToString()</span><br><span class="line">                                  + <span class="string">" ]"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">            tickSkip = !tickSkip;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1个tick time内ping两次</span></span><br><span class="line">        <span class="keyword">for</span> (LearnerHandler f : getLearners()) {</span><br><span class="line">            f.ping();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">``` java</span><br><span class="line">    <span class="keyword">switch</span> (qp.getType()) {</span><br><span class="line">    <span class="keyword">case</span> Leader.PING:</span><br><span class="line">        ping(qp);</span><br><span class="line">        <span class="keyword">break</span>;</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> zookeeper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zookeeper源码-2.启动和选举</title>
      <link href="2020/04/29/zk/zkSrc_election/"/>
      <url>2020/04/29/zk/zkSrc_election/</url>
      
        <content type="html"><![CDATA[<h2 id="启动流程"><a href="#启动流程" class="headerlink" title="启动流程"></a>启动流程</h2><ol><li>QuorumPeerMain读取config</li><li>调用QuorumPeer.start()</li><li>1 loadDataBase() 载入当前节点的数据库</li><li>2 startServerCnxnFactory() 启动客户端连接监听</li><li>3 startLeaderElection() 开始选举</li><li>4 调用run() 获取选举结果并执行响应</li></ol><h2 id="载入数据库"><a href="#载入数据库" class="headerlink" title="载入数据库"></a>载入数据库</h2><h2 id="启动客户端连接监听"><a href="#启动客户端连接监听" class="headerlink" title="启动客户端连接监听"></a>启动客户端连接监听</h2><p>监听分为两种模式，默认使用ServerCnxnFactory的NioServerCnxnFactory</p><ul><li>ServerCnxnFactory cnxnFactory<ul><li>NioServerCnxnFactory</li><li>NettyServerCnxnFactory</li></ul></li><li>ServerCnxnFactory secureCnxnFactory</li></ul><h2 id="选举"><a href="#选举" class="headerlink" title="选举"></a>选举</h2><p>节点启动时，节点状态初始化为ServerState.LOOKING，此时ZK会获取当前的Leader或者会发起一个选举。</p><img src="/2020/04/29/zk/zkSrc_election/peer_state.png" class=""><p>ZooKeeper实现了四种选举模式，默认选用FastLeaderElection</p><ol><li>LeaderElection</li><li>AuthFastLeaderElection with authenticate disabled</li><li>AuthFastLeaderElection with authenticate enabled</li><li>FastLeaderElection</li></ol><img src="/2020/04/29/zk/zkSrc_election/election_class.png" class=""><h3 id="相关类"><a href="#相关类" class="headerlink" title="相关类"></a>相关类</h3><p>QuorumVerifier用于检查一个服务器列表能否构成一个可用的服务器集群。实现类有</p><ul><li>QuorumMaj 简单过半投票，默认策略</li><li>QuorumHierarchical 基于权重投票策略</li></ul><p>QuorumMaj 主要接口如下:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Map&lt;Long, QuorumServer&gt; allMembers = <span class="keyword">new</span> HashMap&lt;Long, QuorumServer&gt;();</span><br><span class="line"><span class="keyword">private</span> Map&lt;Long, QuorumServer&gt; votingMembers = <span class="keyword">new</span> HashMap&lt;Long, QuorumServer&gt;();</span><br><span class="line"><span class="keyword">private</span> Map&lt;Long, QuorumServer&gt; observingMembers = <span class="keyword">new</span> HashMap&lt;Long, QuorumServer&gt;();</span><br></pre></td></tr></tbody></table></figure><ul><li>containsQuorum 选举的结果是否超过集群半数节点。</li><li>getAllMembers 获取集群中所有的节点。</li><li>getVotingMembers 获取集群中参与选举的节点。</li><li>getObservingMembers 获取集群中Observer节点。</li></ul><p>SyncedLearnerTracker用于FastLeaderElection中，保存集群和选举的映射关系。主要接口如下:</p><ul><li>addQuorumVerifier 添加集群信息</li><li>addAck 添加选举响应</li><li>hasAllQuorums 调用QuorumVerifier.containsQuorum()判断集群中参与选举的节点是否超过集群半数节点。</li></ul><p>节点中维护了两个QuorumVerifier的实例，分别是QuorumPeer类中的如下两个:</p><ul><li>quorumVerifier 最后Commit的节点的Verifier</li><li>lastSeenQuorumVerifier 最后Proposed节点的Verifier</li></ul><h3 id="FastLeaderElection实现"><a href="#FastLeaderElection实现" class="headerlink" title="FastLeaderElection实现"></a>FastLeaderElection实现</h3><img src="/2020/04/29/zk/zkSrc_election/fast_election_class.png" class=""><p>Election为选举基类，lookForLeader()会循环阻塞在LOOKING状态，一直到成功获取Leader节点。</p><ol><li>节点首先更新Proposed为自己，广播通知，并循环获取<code>recvqueue</code>队列通知</li><li>超时，重新广播通知</li><li>忽略不在自己members中的通知和OBSERVING的通知</li><li>收到LOOKING的通知</li><li>1 选举轮次超过自己，使用<code>选举策略</code>判断若超过<strong>自身</strong>信息，更新Proposed和轮次，清空<code>本轮票数</code>，广播通知</li><li>2 选举轮次落后自己，忽略</li><li>3 相同选举轮次，使用<code>选举策略</code>判断若超过<strong>当前Proposed</strong>信息，Proposed更新为新接受的选举信息，广播通知</li><li>4 如果<code>本轮票数</code>过半，且使用<code>选举策略</code>判断<code>recvqueue</code>中没有剩余超过<strong>当前Proposed</strong>信息的通知，设置LEADER信息(可能为自己)，退出选举；否则返回1</li><li>收到FOLLOWING和LEADING的通知</li><li>1 相同选举轮次，如果<code>本轮票数</code>过半，且收到过该Leader的通知(防止有节点选举已crash的非自身节点为Leader)，设置LEADER信息(可能为自己)，退出选举</li><li>2 非相同选举轮次，如果<code>非本轮票数</code>过半，且收到过该Leader的通知，设置LEADER信息，退出选举</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 选举策略</span></span><br><span class="line"><span class="comment"> * We return true if one of the following three cases hold:</span></span><br><span class="line"><span class="comment"> * 1- New epoch is higher</span></span><br><span class="line"><span class="comment"> * 2- New epoch is the same as current epoch, but new zxid is higher</span></span><br><span class="line"><span class="comment"> * 3- New epoch is the same as current epoch, new zxid is the same</span></span><br><span class="line"><span class="comment"> *  as current zxid, but server id is higher.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">return</span> ((newEpoch &gt; curEpoch)</span><br><span class="line">        || ((newEpoch == curEpoch)</span><br><span class="line">            &amp;&amp; ((newZxid &gt; curZxid)</span><br><span class="line">                || ((newZxid == curZxid)</span><br><span class="line">                    &amp;&amp; (newId &gt; curId)))));  </span><br></pre></td></tr></tbody></table></figure><p>QuorumCnxManager负责选举中的连接管理，该类包含三个inner class。</p><ul><li>Listener 负责监接收新连接，并且管理连接，在单独的线程运行。</li><li>SendWorker 负责发送数据到其他节点，所发送的数据由FastLeaderElection提供，在单独的线程运行。</li><li>RecvWorker 负责从其他节点接收数据，并且将数据发送给FastLeaderElection，在单独的线程运行。</li></ul><p>FastLeaderElection负责选举的算法处理，该类包含如下主要inner class。</p><ul><li>Messenger 发送和接收数据的管理类。注意，此处的发送和接收数据更关注的是打包和解包相关的逻辑，而不和网络相关，网络相关的部分由QuorumCnxManager负责。</li><li>WorkerSender 负责打包选举数据，发送到其他节点，在单独的线程运行。</li><li>WorkerReceiver 负责解析接收到数据，并根据结果反馈对应的ACK，在单独的线程运行。</li></ul><blockquote><p>WorkerSender和WorkerReceiver为守护线程</p></blockquote><p><strong>选举启动流程:</strong>  </p><img src="/2020/04/29/zk/zkSrc_election/fast_election_flow.png" class=""><p>FastLeader启动后：  </p><ul><li>创建QuorumCnxManager实例，并且开始监听其他节点新建的连接。</li><li>创建FastLeaderElection实例，并且开启发送和接收数据的线程。(Messenger类会启动WorkerSender和WorkReceiver的线程)</li></ul><p><strong>触发选举:</strong></p><p>新启动节点的状态为LOOKING，在节点主线程启动后(QuorumPeer.run)，调用Election的lookForLeader方法获取Leader信息。</p><p>发送数据到其他节点的数据流向：</p><img src="/2020/04/29/zk/zkSrc_election/send_flow.png" class=""><p>详细时序图：</p><img src="/2020/04/29/zk/zkSrc_election/send_seq.png" class=""><p>当FastLeaderElection要发送数据时，会通过向sendqueue发送数据来异步调用 WorkerSender.process。<br>在QuorumCnxManager.toSend的实现中，若到发送目标节点的连接不存在，则会主动建立连接。<br>QuorumCnxManager调用connectOne通过将数据添加到发送列表来异步调用SendWorker.send。</p><p>在发送端建立连接时，首先会发送一个头信息，包括：</p><ul><li>版本信息</li><li>前节点的server id</li><li>ip地址信息</li></ul><p>详细信息详见QuorumCnxManager.initiateConnection</p><p>接收方收到连接的时序图：</p><img src="/2020/04/29/zk/zkSrc_election/listen_seq.png" class=""><p>在接收端收到新连接时，首先会解析发送方发送的头信息。为了保证两个节点之间只有一个连接（即不会出现A建立连接到B，同时B也建立连接到A），zk会检查建立连接的节点的id。若发起连接的节点id小于当前节点，zk会断开这连接，并且主动建立一个到对方节点的连接。</p><p>接收数据的流向为:</p><img src="/2020/04/29/zk/zkSrc_election/recv_flow.png" class=""><p>详细时序图：</p><img src="/2020/04/29/zk/zkSrc_election/recv_seq.png" class=""><p>RecvWorker在收到数据后，调用addToRecvQueue将数据添加到队列，WorkerReceiver从队列取数据处理。WorkerReceiver处理逻辑如下:</p><ul><li>检查对方节点是否参与选举，不参与选举的话直接返回当前节点的结果。</li><li>若当前节点也在LOOKING状态，则将对方节点选举的结果添加到接收队列。若对方节点处于LOOKING状态，且electionEpoch落后于当前节点logicalclock，则发送当前节点的proposed选举信息到对方节点。</li><li>若当前节点处于选举成功状态(不是LOOKING状态)，则发送当前节点的选举结果到对方节点。</li></ul><h2 id="zxid以及ElectionEpoch"><a href="#zxid以及ElectionEpoch" class="headerlink" title="zxid以及ElectionEpoch"></a>zxid以及ElectionEpoch</h2><h3 id="zxid"><a href="#zxid" class="headerlink" title="zxid"></a>zxid</h3><p>选举中会使用到数据库中最新的事务id(ZKDatabase.getDataTreeLastProcessedZxid()), 事务id由两部分组成，高32位表示Epoch，每次有新的节点当选会+1(Leader.lead())；后32位为事务id，有新的节点当选，该部分会从0重新开始。当数据库有写操作时，整个事务id会+1（参考ZooKeeperServer.getNextZxid()的引用）</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZxidUtils</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">getEpochFromZxid</span><span class="params">(<span class="keyword">long</span> zxid)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> zxid &gt;&gt; <span class="number">32L</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">getCounterFromZxid</span><span class="params">(<span class="keyword">long</span> zxid)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> zxid &amp; <span class="number">0xffffffffL</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">makeZxid</span><span class="params">(<span class="keyword">long</span> epoch, <span class="keyword">long</span> counter)</span> </span>{</span><br><span class="line">        <span class="comment">// 前32位表示Epoch，后32位表示当前Epoch的事务号，新Leader节点lead()函数epoch+1，count从0开始</span></span><br><span class="line">        <span class="keyword">return</span> (epoch &lt;&lt; <span class="number">32L</span>) | (counter &amp; <span class="number">0xffffffffL</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">zxidToString</span><span class="params">(<span class="keyword">long</span> zxid)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> Long.toHexString(zxid);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="ElectionEpoch"><a href="#ElectionEpoch" class="headerlink" title="ElectionEpoch"></a>ElectionEpoch</h3><p>当前节点的ElectionEpoch定义于FastLeaderElection.logicalclock中，每发起一次新选举，该值会自+1。若其他节点选举信息中的ElectionEpoch大于当前节点，则会设置当前节点的值为接收到的值。</p><hr><h2 id="ZOOKEEPER-1732"><a href="#ZOOKEEPER-1732" class="headerlink" title="ZOOKEEPER-1732"></a>ZOOKEEPER-1732</h2><p>QuorumPeer.updateElectionVote<br>Vote.equals</p>]]></content>
      
      
      <categories>
          
          <category> zookeeper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zookeeper源码-1.架构</title>
      <link href="2020/04/29/zk/zkSrc_arch/"/>
      <url>2020/04/29/zk/zkSrc_arch/</url>
      
        <content type="html"><![CDATA[<h2 id="节点架构"><a href="#节点架构" class="headerlink" title="节点架构"></a>节点架构</h2><img src="/2020/04/29/zk/zkSrc_arch/%E8%8A%82%E7%82%B9%E6%9E%B6%E6%9E%84.png" class=""><ol><li>QuorumPeerMain<br>服务器启动main入口，创建DatadirCleanupManager，按照config启动QuorumPeer  </li><li>QuorumPeer<br>节点类，根据节点类型管理和启动对应服务，管理选举算法及客户端连接。</li><li>Election<br>QuorumPeer根据配置选取合适的选举算法。</li><li>ServerCnxnFactory<br>管理客户端连接，QuorumPeer根据配置选取合适的实现。</li><li>ZooKeeperServer<br>zk服务器节点，根据不同类型实现不同方法。</li><li>ZKDatabase<br>zk内存数据库，详细数据保存在DataTree类中。</li><li>RequestProcessor<br>客户端请求处理类，不同zk节点类型会定义不同的处理类。</li></ol><hr><h2 id="节点类型"><a href="#节点类型" class="headerlink" title="节点类型"></a>节点类型</h2><ul><li>Leader</li><li>Follower</li><li>Observer</li></ul><p>Leader和Follower参与新Leader的选举，Observer不参与选举。  </p><img src="/2020/04/29/zk/zkSrc_arch/%E8%8A%82%E7%82%B9%E7%B1%BB%E5%9E%8B.png" class=""><h3 id="Leader节点"><a href="#Leader节点" class="headerlink" title="Leader节点"></a>Leader节点</h3><p>Leader负责数据的写操作和各节点数据一致性</p><img src="/2020/04/29/zk/zkSrc_arch/leader_class.png" class=""><h4 id="LeaderZooKeeperServer"><a href="#LeaderZooKeeperServer" class="headerlink" title="LeaderZooKeeperServer"></a>LeaderZooKeeperServer</h4><p>Leader节点对应的设置</p><h4 id="Leader"><a href="#Leader" class="headerlink" title="Leader"></a>Leader</h4><p>负责管理Leader相关逻辑的类。维护了一组LearnerHandler信息来处理和Learner的交互。</p><h4 id="LearnerHandler"><a href="#LearnerHandler" class="headerlink" title="LearnerHandler"></a>LearnerHandler</h4><p>LearnerHandler用来处理Leader和Learner之间的交互，例如发送Packets到Learner，从Learner接收Packet并处理等。</p><h4 id="Leader-Processors"><a href="#Leader-Processors" class="headerlink" title="Leader Processors"></a>Leader Processors</h4><p>Processor用来处理客户端的请求，Leader的firstProcessor为LeaderRequestProcessor的一个实例。处理Request使用的是职责链模式，Processor之间的虚线表示的是Request的处理流程。</p><h3 id="Follower节点"><a href="#Follower节点" class="headerlink" title="Follower节点"></a>Follower节点</h3><p>Follower节点对外提供服务，同时参与选举Leader。</p><h4 id="FollowerZooKeeperServer"><a href="#FollowerZooKeeperServer" class="headerlink" title="FollowerZooKeeperServer"></a>FollowerZooKeeperServer</h4><p>Follower节点对应的设置。</p><h4 id="Follower"><a href="#Follower" class="headerlink" title="Follower"></a>Follower</h4><p>负责Follower相关逻辑的类，主要用于管理和Leader节点的交互，如PING，PROPOSAL，COMMIT等Request的处理等。</p><h4 id="Follower-Processors"><a href="#Follower-Processors" class="headerlink" title="Follower Processors"></a>Follower Processors</h4><p>Follower的Processors主要用来处理来自客户端的请求，Follower的firstProcessor为FollowerRequestProcessor，也是职责链模式，流程处理由虚线表示。</p><h3 id="Observer节点"><a href="#Observer节点" class="headerlink" title="Observer节点"></a>Observer节点</h3><p>TODO</p>]]></content>
      
      
      <categories>
          
          <category> zookeeper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zookeeper源码-0.调试</title>
      <link href="2020/04/29/zk/zkSrc_debug/"/>
      <url>2020/04/29/zk/zkSrc_debug/</url>
      
        <content type="html"><![CDATA[<h2 id="使用intelliJ-IDEA调试-zookeeper源码"><a href="#使用intelliJ-IDEA调试-zookeeper源码" class="headerlink" title="使用intelliJ IDEA调试 zookeeper源码"></a>使用intelliJ IDEA调试 zookeeper源码</h2><p>zookeeper之前版本使用ant build，目前master的3.7.0版本开始改用mvn管理</p><p>将源码导入IDEA，导入方式选择maven</p><h2 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h2><p>IDEA右侧maven菜单，点击图标”Generate Sources and Update Folders For All Projects”，重新build</p><img src="/2020/04/29/zk/zkSrc_debug/src_build.png" class=""><h2 id="修改jre"><a href="#修改jre" class="headerlink" title="修改jre"></a>修改jre</h2><p>打开项目结构<strong>（⌘ + ;）</strong>，指定jdk为<code>1.8</code><br>若使用jdk13，不支持的com.sun.nio.file方法编译报错，<a href="https://github.com/apache/zookeeper/pull/1269" title="com.sun.nio.file.SensitivityWatchEventModifier" target="">issue</a></p><h2 id="修改gitignore文件"><a href="#修改gitignore文件" class="headerlink" title="修改gitignore文件"></a>修改gitignore文件</h2><p>由于开发环境需要进行调试，临时配置文件是不需要进代码仓库的，所以进行排除。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Ignore debug conf</span></span><br><span class="line">conf/zoo.cfg</span><br><span class="line">conf/zoo*.cfg</span><br><span class="line">zookeeper-server/src/main/resources/log4j.properties</span><br></pre></td></tr></tbody></table></figure><h2 id="config配置"><a href="#config配置" class="headerlink" title="config配置"></a>config配置</h2><ol><li>拷贝zoo_sample.cfg文件至相同文件夹下，名为: zoo.cfg，配置全部使用默认</li><li>创建/tmp/zookeeper目录，用于存放zk数据；</li><li>拷贝log4j.properties文件至: zookeeper-server/src/main/resources，文件名还是log4j.properties不变</li><li>打开项目结构，将resources目录标记为Resources类型（不配置的话日志配置不生效）</li></ol><img src="/2020/04/29/zk/zkSrc_debug/src_resource_config.png" class=""><h2 id="debug启动项"><a href="#debug启动项" class="headerlink" title="debug启动项"></a>debug启动项</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">QuorumPeerMain</span><br><span class="line">org.apache.zookeeper.server.quorum.QuorumPeerMain</span><br><span class="line">conf/zoo.cfg</span><br></pre></td></tr></tbody></table></figure><img src="/2020/04/29/zk/zkSrc_debug/src_debug_config.png" class=""><h2 id="info-version"><a href="#info-version" class="headerlink" title="info version"></a>info version</h2><p>src/main/java/org/apache/zookeeper/version/util/VerGen.java 的main方法用于生成Info.java版本信息</p><h2 id="启动报错"><a href="#启动报错" class="headerlink" title="启动报错"></a>启动报错</h2><p>Caused by: java.lang.ClassNotFoundException: com.codahale.metrics.Reservoir</p><p>AppClassLoader的URL中报错，临时改代码解决方法: 将QuorumPeerMain的main方法搬到test包中规避，debug启动项路径也调整至test</p>]]></content>
      
      
      <categories>
          
          <category> zookeeper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
